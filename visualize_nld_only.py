
import matplotlib.pyplot as plt
import numpy as np

def main():
    results_gpt3 = [3.253859306999999, 1.2145669139999988, 1.7304103680000011, 1.746582857, 2.149095567, 1.1278407329999993, 99.424533016, 304.050046639, 1.4726406010000233, 2.8289209619999838, 4.684921004999978, 1.9714681400000131, 2.067901212000038, 3.782480743000008, 1.7121255790000305, 1.5168292259999703, 1.1965666930000225, 1.8414282399999706, 1.5644627229999628, 39.362683729000025, 8.454730765999955, 36.76426960200007, 1.8659395999999333, 26.601995644999988, 1.7760869120000962, 300.585933471, 1.9128611399999045, 7.6626471240000456, 1.4998477159999766, 52.767152159000034, 2.266996234999965, 4.854138300000045, 3.957452675000013, 122.83867675900012, 2.5429120940000303, 28.20196477100012, 28.387348124000027, 300.06734223700005, 1.604979749999984, 167.5854413709999, 69.18496835099995, 2.557794559000058, 1.6871340899999723, 300.6700129029998, 138.4407379019999, 1.6507742730000246, 1.5574526300001708, 7.383190665999791, 3.2645593679999365, 24.097928454999874, 11.167181396999695, 1.271145911000076, 5.7601903100003256, 3.817169767999985, 1.9629541089998384, 10.048821293999936, 1.1710925570000654, 2.127285778999976, 1.5304904130002797, 300.6135883910001, 2.656434540000191, 1.5137469920000513, 4.178197791000002, 2.384390453999913, 25.032877164000183, 14.643682460000036, 1.440247994999936, 2.2678873869999734, 245.5946136929997, 3.190708879999999, 300.12967746, 5.793341458999976, 73.09608835600005, 300.10236164400004, 1.210496656000032, 175.37591035900004, 13.326518909000015, 1.0387070220000396, 300.17326100900004, 167.45410553300007, 56.50213999499988, 300.1239996899999, 1.8333965639999406, 111.996544503, 300.040262813, 300.24346162200027, 6.978593197000009, 72.00825221800005, 264.59159322000005, 1.5839522159999433, 9.94186300399997]
    results_og = [0.051032229000000484, 0.012770487000000053, 0.6430450039999993, 0.6000457450000001, 0.01398867600000031, 0.05718898299999964, 42.610777518, 300.213487107, 0.011360818000014206, 0.4464516430000458, 0.4289872760000435, 0.16245659000003343, 0.3474433760000011, 0.14021970000004558, 1.7090428760000123, 0.3759300799999892, 0.04166777000000366, 0.5288493639999956, 0.6830642200000057, 15.771424631999992, 7.181584432999955, 24.206462101, 0.4236970290000386, 5.10996062800001, 0.0802705959999912, 300.228169092, 0.11604977899992264, 1.879485291999913, 0.9085155090000399, 28.18788559999996, 1.5591996609999796, 2.2779660539999895, 1.0327292929999885, 76.60140305899995, 1.2090489409999918, 7.912658108999949, 12.932383325000046, 89.15538841900002, 2.390794011999901, 122.320922311, 32.47605248700006, 2.81406420899998, 0.8349409190000188, 301.20361766400015, 105.86409181999989, 0.07123859700004687, 0.3403550380000979, 2.0406061419998878, 6.619353317999867, 6.114648418000115, 4.192827356999942, 0.08636969600001976, 8.730303886000002, 2.498961402000077, 0.21998083099992982, 19.699614749000148, 0.241053926999939, 1.9420826069999748, 1.232523065000123, 300.5133557450001, 5.515965775000041, 0.6142482220000147, 1.27261714999986, 6.0175310769998305, 14.785058921999962, 11.242407803000106, 1.249537193000151, 2.307843479000212, 198.21358183200005, 0.2931240049997541, 300.3469394169997, 18.763574527999936, 40.41485657500016, 300.577454752, 0.12419050100015738, 300.0896740600001, 30.758217592000165, 0.08623131800004558, 300.2563691229998, 166.03391536899971, 23.118065067000316, 300.8276020969997, 0.6791989590001322, 30.385875897999995, 300.069535267, 300.06516040800034, 5.646829080999851, 30.798557821999566, 91.2576587780004, 2.7032737540002927, 34.509583594000105]
    results_both = [2.497261480999999, 2.5470219180000004, 3.537312989, 5.276500639999998, 2.035338511999999, 3.3199562480000004, 7.843276821, 300.594292769, 4.229163822999965, 3.6556113209999808, 5.820764636999968, 4.080688229000032, 2.0312785069999677, 4.090452085000038, 3.601670422999973, 2.718146219999994, 2.854395595000028, 4.183776787999989, 3.7300021649999735, 16.192494079000028, 5.872842171000002, 21.025361838000038, 2.5744461339999702, 19.132013649000044, 3.543293887999994, 300.05800862600006, 4.237622102000046, 4.429804927000077, 3.8581468789999462, 21.010142209000037, 4.583761243000026, 3.982017195000026, 4.720625219999988, 36.873821271, 3.8057223949999752, 15.951253153999915, 6.9770557470000085, 270.05956371000013, 4.203814397000087, 129.290376875, 79.39887850800005, 10.736089874000072, 4.349771469999951, 300.12301138600014, 76.13283725700012, 3.7618534720002117, 3.9769677780000166, 4.078040268999985, 5.13269986399996, 4.33662167500006, 7.061391183000069, 3.3249634559999777, 6.324331936999897, 8.534188291999953, 3.218698209999957, 16.14320254900008, 2.2877721960001054, 8.648260912999831, 3.232427314000006, 300.55787706499996, 5.397225144000004, 3.5889235449999433, 2.9447813420001694, 5.398610889999873, 28.670344287999797, 4.371404300999984, 3.85811250200004, 4.2165966819998175, 300.45165707900014, 3.6421374470000956, 300.13802976000034, 11.356509106999965, 16.8614454450003, 301.16139644500026, 4.140929446999962, 94.18594209799994, 12.905807407999873, 3.148938903999806, 147.12409531899993, 12.925026843000069, 7.176543483000387, 210.85585627, 3.66461817399977, 16.891000644000087, 300.29742541099995, 300.5147043459997, 11.12110126799962, 5.417814755000109, 61.36008199400021, 5.646487820000402, 15.696120210000117]

    rounded_results = [round(r, 2) for r in results_gpt3]
    rounded_results_og = [round(r, 2) for r in results_og]
    rounded_results_both = [round(r, 2) for r in results_both]


    print("Average time to solution:")
    print("GPT3.5: ", sum(rounded_results) / 91)
    print("\t\t", sum([1 for r in rounded_results if r < 300]), "/91")
    print("TFCoder OG: ", sum(rounded_results_og) / 91)
    print("\t\t", sum([1 for r in rounded_results_og if r < 300]), "/91")
    print("GPT3.5 and GPT$: ", sum(rounded_results_both) / 91)
    print("\t\t", sum([1 for r in rounded_results_both if r < 300]), "/91")

    # Sort the rounded results to ensure the cumulative count is correct
    sorted_results = sorted(rounded_results)
    sorted_results_og = sorted(rounded_results_og)
    sorted_results_both = sorted(rounded_results_both)

    # Count the number of finishes at each unique time
    # np.unique will return sorted unique values and the number of times each unique value comes up
    unique_times, counts = np.unique(sorted_results, return_counts=True)
    unique_times_og, counts_og = np.unique(sorted_results_og, return_counts=True)
    unique_times_both, counts_both = np.unique(sorted_results_both, return_counts=True)

    # Calculate the cumulative sum of the counts to get a non-decreasing sequence
    cumulative_counts = np.cumsum(counts)
    cumulative_counts_og = np.cumsum(counts_og)
    cumulative_counts_both = np.cumsum(counts_both)

    # Plotting the step plot with 'post' to indicate the step rises after the value on x-axis
    plt.step(unique_times, cumulative_counts, where='post', color='yellow', label='GPT3.5')
    plt.step(unique_times_og, cumulative_counts_og, where='post', color='blue', label='TFCoder')
    plt.step(unique_times_both, cumulative_counts_both, where='post', color='green', label='GPT3.5 and GPT4')
    
    # Setting the labels and title
    plt.xlabel('Time (s)')
    plt.ylabel('Solutions Found')
    plt.title('Solutions Found Over Time')

    plt.legend(title="NLD only")

    # Display grid
    plt.grid(True)

    # Show the plot
    plt.show()




if __name__ == "__main__":
    main()