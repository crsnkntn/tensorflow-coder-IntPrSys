Last login: Mon Nov 27 13:49:54 on ttys000
carson@Carsons-MacBook-Air-2 ~ % cd Desktop/498/final-project 
carson@Carsons-MacBook-Air-2 final-project % cd tensorflow-coder-IntPrSys 
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % code .
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 test_openai.py 
{ "id": "chatcmpl-8PvT07vCx4aoILgQSZLxfM9IsbpfO", "object": "chat.completion", "created": 1701189794, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "There are several ways to make money from the stock market. Here are a few:

1. Buying and Selling Stocks: One of the most common ways to make money in the stock market is to buy shares of companies and then sell them when their price increases. This is often referred to as \"buy low, sell high.\" 

2. Dividends: Some companies pay dividends to their shareholders. These are regular payments made out of the company's profits. If you own shares in a company that pays dividends, you will receive these payments.

3. Short Selling: This is a practice where an investor borrows shares and sells them, hoping to buy them back later at a lower price. This strategy is used when an investor believes the price of a stock is going to fall.

4. Options Trading: Options are financial derivatives that give buyers the right, but not the obligation, to buy or sell a stock at a agreed upon price and date. Investors can profit from options if their predictions about market movements are correct.

5. Day Trading: This is a strategy where stocks are bought and sold within the same day. The aim is to profit from short-term price movements.

6. ETFs and Mutual Funds: These are investment funds that trade on stock exchanges. ETFs and mutual funds allow investors to buy a diversified portfolio of stocks in a single transaction. They are a good way to reduce risk and increase potential returns.

Remember, investing in the stock market involves risk and it's possible to lose money. It's important to do your own research or consult with a financial advisor before making investment decisions." }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 7, "completion_tokens": 322, "total_tokens": 329 } }

carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 test_openai.py
You are a Computer Scientist who wants to optimize an enumerative search algorithm for tensor programs. You will be given a list of TensorFlow functions and a specification. You are to choose ten of those operations that you deem important for the search algorithm to consider. Here are the TensorFlow operations: 0: tf.abs(x) 1: tf.add(x, y) 2: tf.add_n(inputs) 3: tf.argmax(input, axis) 4: tf.argmin(input, axis) 5: tf.argsort(values, axis, stable=True) 6: tf.argsort(values, axis, direction='DESCENDING', stable=True) 7: tf.boolean_mask(tensor, mask) 8: tf.broadcast_to(input, shape) 9: tf.cast(x, dtype) 10: tf.clip_by_value(t, clip_value_min, clip_value_max) 11: tf.concat(values, axis) 12: tf.constant(value) 13: tf.constant(value, dtype) 14: tf.divide(x, y) 15: tf.equal(x, y) 16: tf.exp(x) 17: tf.expand_dims(input, axis) 18: tf.eye(num_rows) 19: tf.eye(num_rows, num_columns) 20: tf.eye(num_rows, dtype) 21: tf.fill(dims, value) 22: tf.gather(params, indices) 23: tf.gather(params, indices, axis, batch_dims) 24: tf.gather_nd(params, indices) 25: tf.gather_nd(params, indices, batch_dims) 26: tf.greater(x, y) 27: tf.greater_equal(x, y) 28: tf.math.bincount(arr) 29: tf.math.ceil(x) 30: tf.math.count_nonzero(input) 31: tf.math.count_nonzero(input, axis) 32: tf.math.cumsum(x, axis) 33: tf.math.cumsum(x, axis, exclusive=True) 34: tf.math.divide_no_nan(x, y) 35: tf.math.floor(x) 36: tf.math.log(x) 37: tf.math.logical_and(x, y) 38: tf.math.logical_not(x) 39: tf.math.logical_or(x, y) 40: tf.math.logical_xor(x, y) 41: tf.math.negative(x) 42: tf.math.reciprocal(x) 43: tf.math.reciprocal_no_nan(x) 44: tf.math.segment_max(data, segment_ids) 45: tf.math.segment_mean(data, segment_ids) 46: tf.math.segment_min(data, segment_ids) 47: tf.math.segment_prod(data, segment_ids) 48: tf.math.segment_sum(data, segment_ids) 49: tf.math.squared_difference(x, y) 50: tf.math.top_k(input, k) 51: tf.math.unsorted_segment_max(data, segment_ids, num_segments) 52: tf.math.unsorted_segment_mean(data, segment_ids, num_segments) 53: tf.math.unsorted_segment_min(data, segment_ids, num_segments) 54: tf.math.unsorted_segment_prod(data, segment_ids, num_segments) 55: tf.math.unsorted_segment_sum(data, segment_ids, num_segments) 56: tf.matmul(a, b) 57: tf.maximum(x, y) 58: tf.minimum(x, y) 59: tf.multiply(x, y) 60: tf.not_equal(x, y) 61: tf.one_hot(indices, depth) 62: tf.ones(shape) 63: tf.ones_like(input) 64: tf.pad(tensor, paddings, mode='CONSTANT') 65: tf.pad(tensor, paddings, mode='CONSTANT', constant_values) 66: tf.pad(tensor, paddings, mode='REFLECT') 67: tf.pad(tensor, paddings, mode='SYMMETRIC') 68: tf.range(start) 69: tf.range(start, limit, delta) 70: tf.reduce_any(input_tensor, axis) 71: tf.reduce_all(input_tensor, axis) 72: tf.reduce_max(input_tensor) 73: tf.reduce_max(input_tensor, axis) 74: tf.reduce_mean(input_tensor) 75: tf.reduce_mean(input_tensor, axis) 76: tf.reduce_min(input_tensor) 77: tf.reduce_min(input_tensor, axis) 78: tf.reduce_prod(input_tensor, axis) 79: tf.reduce_sum(input_tensor) 80: tf.reduce_sum(input_tensor, axis) 81: tf.repeat(input, repeats) 82: tf.repeat(input, repeats, axis) 83: tf.reshape(tensor, shape) 84: tf.reverse(tensor, axis)85: tf.roll(input, shift, axis) 86: tf.round(x) 87: tf.scatter_nd(indices, updates, shape) 88: tf.searchsorted(sorted_sequence, values, side='left') 89: tf.searchsorted(sorted_sequence, values, side='right') 90: tf.sequence_mask(lengths) 91: tf.sequence_mask(lengths, maxlen) 92: tf.shape(input) 93: tf.sign(x) 94: tf.sort(values, axis) 95: tf.sort(values, axis, direction='DESCENDING') 96: tf.sqrt(x) 97: tf.square(x) 98: tf.squeeze(input) 99: tf.squeeze(input, axis) 100: tf.stack(values, axis) 101: tf.subtract(x, y) 102: tf.tensor_scatter_nd_update(tensor, indices, updates) 103: tf.tensordot(a, b, axes) 104: tf.tile(input, multiples) 105: tf.transpose(a) 106: tf.transpose(a, perm) 107: tf.unique_with_counts(x) 108: tf.unstack(value, axis) 109: tf.where(condition) 110: tf.where(condition, x, y) 111: tf.zeros(shape) 112: tf.zeros_like(input) 113: IndexingAxis1Operation 114: IndexingOperation 115: PairCreationOperation 116: SingletonTupleCreationOperation 117: SlicingAxis0BothOperation 118: SlicingAxis0LeftOperation 119: SlicingAxis0RightOperation 120: SlicingAxis1BothOperation 121: SlicingAxis1LeftOperation 122: SlicingAxis1RightOperation 123: TripleCreationOperation Here is the specification, an input/output example, descriptor, and constant list: inputs = { 'in1': [[1, 6], [3, 8]], 'in2': [[2, 4], [5, 7]], 'in3': [[3, 8], [4, 7]], 'in4': [[6, 5], [2, 1]] } # The single desired output tensor. output = [[-5, -3], [-2, 0]] # A list of relevant scalar constants (if any). constants = [] # An English description of the tensor manipulation. description = 'Subtract the max and min of tensors compared to the transpose of other tensors' Provide a list of the indices that correspond to important functions. This list should be contained in a JSON object for easy parsing. More important functions should be first. Each operation should appear only once and there should be ten. Do not include any explanations or comments, only provide a RFC8259 compliant JSON response following this format without deviation. The JSON response contains 10 functions and is as follows:
{"model": "gpt-4", "messages": [{"role": "user", "content": ""}], "temperature": 0.7}

carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 test_openai.py
You are a Computer Scientist who wants to optimize an enumerative search algorithm for tensor programs. You will be given a list of TensorFlow functions and a specification. You are to choose ten of those operations that you deem important for the search algorithm to consider. Here are the TensorFlow operations: 0: tf.abs(x) 1: tf.add(x, y) 2: tf.add_n(inputs) 3: tf.argmax(input, axis) 4: tf.argmin(input, axis) 5: tf.argsort(values, axis, stable=True) 6: tf.argsort(values, axis, direction='DESCENDING', stable=True) 7: tf.boolean_mask(tensor, mask) 8: tf.broadcast_to(input, shape) 9: tf.cast(x, dtype) 10: tf.clip_by_value(t, clip_value_min, clip_value_max) 11: tf.concat(values, axis) 12: tf.constant(value) 13: tf.constant(value, dtype) 14: tf.divide(x, y) 15: tf.equal(x, y) 16: tf.exp(x) 17: tf.expand_dims(input, axis) 18: tf.eye(num_rows) 19: tf.eye(num_rows, num_columns) 20: tf.eye(num_rows, dtype) 21: tf.fill(dims, value) 22: tf.gather(params, indices) 23: tf.gather(params, indices, axis, batch_dims) 24: tf.gather_nd(params, indices) 25: tf.gather_nd(params, indices, batch_dims) 26: tf.greater(x, y) 27: tf.greater_equal(x, y) 28: tf.math.bincount(arr) 29: tf.math.ceil(x) 30: tf.math.count_nonzero(input) 31: tf.math.count_nonzero(input, axis) 32: tf.math.cumsum(x, axis) 33: tf.math.cumsum(x, axis, exclusive=True) 34: tf.math.divide_no_nan(x, y) 35: tf.math.floor(x) 36: tf.math.log(x) 37: tf.math.logical_and(x, y) 38: tf.math.logical_not(x) 39: tf.math.logical_or(x, y) 40: tf.math.logical_xor(x, y) 41: tf.math.negative(x) 42: tf.math.reciprocal(x) 43: tf.math.reciprocal_no_nan(x) 44: tf.math.segment_max(data, segment_ids) 45: tf.math.segment_mean(data, segment_ids) 46: tf.math.segment_min(data, segment_ids) 47: tf.math.segment_prod(data, segment_ids) 48: tf.math.segment_sum(data, segment_ids) 49: tf.math.squared_difference(x, y) 50: tf.math.top_k(input, k) 51: tf.math.unsorted_segment_max(data, segment_ids, num_segments) 52: tf.math.unsorted_segment_mean(data, segment_ids, num_segments) 53: tf.math.unsorted_segment_min(data, segment_ids, num_segments) 54: tf.math.unsorted_segment_prod(data, segment_ids, num_segments) 55: tf.math.unsorted_segment_sum(data, segment_ids, num_segments) 56: tf.matmul(a, b) 57: tf.maximum(x, y) 58: tf.minimum(x, y) 59: tf.multiply(x, y) 60: tf.not_equal(x, y) 61: tf.one_hot(indices, depth) 62: tf.ones(shape) 63: tf.ones_like(input) 64: tf.pad(tensor, paddings, mode='CONSTANT') 65: tf.pad(tensor, paddings, mode='CONSTANT', constant_values) 66: tf.pad(tensor, paddings, mode='REFLECT') 67: tf.pad(tensor, paddings, mode='SYMMETRIC') 68: tf.range(start) 69: tf.range(start, limit, delta) 70: tf.reduce_any(input_tensor, axis) 71: tf.reduce_all(input_tensor, axis) 72: tf.reduce_max(input_tensor) 73: tf.reduce_max(input_tensor, axis) 74: tf.reduce_mean(input_tensor) 75: tf.reduce_mean(input_tensor, axis) 76: tf.reduce_min(input_tensor) 77: tf.reduce_min(input_tensor, axis) 78: tf.reduce_prod(input_tensor, axis) 79: tf.reduce_sum(input_tensor) 80: tf.reduce_sum(input_tensor, axis) 81: tf.repeat(input, repeats) 82: tf.repeat(input, repeats, axis) 83: tf.reshape(tensor, shape) 84: tf.reverse(tensor, axis)85: tf.roll(input, shift, axis) 86: tf.round(x) 87: tf.scatter_nd(indices, updates, shape) 88: tf.searchsorted(sorted_sequence, values, side='left') 89: tf.searchsorted(sorted_sequence, values, side='right') 90: tf.sequence_mask(lengths) 91: tf.sequence_mask(lengths, maxlen) 92: tf.shape(input) 93: tf.sign(x) 94: tf.sort(values, axis) 95: tf.sort(values, axis, direction='DESCENDING') 96: tf.sqrt(x) 97: tf.square(x) 98: tf.squeeze(input) 99: tf.squeeze(input, axis) 100: tf.stack(values, axis) 101: tf.subtract(x, y) 102: tf.tensor_scatter_nd_update(tensor, indices, updates) 103: tf.tensordot(a, b, axes) 104: tf.tile(input, multiples) 105: tf.transpose(a) 106: tf.transpose(a, perm) 107: tf.unique_with_counts(x) 108: tf.unstack(value, axis) 109: tf.where(condition) 110: tf.where(condition, x, y) 111: tf.zeros(shape) 112: tf.zeros_like(input) 113: IndexingAxis1Operation 114: IndexingOperation 115: PairCreationOperation 116: SingletonTupleCreationOperation 117: SlicingAxis0BothOperation 118: SlicingAxis0LeftOperation 119: SlicingAxis0RightOperation 120: SlicingAxis1BothOperation 121: SlicingAxis1LeftOperation 122: SlicingAxis1RightOperation 123: TripleCreationOperation Here is the specification, an input/output example, descriptor, and constant list: inputs = { 'in1': [[1, 6], [3, 8]], 'in2': [[2, 4], [5, 7]], 'in3': [[3, 8], [4, 7]], 'in4': [[6, 5], [2, 1]] } # The single desired output tensor. output = [[-5, -3], [-2, 0]] # A list of relevant scalar constants (if any). constants = [] # An English description of the tensor manipulation. description = 'Subtract the max and min of tensors compared to the transpose of other tensors' Provide a list of the indices that correspond to important functions. This list should be contained in a JSON object for easy parsing. More important functions should be first. Each operation should appear only once and there should be ten. Do not include any explanations or comments, only provide a RFC8259 compliant JSON response following this format without deviation. The JSON response contains 10 functions and is as follows:
{"model": "gpt-4", "messages": [{"role": "user", "content": "You are a Computer Scientist who wants to optimize an enumerative search algorithm for tensor programs. You will be given a list of TensorFlow functions and a specification. You are to choose ten of those operations that you deem important for the search algorithm to consider. Here are the TensorFlow operations: 0: tf.abs(x) 1: tf.add(x, y) 2: tf.add_n(inputs) 3: tf.argmax(input, axis) 4: tf.argmin(input, axis) 5: tf.argsort(values, axis, stable=True) 6: tf.argsort(values, axis, direction='DESCENDING', stable=True) 7: tf.boolean_mask(tensor, mask) 8: tf.broadcast_to(input, shape) 9: tf.cast(x, dtype) 10: tf.clip_by_value(t, clip_value_min, clip_value_max) 11: tf.concat(values, axis) 12: tf.constant(value) 13: tf.constant(value, dtype) 14: tf.divide(x, y) 15: tf.equal(x, y) 16: tf.exp(x) 17: tf.expand_dims(input, axis) 18: tf.eye(num_rows) 19: tf.eye(num_rows, num_columns) 20: tf.eye(num_rows, dtype) 21: tf.fill(dims, value) 22: tf.gather(params, indices) 23: tf.gather(params, indices, axis, batch_dims) 24: tf.gather_nd(params, indices) 25: tf.gather_nd(params, indices, batch_dims) 26: tf.greater(x, y) 27: tf.greater_equal(x, y) 28: tf.math.bincount(arr) 29: tf.math.ceil(x) 30: tf.math.count_nonzero(input) 31: tf.math.count_nonzero(input, axis) 32: tf.math.cumsum(x, axis) 33: tf.math.cumsum(x, axis, exclusive=True) 34: tf.math.divide_no_nan(x, y) 35: tf.math.floor(x) 36: tf.math.log(x) 37: tf.math.logical_and(x, y) 38: tf.math.logical_not(x) 39: tf.math.logical_or(x, y) 40: tf.math.logical_xor(x, y) 41: tf.math.negative(x) 42: tf.math.reciprocal(x) 43: tf.math.reciprocal_no_nan(x) 44: tf.math.segment_max(data, segment_ids) 45: tf.math.segment_mean(data, segment_ids) 46: tf.math.segment_min(data, segment_ids) 47: tf.math.segment_prod(data, segment_ids) 48: tf.math.segment_sum(data, segment_ids) 49: tf.math.squared_difference(x, y) 50: tf.math.top_k(input, k) 51: tf.math.unsorted_segment_max(data, segment_ids, num_segments) 52: tf.math.unsorted_segment_mean(data, segment_ids, num_segments) 53: tf.math.unsorted_segment_min(data, segment_ids, num_segments) 54: tf.math.unsorted_segment_prod(data, segment_ids, num_segments) 55: tf.math.unsorted_segment_sum(data, segment_ids, num_segments) 56: tf.matmul(a, b) 57: tf.maximum(x, y) 58: tf.minimum(x, y) 59: tf.multiply(x, y) 60: tf.not_equal(x, y) 61: tf.one_hot(indices, depth) 62: tf.ones(shape) 63: tf.ones_like(input) 64: tf.pad(tensor, paddings, mode='CONSTANT') 65: tf.pad(tensor, paddings, mode='CONSTANT', constant_values) 66: tf.pad(tensor, paddings, mode='REFLECT') 67: tf.pad(tensor, paddings, mode='SYMMETRIC') 68: tf.range(start) 69: tf.range(start, limit, delta) 70: tf.reduce_any(input_tensor, axis) 71: tf.reduce_all(input_tensor, axis) 72: tf.reduce_max(input_tensor) 73: tf.reduce_max(input_tensor, axis) 74: tf.reduce_mean(input_tensor) 75: tf.reduce_mean(input_tensor, axis) 76: tf.reduce_min(input_tensor) 77: tf.reduce_min(input_tensor, axis) 78: tf.reduce_prod(input_tensor, axis) 79: tf.reduce_sum(input_tensor) 80: tf.reduce_sum(input_tensor, axis) 81: tf.repeat(input, repeats) 82: tf.repeat(input, repeats, axis) 83: tf.reshape(tensor, shape) 84: tf.reverse(tensor, axis)85: tf.roll(input, shift, axis) 86: tf.round(x) 87: tf.scatter_nd(indices, updates, shape) 88: tf.searchsorted(sorted_sequence, values, side='left') 89: tf.searchsorted(sorted_sequence, values, side='right') 90: tf.sequence_mask(lengths) 91: tf.sequence_mask(lengths, maxlen) 92: tf.shape(input) 93: tf.sign(x) 94: tf.sort(values, axis) 95: tf.sort(values, axis, direction='DESCENDING') 96: tf.sqrt(x) 97: tf.square(x) 98: tf.squeeze(input) 99: tf.squeeze(input, axis) 100: tf.stack(values, axis) 101: tf.subtract(x, y) 102: tf.tensor_scatter_nd_update(tensor, indices, updates) 103: tf.tensordot(a, b, axes) 104: tf.tile(input, multiples) 105: tf.transpose(a) 106: tf.transpose(a, perm) 107: tf.unique_with_counts(x) 108: tf.unstack(value, axis) 109: tf.where(condition) 110: tf.where(condition, x, y) 111: tf.zeros(shape) 112: tf.zeros_like(input) 113: IndexingAxis1Operation 114: IndexingOperation 115: PairCreationOperation 116: SingletonTupleCreationOperation 117: SlicingAxis0BothOperation 118: SlicingAxis0LeftOperation 119: SlicingAxis0RightOperation 120: SlicingAxis1BothOperation 121: SlicingAxis1LeftOperation 122: SlicingAxis1RightOperation 123: TripleCreationOperation Here is the specification, an input/output example, descriptor, and constant list: inputs = { 'in1': [[1, 6], [3, 8]], 'in2': [[2, 4], [5, 7]], 'in3': [[3, 8], [4, 7]], 'in4': [[6, 5], [2, 1]] } # The single desired output tensor. output = [[-5, -3], [-2, 0]] # A list of relevant scalar constants (if any). constants = [] # An English description of the tensor manipulation. description = 'Subtract the max and min of tensors compared to the transpose of other tensors' Provide a list of the indices that correspond to important functions. This list should be contained in a JSON object for easy parsing. More important functions should be first. Each operation should appear only once and there should be ten. Do not include any explanations or comments, only provide a RFC8259 compliant JSON response following this format without deviation. The JSON response contains 10 functions and is as follows:"}], "temperature": 0.7}

carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 test_openai.py
{ "id": "chatcmpl-8Pvo5wwvROGDiH89xvDj0IAlOKnwc", "object": "chat.completion", "created": 1701191101, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "{
 \"functions\": [
 56, 
 83, 
 73, 
 76, 
 101, 
 14, 
 59, 
 1, 
 92, 
 57
 ]
}" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1573, "completion_tokens": 58, "total_tokens": 1631 } }

carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 single_test.py
^C
Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/single_test.py", line 7, in <module>
    import tensorflow as tf  # pylint: disable=unused-import
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/tensorflow/__init__.py", line 473, in <module>
    keras._load()
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/tensorflow/python/util/lazy_loader.py", line 41, in _load
    module = importlib.import_module(self.__name__)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/api/__init__.py", line 8, in <module>
    from keras.api import keras
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/api/keras/__init__.py", line 19, in <module>
    from keras.api.keras import datasets
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/api/keras/datasets/__init__.py", line 12, in <module>
    from keras.api.keras.datasets import imdb
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/api/keras/datasets/imdb/__init__.py", line 8, in <module>
    from keras.datasets.imdb import get_word_index
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/datasets/imdb.py", line 21, in <module>
    from keras.preprocessing.sequence import _remove_long_seq
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/preprocessing/__init__.py", line 31, in <module>
    from keras.preprocessing import image
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/keras/preprocessing/image.py", line 46, in <module>
    from scipy import linalg  # pylint: disable=unused-import
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/scipy/linalg/__init__.py", line 198, in <module>
    from ._misc import *
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/scipy/linalg/_misc.py", line 3, in <module>
    from .blas import get_blas_funcs
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/scipy/linalg/blas.py", line 213, in <module>
    from scipy.linalg import _fblas
KeyboardInterrupt

carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % 
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 single_test.py
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs={'in1': [[1, 6], [3, 8]], 'in2': [[2, 4], [5, 7]], 'in3': [[3, 8], [4, 7]], 'in4': [[6, 5], [2, 1]]}, output=[[-5, -3], [-2, 0]])] description = Subtract the maximum and minimum of tensors compared to the transpose of other tensors constants = []
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 test_openai.py
Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/test_openai.py", line 26, in <module>
    main()
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/test_openai.py", line 8, in main
    data = json.loads(response.stdout)
NameError: name 'json' is not defined
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 test_openai.py
Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/test_openai.py", line 27, in <module>
    main()
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/test_openai.py", line 9, in main
    data = json.loads(response.stdout)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 353, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Invalid control character at: line 1 column 200 (char 199)
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 test_openai.py
{ "id": "chatcmpl-8Pw6GPr02Di04stuER1ZngPw9OVNH", "object": "chat.completion", "created": 1701192228, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "{
 \"functions\": [1, 56, 73, 76, 105, 83, 59, 101, 26, 27]
}" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1573, "completion_tokens": 36, "total_tokens": 1609 } }

Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/test_openai.py", line 27, in <module>
    main()
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/test_openai.py", line 9, in main
    data = json.loads(response.stdout)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 353, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Invalid control character at: line 1 column 200 (char 199)
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 test_openai.py
{ "id": "chatcmpl-8PwCEVzS2ZEq2hSIetWUIteYXeGjV", "object": "chat.completion", "created": 1701192598, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[56, 73, 76, 105, 1, 101, 83, 14, 59, 11]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1560, "completion_tokens": 30, "total_tokens": 1590 } }

content_string:  [56, 73, 76, 105, 1, 101, 83, 14, 59, 11]
[56, 73, 76, 105, 1, 101, 83, 14, 59, 11]
iterating!  56
iterating!  73
iterating!  76
iterating!  105
iterating!  1
iterating!  101
iterating!  83
iterating!  14
iterating!  59
iterating!  11
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 single_test.py
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
benchmark check,  Subtract the maximum and minimum of tensors compared to the transpose of other tensors
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 single_test.py
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/single_test.py", line 95, in <module>
    app.run(main)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 308, in run
    _run_main(main, args)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 254, in _run_main
    sys.exit(main(argv))
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/single_test.py", line 92, in main
    run_tf_coder(inputs, output, constants, description, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/single_test.py", line 79, in run_tf_coder
    result = colab_interface.run_value_search_from_colab(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/colab_interface.py", line 105, in run_value_search_from_colab
    return value_search.run_value_search_from_example(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 724, in run_value_search_from_example
    return run_value_search(benchmark, settings, **kwargs)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 658, in run_value_search
    operations = get_reweighted_operations_gpt(benchmark, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 601, in get_reweighted_operations_gpt
    data = json.loads(result.stdout)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 single_test.py
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
CompletedProcess(args=['sh', '../../test.sh', "examples = [Example(inputs={'in1': [[1, 6], [3, 8]], 'in2': [[2, 4], [5, 7]], 'in3': [[3, 8], [4, 7]], 'in4': [[6, 5], [2, 1]]}, output=[[-5, -3], [-2, 0]])] description = Subtract the maximum and minimum of tensors compared to the transpose of other tensors constants = []"], returncode=127, stdout='', stderr='sh: ../../test.sh: No such file or directory\n')
Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/single_test.py", line 95, in <module>
    app.run(main)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 308, in run
    _run_main(main, args)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 254, in _run_main
    sys.exit(main(argv))
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/single_test.py", line 92, in main
    run_tf_coder(inputs, output, constants, description, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/single_test.py", line 79, in run_tf_coder
    result = colab_interface.run_value_search_from_colab(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/colab_interface.py", line 105, in run_value_search_from_colab
    return value_search.run_value_search_from_example(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 725, in run_value_search_from_example
    return run_value_search(benchmark, settings, **kwargs)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 659, in run_value_search
    operations = get_reweighted_operations_gpt(benchmark, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 602, in get_reweighted_operations_gpt
    data = json.loads(result.stdout)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 single_test.py
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwODJHqIBVFTOslmQItyxuK08VSX", "object": "chat.completion", "created": 1701193341, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 56, 105, 73, 76, 11, 83, 22, 24, 14, 59, 101, 57, 58, 72]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1533, "completion_tokens": 45, "total_tokens": 1578 } }

Altering:  [1, 56, 105, 73, 76, 11, 83, 22, 24, 14, 59, 101, 57, 58, 72]

Reweighted:
Operation  0 : [ tf.gather(params, indices) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  5 : [ tf.reduce_max(input_tensor, axis) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  10 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  11 : [ tf.subtract(x, y) ], weight= 8
Operation  12 : [ tf.minimum(x, y) ], weight= 9
Operation  13 : [ tf.concat(values, axis) ], weight= 10
Operation  14 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  31 : [ tf.range(start) ], weight= 28
Operation  32 : [ tf.square(x) ], weight= 28
Operation  33 : [ tf.tile(input, multiples) ], weight= 28
Operation  34 : [ tf.argmax(input, axis) ], weight= 32
Operation  35 : [ tf.greater_equal(x, y) ], weight= 32
Operation  36 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  37 : [ tf.zeros_like(input) ], weight= 32
Operation  38 : [ IndexingAxis1Operation ], weight= 32
Operation  39 : [ IndexingOperation ], weight= 32
Operation  40 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[1 6]
 [3 8]], shape=(2, 2), dtype=int32)

Input 'in2':
tf.Tensor(
[[2 4]
 [5 7]], shape=(2, 2), dtype=int32)

Input 'in3':
tf.Tensor(
[[3 8]
 [4 7]], shape=(2, 2), dtype=int32)

Input 'in4':
tf.Tensor(
[[6 5]
 [2 1]], shape=(2, 2), dtype=int32)

Output:
tf.Tensor(
[[-5 -3]
 [-2  0]], shape=(2, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2]

Description: Subtract the maximum and minimum of tensors compared to the transpose of other tensors

Searching...

Could not find solution within 300 seconds.
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % benchmarks.py
zsh: command not found: benchmarks.py
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 benchmarks.py
Benchmark # 0  --  tf.add(in1, in2)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwaMmNNhaU7iaH0KnX31eQFytFNV", "object": "chat.completion", "created": 1701194094, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 101, 59, 14, 56, 103, 11, 100, 83, 8, 9, 105, 106, 79, 80]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1454, "completion_tokens": 45, "total_tokens": 1499 } }

Altering:  [1, 101, 59, 14, 56, 103, 11, 100, 83, 8, 9, 105, 106, 79, 80]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.stack(values, axis) ], weight= 10
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([10], shape=(1,), dtype=int32)

Input 'in2':
tf.Tensor([20], shape=(1,), dtype=int32)

Output:
tf.Tensor([30], shape=(1,), dtype=int32)

Constants: [0, 1, -1, True, False]

Description: Add elementwise

Searching...

Found solution: tf.add(in1, in2)

Solution was found in 2.8 seconds:
tf.add(in1, in2)
Found in  2.796382210999999 s!
[2.796382210999999]
Benchmark # 1  --  tf.cast(in1, tf.bool)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwaONO41FN8EXzRok8FQvWVz4q9a", "object": "chat.completion", "created": 1701194096, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[9, 1, 59, 101, 14, 57, 58, 15, 60, 26, 27, 37, 39, 56, 83]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1469, "completion_tokens": 45, "total_tokens": 1514 } }

Altering:  [9, 1, 59, 101, 14, 57, 58, 15, 60, 26, 27, 37, 39, 56, 83]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.equal(x, y) ], weight= 7
Operation  2 : [ tf.greater(x, y) ], weight= 7
Operation  3 : [ tf.matmul(a, b) ], weight= 7
Operation  4 : [ tf.maximum(x, y) ], weight= 7
Operation  5 : [ tf.multiply(x, y) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.greater_equal(x, y) ], weight= 9
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.math.logical_and(x, y) ], weight= 13
Operation  13 : [ tf.math.logical_or(x, y) ], weight= 13
Operation  14 : [ tf.not_equal(x, y) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  24 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.concat(values, axis) ], weight= 36
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([1 0 1 1 0], shape=(5,), dtype=int32)

Output:
tf.Tensor([ True False  True  True False], shape=(5,), dtype=bool)

Constants: [0, 1, -1, True, False, 5]

Description: cast a tensor

Searching...

Found solution: tf.cast(in1, tf.bool)

Solution was found in 2.5 seconds:
tf.cast(in1, tf.bool)
Found in  2.5232773159999997 s!
[2.5232773159999997, 2.796382210999999]
Benchmark # 2  --  tf.add(in1, tf.expand_dims(in2, 1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwaRcjVLTvVMBMeDz6Zi2j1zZ04q", "object": "chat.completion", "created": 1701194099, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 11, 83, 105, 59, 14, 101, 57, 58, 9, 8, 103, 56, 79, 74]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 3764, "completion_tokens": 45, "total_tokens": 3809 } }

Altering:  [1, 11, 83, 105, 59, 14, 101, 57, 58, 9, 8, 103, 56, 79, 74]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  14 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
 96 97 98 99], shape=(100,), dtype=int32)

Input 'in2':
tf.Tensor([1000 2000 3000 4000 5000], shape=(5,), dtype=int32)

Output:
tf.Tensor(
[[1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013
  1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027
  1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041
  1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055
  1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069
  1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083
  1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097
  1098 1099]
 [2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013
  2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027
  2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041
  2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055
  2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069
  2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083
  2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097
  2098 2099]
 [3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013
  3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027
  3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041
  3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055
  3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069
  3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083
  3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097
  3098 3099]
 [4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013
  4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027
  4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 4041
  4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055
  4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069
  4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083
  4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097
  4098 4099]
 [5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5010 5011 5012 5013
  5014 5015 5016 5017 5018 5019 5020 5021 5022 5023 5024 5025 5026 5027
  5028 5029 5030 5031 5032 5033 5034 5035 5036 5037 5038 5039 5040 5041
  5042 5043 5044 5045 5046 5047 5048 5049 5050 5051 5052 5053 5054 5055
  5056 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 5067 5068 5069
  5070 5071 5072 5073 5074 5075 5076 5077 5078 5079 5080 5081 5082 5083
  5084 5085 5086 5087 5088 5089 5090 5091 5092 5093 5094 5095 5096 5097
  5098 5099]], shape=(5, 100), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 100]

Description: Add two tensors

Searching...

Found solution: tf.add(in1, tf.expand_dims(in2, 1))

Solution was found in 3.6 seconds:
tf.add(in1, tf.expand_dims(in2, 1))
Found in  3.5908718299999975 s!
[2.5232773159999997, 2.796382210999999, 3.5908718299999975]
Benchmark # 3  --  tf.add(in1, tf.expand_dims(in2, 1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwaVmSM2FnfdeJjezOcgVwiHiDr2", "object": "chat.completion", "created": 1701194103, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 8, 83, 56, 59, 11, 100, 105, 14, 101, 57, 58, 0, 9, 10]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1491, "completion_tokens": 45, "total_tokens": 1536 } }

Altering:  [1, 8, 83, 56, 59, 11, 100, 105, 14, 101, 57, 58, 0, 9, 10]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.stack(values, axis) ], weight= 10
Operation  12 : [ tf.abs(x) ], weight= 12
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([3 4 5], shape=(3,), dtype=int32)

Input 'in2':
tf.Tensor([10 20 30], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[13 14 15]
 [23 24 25]
 [33 34 35]], shape=(3, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3]

Description: Add two tensors with broadcasting

Searching...

Found solution: tf.add(in1, tf.expand_dims(in2, 1))

Solution was found in 2.6 seconds:
tf.add(in1, tf.expand_dims(in2, 1))
Found in  2.5846217510000002 s!
[2.5232773159999997, 2.5846217510000002, 2.796382210999999, 3.5908718299999975]
Benchmark # 4  --  tf.cast(in1, tf.float32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwaXiwKMfJ6tCEgvUOuGkK9y55GA", "object": "chat.completion", "created": 1701194105, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[9, 83, 1, 101, 14, 59, 57, 58, 33, 32, 72, 76, 74, 75, 80]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1472, "completion_tokens": 45, "total_tokens": 1517 } }

Altering:  [9, 83, 1, 101, 14, 59, 57, 58, 33, 32, 72, 76, 74, 75, 80]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  11 : [ tf.reduce_mean(input_tensor, axis) ], weight= 12
Operation  12 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  13 : [ tf.math.cumsum(x, axis) ], weight= 13
Operation  14 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 14
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.matmul(a, b) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.fill(dims, value) ], weight= 40
Operation  60 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  61 : [ tf.math.bincount(arr) ], weight= 40
Operation  62 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([12 34 56], shape=(3,), dtype=int32)

Output:
tf.Tensor([12. 34. 56.], shape=(3,), dtype=float32)

Constants: [0, 1, -1, True, False, 3]

Description: Cast an int tensor into a float tensor

Searching...

Found solution: tf.cast(in1, tf.float32)

Solution was found in 2.0 seconds:
tf.cast(in1, tf.float32)
Found in  2.0102343970000014 s!
[2.0102343970000014, 2.5232773159999997, 2.5846217510000002, 2.796382210999999, 3.5908718299999975]
Benchmark # 5  --  in1[in2]
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwaZocXNSEocDtvzU3NE1fv5VFlO", "object": "chat.completion", "created": 1701194107, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 56, 103, 11, 100, 22, 24, 83, 8, 105, 106, 102]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1462, "completion_tokens": 45, "total_tokens": 1507 } }

Altering:  [1, 14, 59, 101, 56, 103, 11, 100, 22, 24, 83, 8, 105, 106, 102]

Reweighted:
Operation  0 : [ tf.gather(params, indices) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.stack(values, axis) ], weight= 10
Operation  12 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  13 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([12 34 56 78], shape=(4,), dtype=int32)

Input 'in2':
-2

Output:
tf.Tensor(56, shape=(), dtype=int32)

Constants: [0, 1, -1, True, False, 4]

Description: Index into a tensor

Searching...

Found solution: in1[in2]

Solution was found in 2.8 seconds:
in1[in2]
Found in  2.792724236999998 s!
[2.0102343970000014, 2.5232773159999997, 2.5846217510000002, 2.792724236999998, 2.796382210999999, 3.5908718299999975]
Benchmark # 6  --  tf.constant(10)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8Pwact5UcZPo3kGs50XCBtbFiGOpg", "object": "chat.completion", "created": 1701194110, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 101, 14, 57, 58, 56, 103, 11, 100, 83, 105, 106, 98, 99]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1505, "completion_tokens": 45, "total_tokens": 1550 } }

Altering:  [1, 59, 101, 14, 57, 58, 56, 103, 11, 100, 83, 105, 106, 98, 99]

Reweighted:
Operation  0 : [ tf.squeeze(input, axis) ], weight= 6
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.stack(values, axis) ], weight= 10
Operation  13 : [ tf.squeeze(input) ], weight= 11
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'ones':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Input 'hundreds':
tf.Tensor([100 200 300], shape=(3,), dtype=int32)

Output:
tf.Tensor(10, shape=(), dtype=int32)

Constants: [1, 10, 100, 0, -1, True, False, 3, 5]

Description: find the right constant

Searching...

Found solution: tf.cast(tf.reduce_sum(tf.divide(tf.tensordot(ones, tens, 1), hundreds)), tf.int32)

Solution was found in 10.3 seconds:
tf.cast(tf.reduce_sum(tf.divide(tf.tensordot(ones, tens, 1), hundreds)), tf.int32)
Found in  10.293908006999999 s!
[2.0102343970000014, 2.5232773159999997, 2.5846217510000002, 2.792724236999998, 2.796382210999999, 3.5908718299999975, 10.293908006999999]
Benchmark # 7  --  tens
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8Pwamb94tEs9ooQDvdLLWRx3tuar3", "object": "chat.completion", "created": 1701194120, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 101, 59, 14, 9, 83, 104, 105, 106, 62, 111, 63, 112, 103, 56]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1512, "completion_tokens": 45, "total_tokens": 1557 } }

Altering:  [1, 101, 59, 14, 9, 83, 104, 105, 106, 62, 111, 63, 112, 103, 56]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.tile(input, multiples) ], weight= 8
Operation  10 : [ tf.zeros_like(input) ], weight= 9
Operation  11 : [ tf.ones_like(input) ], weight= 10
Operation  12 : [ tf.zeros(shape) ], weight= 12
Operation  13 : [ tf.ones(shape) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'ones':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Input 'hundreds':
tf.Tensor([100 200 300], shape=(3,), dtype=int32)

Output:
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Constants: [999, 0, 1, -1, True, False, 3, 5]

Description: find the right input variable

Searching...

WARNING: The output is the same as the input or constant `tens`. Check that your input-output example is correct.

^CTraceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 68, in <module>
    app.run(main)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 308, in run
    _run_main(main, args)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 254, in _run_main
    sys.exit(main(argv))
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 60, in main
    time = run_tf_coder(bm.examples[0].inputs, bm.examples[0].output, bm.constants, bm.description, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 40, in run_tf_coder
    result = colab_interface.run_value_search_from_colab(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/colab_interface.py", line 105, in run_value_search_from_colab
    return value_search.run_value_search_from_example(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 725, in run_value_search_from_example
    return run_value_search(benchmark, settings, **kwargs)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 666, in run_value_search
    solutions, value_set, values_by_weight, statistics = _find_solutions(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 383, in _find_solutions
    for value in operation.enumerate_values_with_weight(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/operation_base.py", line 279, in enumerate_values_with_weight
    results.extend(self._enumerate_values(arg_options, end_time, settings,
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/operation_base.py", line 206, in _enumerate_values
    maybe_value = self.apply(arg_values, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/function_operation.py", line 127, in apply
    return value.OperationValue(result_value, self, arg_values)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value.py", line 350, in __init__
    super(OperationValue, self).__init__(value)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value.py", line 168, in __init__
    if self.num_elements() == 0:
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value.py", line 35, in new_fn
    result = fn(self)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value.py", line 278, in num_elements
    return tf_coder_utils.num_tensor_elements(self.value)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/tf_coder_utils.py", line 100, in num_tensor_elements
    return int(tf.size(tensor))
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/tensorflow/python/util/traceback_utils.py", line 150, in error_handler
    return fn(*args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/tensorflow/python/util/dispatch.py", line 1082, in op_dispatch_handler
    return dispatch_target(*args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/tensorflow/python/ops/array_ops.py", line 752, in size_v2
    return size(input, name, out_type)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/tensorflow/python/util/traceback_utils.py", line 150, in error_handler
    return fn(*args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/tensorflow/python/util/dispatch.py", line 1082, in op_dispatch_handler
    return dispatch_target(*args, **kwargs)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/tensorflow/python/ops/array_ops.py", line 784, in size
    return size_internal(input, name, optimize=True, out_type=out_type)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/tensorflow/python/ops/array_ops.py", line 801, in size_internal
    if (context.executing_eagerly() and not hasattr(input, "graph") and
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/tensorflow/python/eager/context.py", line 2219, in executing_eagerly
    return ctx.executing_eagerly()
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/tensorflow/python/eager/context.py", line 975, in executing_eagerly
    return self._thread_local_data.is_eager
KeyboardInterrupt

carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 benchmarks.py
Benchmark # 0  --  tf.add(in1, in2)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwbugZzXqQrgRkBNhGpPbmlAWoQT", "object": "chat.completion", "created": 1701194190, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 2, 11, 59, 101, 14, 56, 103, 9, 83, 105, 12, 62, 111, 22]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1454, "completion_tokens": 45, "total_tokens": 1499 } }

Altering:  [1, 2, 11, 59, 101, 14, 56, 103, 9, 83, 105, 12, 62, 111, 22]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.constant(value) ], weight= 6
Operation  2 : [ tf.gather(params, indices) ], weight= 7
Operation  3 : [ tf.matmul(a, b) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.zeros(shape) ], weight= 12
Operation  13 : [ tf.add_n(inputs) ], weight= 13
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.squeeze(input, axis) ], weight= 23
Operation  19 : [ tf.constant(value, dtype) ], weight= 24
Operation  20 : [ tf.equal(x, y) ], weight= 24
Operation  21 : [ tf.greater(x, y) ], weight= 24
Operation  22 : [ tf.maximum(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([10], shape=(1,), dtype=int32)

Input 'in2':
tf.Tensor([20], shape=(1,), dtype=int32)

Output:
tf.Tensor([30], shape=(1,), dtype=int32)

Constants: [0, 1, -1, True, False]

Description: Add elementwise

Searching...

Found solution: tf.add(in1, in2)

Solution was found in 2.4 seconds:
tf.add(in1, in2)
Found in  2.3666453520000026 s!
[2.3666453520000026]
Benchmark # 1  --  tf.cast(in1, tf.bool)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwbwfnLlcbT7qRBKcFYigBeMgWSI", "object": "chat.completion", "created": 1701194192, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[9, 83, 105, 1, 59, 101, 14, 56, 26, 27, 15, 60, 57, 58, 104]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1469, "completion_tokens": 45, "total_tokens": 1514 } }

Altering:  [9, 83, 105, 1, 59, 101, 14, 56, 26, 27, 15, 60, 57, 58, 104]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.equal(x, y) ], weight= 7
Operation  2 : [ tf.greater(x, y) ], weight= 7
Operation  3 : [ tf.matmul(a, b) ], weight= 7
Operation  4 : [ tf.maximum(x, y) ], weight= 7
Operation  5 : [ tf.multiply(x, y) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.tile(input, multiples) ], weight= 8
Operation  12 : [ tf.greater_equal(x, y) ], weight= 9
Operation  13 : [ tf.minimum(x, y) ], weight= 9
Operation  14 : [ tf.not_equal(x, y) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  24 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.argmax(input, axis) ], weight= 32
Operation  35 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  36 : [ tf.zeros_like(input) ], weight= 32
Operation  37 : [ IndexingAxis1Operation ], weight= 32
Operation  38 : [ IndexingOperation ], weight= 32
Operation  39 : [ tf.concat(values, axis) ], weight= 36
Operation  40 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([1 0 1 1 0], shape=(5,), dtype=int32)

Output:
tf.Tensor([ True False  True  True False], shape=(5,), dtype=bool)

Constants: [0, 1, -1, True, False, 5]

Description: cast a tensor

Searching...

Found solution: tf.cast(in1, tf.bool)

Solution was found in 2.2 seconds:
tf.cast(in1, tf.bool)
Found in  2.233127284000002 s!
[2.233127284000002, 2.3666453520000026]
Benchmark # 2  --  tf.add(in1, tf.expand_dims(in2, 1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwbytLTOvgZgj70l5lBzVmK2dIr3", "object": "chat.completion", "created": 1701194194, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 11, 83, 59, 101, 14, 56, 103, 34, 57, 58, 8, 81, 104, 105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 3764, "completion_tokens": 45, "total_tokens": 3809 } }

Altering:  [1, 11, 83, 59, 101, 14, 56, 103, 34, 57, 58, 8, 81, 104, 105]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.tile(input, multiples) ], weight= 8
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  13 : [ tf.math.divide_no_nan(x, y) ], weight= 15
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.repeat(input, repeats) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.exp(x) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
 96 97 98 99], shape=(100,), dtype=int32)

Input 'in2':
tf.Tensor([1000 2000 3000 4000 5000], shape=(5,), dtype=int32)

Output:
tf.Tensor(
[[1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013
  1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027
  1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041
  1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055
  1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069
  1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083
  1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097
  1098 1099]
 [2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013
  2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027
  2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041
  2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055
  2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069
  2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083
  2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097
  2098 2099]
 [3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013
  3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027
  3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041
  3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055
  3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069
  3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083
  3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097
  3098 3099]
 [4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013
  4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027
  4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 4041
  4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055
  4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069
  4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083
  4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097
  4098 4099]
 [5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5010 5011 5012 5013
  5014 5015 5016 5017 5018 5019 5020 5021 5022 5023 5024 5025 5026 5027
  5028 5029 5030 5031 5032 5033 5034 5035 5036 5037 5038 5039 5040 5041
  5042 5043 5044 5045 5046 5047 5048 5049 5050 5051 5052 5053 5054 5055
  5056 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 5067 5068 5069
  5070 5071 5072 5073 5074 5075 5076 5077 5078 5079 5080 5081 5082 5083
  5084 5085 5086 5087 5088 5089 5090 5091 5092 5093 5094 5095 5096 5097
  5098 5099]], shape=(5, 100), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 100]

Description: Add two tensors

Searching...

Found solution: tf.add(in1, tf.expand_dims(in2, 1))

Solution was found in 2.5 seconds:
tf.add(in1, tf.expand_dims(in2, 1))
Found in  2.469581896000001 s!
[2.233127284000002, 2.3666453520000026, 2.469581896000001]
Benchmark # 3  --  tf.add(in1, tf.expand_dims(in2, 1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8Pwc1B5K7dnRYMM8tfuagD5Rr9Ivw", "object": "chat.completion", "created": 1701194197, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 8, 56, 59, 101, 14, 57, 58, 83, 105, 106, 11, 100, 9, 17]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1491, "completion_tokens": 45, "total_tokens": 1536 } }

Altering:  [1, 8, 56, 59, 101, 14, 57, 58, 83, 105, 106, 11, 100, 9, 17]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.stack(values, axis) ], weight= 10
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ PairCreationOperation ], weight= 20
Operation  16 : [ SingletonTupleCreationOperation ], weight= 20
Operation  17 : [ tf.constant(value) ], weight= 23
Operation  18 : [ tf.squeeze(input, axis) ], weight= 23
Operation  19 : [ tf.constant(value, dtype) ], weight= 24
Operation  20 : [ tf.equal(x, y) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([3 4 5], shape=(3,), dtype=int32)

Input 'in2':
tf.Tensor([10 20 30], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[13 14 15]
 [23 24 25]
 [33 34 35]], shape=(3, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3]

Description: Add two tensors with broadcasting

Searching...

Found solution: tf.add(in1, tf.expand_dims(in2, 1))

Solution was found in 2.6 seconds:
tf.add(in1, tf.expand_dims(in2, 1))
Found in  2.5907125200000003 s!
[2.233127284000002, 2.3666453520000026, 2.469581896000001, 2.5907125200000003]
Benchmark # 4  --  tf.cast(in1, tf.float32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8Pwc3pg4wqYsOikC4ClgJhfM0oTaA", "object": "chat.completion", "created": 1701194199, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[9, 1, 14, 59, 101, 15, 60, 26, 27, 57, 58, 56, 83, 104, 105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1472, "completion_tokens": 45, "total_tokens": 1517 } }

Altering:  [9, 1, 14, 59, 101, 15, 60, 26, 27, 57, 58, 56, 83, 104, 105]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.equal(x, y) ], weight= 7
Operation  2 : [ tf.greater(x, y) ], weight= 7
Operation  3 : [ tf.matmul(a, b) ], weight= 7
Operation  4 : [ tf.maximum(x, y) ], weight= 7
Operation  5 : [ tf.multiply(x, y) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.tile(input, multiples) ], weight= 8
Operation  12 : [ tf.greater_equal(x, y) ], weight= 9
Operation  13 : [ tf.minimum(x, y) ], weight= 9
Operation  14 : [ tf.not_equal(x, y) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  24 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.argmax(input, axis) ], weight= 32
Operation  35 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  36 : [ tf.zeros_like(input) ], weight= 32
Operation  37 : [ IndexingAxis1Operation ], weight= 32
Operation  38 : [ IndexingOperation ], weight= 32
Operation  39 : [ tf.concat(values, axis) ], weight= 36
Operation  40 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([12 34 56], shape=(3,), dtype=int32)

Output:
tf.Tensor([12. 34. 56.], shape=(3,), dtype=float32)

Constants: [0, 1, -1, True, False, 3]

Description: Cast an int tensor into a float tensor

Searching...

Found solution: tf.cast(in1, tf.float32)

Solution was found in 2.1 seconds:
tf.cast(in1, tf.float32)
Found in  2.1085539939999975 s!
[2.1085539939999975, 2.233127284000002, 2.3666453520000026, 2.469581896000001, 2.5907125200000003]
Benchmark # 5  --  in1[in2]
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8Pwc500pmnyQ9OfniFP8eN6W6sQLN", "object": "chat.completion", "created": 1701194201, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 56, 103, 11, 100, 83, 105, 106, 9, 98, 81, 104]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1462, "completion_tokens": 45, "total_tokens": 1507 } }

Altering:  [1, 14, 59, 101, 56, 103, 11, 100, 83, 105, 106, 9, 98, 81, 104]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.tile(input, multiples) ], weight= 8
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.stack(values, axis) ], weight= 10
Operation  12 : [ tf.squeeze(input) ], weight= 11
Operation  13 : [ tf.transpose(a, perm) ], weight= 13
Operation  14 : [ tf.repeat(input, repeats) ], weight= 16
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([12 34 56 78], shape=(4,), dtype=int32)

Input 'in2':
-2

Output:
tf.Tensor(56, shape=(), dtype=int32)

Constants: [0, 1, -1, True, False, 4]

Description: Index into a tensor

Searching...

Found solution: in1[in2]

Solution was found in 3.3 seconds:
in1[in2]
Found in  3.2592578130000014 s!
[2.1085539939999975, 2.233127284000002, 2.3666453520000026, 2.469581896000001, 2.5907125200000003, 3.2592578130000014]
Benchmark # 6  --  tf.constant(10)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8Pwc9LdBuCD8cvEAZ3UT4KXwLAZxQ", "object": "chat.completion", "created": 1701194205, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 14, 101, 56, 103, 57, 58, 11, 100, 83, 8, 62, 111, 12]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1505, "completion_tokens": 45, "total_tokens": 1550 } }

Altering:  [1, 59, 14, 101, 56, 103, 57, 58, 11, 100, 83, 8, 62, 111, 12]

Reweighted:
Operation  0 : [ tf.constant(value) ], weight= 6
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.stack(values, axis) ], weight= 10
Operation  12 : [ tf.zeros(shape) ], weight= 12
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'ones':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Input 'hundreds':
tf.Tensor([100 200 300], shape=(3,), dtype=int32)

Output:
tf.Tensor(10, shape=(), dtype=int32)

Constants: [1, 10, 100, 0, -1, True, False, 3, 5]

Description: find the right constant

Searching...

Found solution: tf.cast(tf.reduce_sum(tf.divide(tf.tensordot(ones, tens, 1), hundreds)), tf.int32)

Solution was found in 25.3 seconds:
tf.cast(tf.reduce_sum(tf.divide(tf.tensordot(ones, tens, 1), hundreds)), tf.int32)
Found in  25.304693996 s!
[2.1085539939999975, 2.233127284000002, 2.3666453520000026, 2.469581896000001, 2.5907125200000003, 3.2592578130000014, 25.304693996]
Benchmark # 7  --  tens
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwcYmQBKAFUnu1B1KNIw8cVOPZtp", "object": "chat.completion", "created": 1701194230, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 101, 59, 14, 111, 62, 92, 83, 105, 106, 9, 56, 103, 22, 24]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1512, "completion_tokens": 45, "total_tokens": 1557 } }

Altering:  [1, 101, 59, 14, 111, 62, 92, 83, 105, 106, 9, 56, 103, 22, 24]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.shape(input) ], weight= 10
Operation  12 : [ tf.zeros(shape) ], weight= 12
Operation  13 : [ tf.ones(shape) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'ones':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Input 'hundreds':
tf.Tensor([100 200 300], shape=(3,), dtype=int32)

Output:
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Constants: [999, 0, 1, -1, True, False, 3, 5]

Description: find the right input variable

Searching...

WARNING: The output is the same as the input or constant `tens`. Check that your input-output example is correct.

Could not find solution within 300 seconds.
Found in  303.589453951 s!
[2.1085539939999975, 2.233127284000002, 2.3666453520000026, 2.469581896000001, 2.5907125200000003, 3.2592578130000014, 25.304693996, 303.589453951]
Benchmark # 8  --  tens
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwhTuPEB3F5qdnFgYkwld6iJLSGX", "object": "chat.completion", "created": 1701194535, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 56, 103, 83, 105, 106, 92, 11, 100, 8, 62, 111]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1481, "completion_tokens": 45, "total_tokens": 1526 } }

Altering:  [1, 14, 59, 101, 56, 103, 83, 105, 106, 92, 11, 100, 8, 62, 111]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.multiply(x, y) ], weight= 7
Operation  2 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  3 : [ tf.transpose(a) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.concat(values, axis) ], weight= 10
Operation  9 : [ tf.shape(input) ], weight= 10
Operation  10 : [ tf.stack(values, axis) ], weight= 10
Operation  11 : [ tf.zeros(shape) ], weight= 12
Operation  12 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  13 : [ tf.ones(shape) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.maximum(x, y) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  29 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.minimum(x, y) ], weight= 32
Operation  41 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingAxis1Operation ], weight= 32
Operation  44 : [ IndexingOperation ], weight= 32
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Output:
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Constants: [999, 0, 1, -1, True, False, 5]

Description: find the right input variable

Searching...

WARNING: The output is the same as the input or constant `tens`. Check that your input-output example is correct.

Found solution: tens

Solution was found in 2.7 seconds:
tens
Found in  2.693565183999965 s!
[2.1085539939999975, 2.233127284000002, 2.3666453520000026, 2.469581896000001, 2.5907125200000003, 2.693565183999965, 3.2592578130000014, 25.304693996, 303.589453951]
Benchmark # 9  --  in1[:, 1:in2]
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwhWs1AGzMHvS5DvMehxJT3BzDjf", "object": "chat.completion", "created": 1701194538, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 120, 121, 122, 1, 101, 14, 59, 57, 58, 72, 76, 74, 79, 56]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1484, "completion_tokens": 45, "total_tokens": 1529 } }

Altering:  [83, 120, 121, 122, 1, 101, 14, 59, 57, 58, 72, 76, 74, 79, 56]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ SlicingAxis1BothOperation ], weight= 10
Operation  11 : [ SlicingAxis1LeftOperation ], weight= 10
Operation  12 : [ SlicingAxis1RightOperation ], weight= 10
Operation  13 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  14 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[12 34 56 78]
 [-1 -2 -3 -4]], shape=(2, 4), dtype=int32)

Input 'in2':
-1

Output:
tf.Tensor(
[[34 56]
 [-2 -3]], shape=(2, 2), dtype=int32)

Constants: [0, 1, True, False, 2, 4]

Description: Slice a tensor

Searching...

Found solution: in1[:, 1:in2]

Solution was found in 2.4 seconds:
in1[:, 1:in2]
Found in  2.4389251239999794 s!
[2.1085539939999975, 2.233127284000002, 2.3666453520000026, 2.4389251239999794, 2.469581896000001, 2.5907125200000003, 2.693565183999965, 3.2592578130000014, 25.304693996, 303.589453951]
Benchmark # 10  --  tf.sparse.add(in1, tf.sparse.from_dense(in2))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwhYGgxjGCq6CUVKKvSufbW34AR1", "object": "chat.completion", "created": 1701194540, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 11, 56, 59, 14, 101, 83, 105, 106, 22, 24, 7, 8, 62, 111]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1510, "completion_tokens": 45, "total_tokens": 1555 } }

Altering:  [1, 11, 56, 59, 14, 101, 83, 105, 106, 22, 24, 7, 8, 62, 111]

Reweighted:
Operation  0 : [ tf.gather(params, indices) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.transpose(a) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.boolean_mask(tensor, mask) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.zeros(shape) ], weight= 12
Operation  12 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  13 : [ tf.ones(shape) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ tf.SparseTensor(indices, values, dense_shape) ], weight= 20
Operation  18 : [ tf.sparse.from_dense(tensor) ], weight= 20
Operation  19 : [ tf.sparse.to_dense(sp_input) ], weight= 20
Operation  20 : [ PairCreationOperation ], weight= 20
Operation  21 : [ SingletonTupleCreationOperation ], weight= 20
Operation  22 : [ tf.constant(value) ], weight= 23
Operation  23 : [ tf.squeeze(input, axis) ], weight= 23
Operation  24 : [ tf.constant(value, dtype) ], weight= 24
Operation  25 : [ tf.equal(x, y) ], weight= 24
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.maximum(x, y) ], weight= 24
Operation  28 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  29 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  30 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  31 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  32 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  33 : [ tf.where(condition) ], weight= 24
Operation  34 : [ tf.where(condition, x, y) ], weight= 24
Operation  35 : [ tf.sparse.expand_dims(sp_input, axis) ], weight= 24
Operation  36 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  37 : [ tf.range(start) ], weight= 28
Operation  38 : [ tf.square(x) ], weight= 28
Operation  39 : [ tf.tile(input, multiples) ], weight= 28
Operation  40 : [ tf.sparse.reduce_max(sp_input, axis, output_is_sparse) ], weight= 28
Operation  41 : [ tf.sparse.reduce_sum(sp_input, axis, output_is_sparse) ], weight= 28
Operation  42 : [ tf.argmax(input, axis) ], weight= 32
Operation  43 : [ tf.greater_equal(x, y) ], weight= 32
Operation  44 : [ tf.minimum(x, y) ], weight= 32
Operation  45 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  46 : [ tf.zeros_like(input) ], weight= 32
Operation  47 : [ tf.sparse.add(a, b) ], weight= 32
Operation  48 : [ tf.sparse.maximum(sp_a, sp_b) ], weight= 32
Operation  49 : [ tf.sparse.slice(sp_input, start, size) ], weight= 32
Operation  50 : [ tf.sparse.split(sp_input, num_split, axis) ], weight= 32
Operation  51 : [ IndexingAxis1Operation ], weight= 32
Operation  52 : [ IndexingOperation ], weight= 32
Operation  53 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  54 : [ tf.ones_like(input) ], weight= 36
Operation  55 : [ tf.shape(input) ], weight= 36
Operation  56 : [ tf.stack(values, axis) ], weight= 36
Operation  57 : [ tf.sparse.retain(sp_input, to_retain) ], weight= 36
Operation  58 : [ tf.sparse.to_dense(sp_input, default_value) ], weight= 36
Operation  59 : [ tf.sparse.transpose(sp_input) ], weight= 36
Operation  60 : [ SlicingAxis0BothOperation ], weight= 36
Operation  61 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  62 : [ SlicingAxis0RightOperation ], weight= 36
Operation  63 : [ SlicingAxis1BothOperation ], weight= 36
Operation  64 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  65 : [ SlicingAxis1RightOperation ], weight= 36
Operation  66 : [ TripleCreationOperation ], weight= 36
Operation  67 : [ tf.squeeze(input) ], weight= 38
Operation  68 : [ tf.abs(x) ], weight= 40
Operation  69 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  70 : [ tf.eye(num_rows) ], weight= 40
Operation  71 : [ tf.fill(dims, value) ], weight= 40
Operation  72 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  73 : [ tf.math.bincount(arr) ], weight= 40
Operation  74 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  75 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  76 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  77 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  78 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  79 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  80 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  81 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  82 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  83 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  84 : [ tf.unstack(value, axis) ], weight= 40
Operation  85 : [ tf.sparse.concat(axis, sp_inputs) ], weight= 40
Operation  86 : [ tf.sparse.minimum(sp_a, sp_b) ], weight= 40
Operation  87 : [ tf.sparse.reset_shape(sp_input) ], weight= 40
Operation  88 : [ tf.sparse.reshape(sp_input, shape) ], weight= 40
Operation  89 : [ tf.add_n(inputs) ], weight= 44
Operation  90 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  91 : [ tf.math.ceil(x) ], weight= 44
Operation  92 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  93 : [ tf.math.floor(x) ], weight= 44
Operation  94 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  95 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  96 : [ tf.not_equal(x, y) ], weight= 44
Operation  97 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  98 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  99 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  100 : [ tf.sparse.to_indicator(sp_input, vocab_size) ], weight= 44
Operation  101 : [ tf.argmin(input, axis) ], weight= 48
Operation  102 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  103 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  104 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  105 : [ tf.math.logical_not(x) ], weight= 48
Operation  106 : [ tf.math.negative(x) ], weight= 48
Operation  107 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  108 : [ tf.math.top_k(input, k) ], weight= 48
Operation  109 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  110 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  111 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  112 : [ tf.sign(x) ], weight= 48
Operation  113 : [ tf.unique_with_counts(x) ], weight= 48
Operation  114 : [ tf.exp(x) ], weight= 52
Operation  115 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  116 : [ tf.math.log(x) ], weight= 52
Operation  117 : [ tf.math.reciprocal(x) ], weight= 52
Operation  118 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  119 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  120 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  121 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  122 : [ tf.round(x) ], weight= 52
Operation  123 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  124 : [ tf.sort(values, axis) ], weight= 52
Operation  125 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  126 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  127 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  128 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  129 : [ tf.range(start, limit, delta) ], weight= 56
Operation  130 : [ tf.repeat(input, repeats) ], weight= 56
Operation  131 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  132 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  133 : [ tf.sqrt(x) ], weight= 56
Operation  134 : [ tf.sparse.transpose(sp_input, perm) ], weight= 56
Operation  135 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  136 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  137 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  138 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  139 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  140 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  141 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  142 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]], shape=(2, 2), dtype=int64), values=tf.Tensor([12 34], shape=(2,), dtype=int32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Input 'in2':
tf.Tensor(
[[-3  0]
 [-5  0]], shape=(2, 2), dtype=int32)

Output:
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]
 [1 0]], shape=(3, 2), dtype=int64), values=tf.Tensor([ 9 34 -5], shape=(3,), dtype=int32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Constants: [0, 1, -1, True, False, 2]

Description: Add sparse tensor with dense tensor

Searching...

Found solution: tf.sparse.from_dense(tf.add(in2, tf.sparse.to_dense(in1)))

Solution was found in 6.0 seconds:
tf.sparse.from_dense(tf.add(in2, tf.sparse.to_dense(in1)))
Found in  5.995997497000019 s!
[2.1085539939999975, 2.233127284000002, 2.3666453520000026, 2.4389251239999794, 2.469581896000001, 2.5907125200000003, 2.693565183999965, 3.2592578130000014, 5.995997497000019, 25.304693996, 303.589453951]
Benchmark # 11  --  tf.sparse.reduce_sum(in1, axis=1, output_is_sparse=True)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwheSXDb68EbjzRZWslXxKjInsFo", "object": "chat.completion", "created": 1701194546, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[79, 80, 83, 1, 101, 59, 14, 57, 58, 11, 56, 103, 100, 105, 106]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1501, "completion_tokens": 45, "total_tokens": 1546 } }

Altering:  [79, 80, 83, 1, 101, 59, 14, 57, 58, 11, 56, 103, 100, 105, 106]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.stack(values, axis) ], weight= 10
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ tf.SparseTensor(indices, values, dense_shape) ], weight= 20
Operation  18 : [ tf.sparse.from_dense(tensor) ], weight= 20
Operation  19 : [ tf.sparse.to_dense(sp_input) ], weight= 20
Operation  20 : [ PairCreationOperation ], weight= 20
Operation  21 : [ SingletonTupleCreationOperation ], weight= 20
Operation  22 : [ tf.constant(value) ], weight= 23
Operation  23 : [ tf.squeeze(input, axis) ], weight= 23
Operation  24 : [ tf.constant(value, dtype) ], weight= 24
Operation  25 : [ tf.equal(x, y) ], weight= 24
Operation  26 : [ tf.gather(params, indices) ], weight= 24
Operation  27 : [ tf.greater(x, y) ], weight= 24
Operation  28 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  29 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.sparse.expand_dims(sp_input, axis) ], weight= 24
Operation  33 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  34 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  35 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  36 : [ tf.range(start) ], weight= 28
Operation  37 : [ tf.square(x) ], weight= 28
Operation  38 : [ tf.tile(input, multiples) ], weight= 28
Operation  39 : [ tf.sparse.reduce_max(sp_input, axis, output_is_sparse) ], weight= 28
Operation  40 : [ tf.sparse.reduce_sum(sp_input, axis, output_is_sparse) ], weight= 28
Operation  41 : [ tf.argmax(input, axis) ], weight= 32
Operation  42 : [ tf.greater_equal(x, y) ], weight= 32
Operation  43 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  44 : [ tf.zeros_like(input) ], weight= 32
Operation  45 : [ tf.sparse.add(a, b) ], weight= 32
Operation  46 : [ tf.sparse.maximum(sp_a, sp_b) ], weight= 32
Operation  47 : [ tf.sparse.slice(sp_input, start, size) ], weight= 32
Operation  48 : [ tf.sparse.split(sp_input, num_split, axis) ], weight= 32
Operation  49 : [ IndexingAxis1Operation ], weight= 32
Operation  50 : [ IndexingOperation ], weight= 32
Operation  51 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  52 : [ tf.ones_like(input) ], weight= 36
Operation  53 : [ tf.shape(input) ], weight= 36
Operation  54 : [ tf.sparse.retain(sp_input, to_retain) ], weight= 36
Operation  55 : [ tf.sparse.to_dense(sp_input, default_value) ], weight= 36
Operation  56 : [ tf.sparse.transpose(sp_input) ], weight= 36
Operation  57 : [ SlicingAxis0BothOperation ], weight= 36
Operation  58 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  59 : [ SlicingAxis0RightOperation ], weight= 36
Operation  60 : [ SlicingAxis1BothOperation ], weight= 36
Operation  61 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  62 : [ SlicingAxis1RightOperation ], weight= 36
Operation  63 : [ TripleCreationOperation ], weight= 36
Operation  64 : [ tf.squeeze(input) ], weight= 38
Operation  65 : [ tf.abs(x) ], weight= 40
Operation  66 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  67 : [ tf.eye(num_rows) ], weight= 40
Operation  68 : [ tf.fill(dims, value) ], weight= 40
Operation  69 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  70 : [ tf.math.bincount(arr) ], weight= 40
Operation  71 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  72 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  73 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  74 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  75 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  76 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  77 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  78 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  79 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  80 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  81 : [ tf.unstack(value, axis) ], weight= 40
Operation  82 : [ tf.zeros(shape) ], weight= 40
Operation  83 : [ tf.sparse.concat(axis, sp_inputs) ], weight= 40
Operation  84 : [ tf.sparse.minimum(sp_a, sp_b) ], weight= 40
Operation  85 : [ tf.sparse.reset_shape(sp_input) ], weight= 40
Operation  86 : [ tf.sparse.reshape(sp_input, shape) ], weight= 40
Operation  87 : [ tf.add_n(inputs) ], weight= 44
Operation  88 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  89 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  90 : [ tf.math.ceil(x) ], weight= 44
Operation  91 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  92 : [ tf.math.floor(x) ], weight= 44
Operation  93 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  94 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  95 : [ tf.not_equal(x, y) ], weight= 44
Operation  96 : [ tf.ones(shape) ], weight= 44
Operation  97 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  98 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  99 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  100 : [ tf.sparse.to_indicator(sp_input, vocab_size) ], weight= 44
Operation  101 : [ tf.argmin(input, axis) ], weight= 48
Operation  102 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  103 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  104 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  105 : [ tf.math.logical_not(x) ], weight= 48
Operation  106 : [ tf.math.negative(x) ], weight= 48
Operation  107 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  108 : [ tf.math.top_k(input, k) ], weight= 48
Operation  109 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  110 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  111 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  112 : [ tf.sign(x) ], weight= 48
Operation  113 : [ tf.unique_with_counts(x) ], weight= 48
Operation  114 : [ tf.exp(x) ], weight= 52
Operation  115 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  116 : [ tf.math.log(x) ], weight= 52
Operation  117 : [ tf.math.reciprocal(x) ], weight= 52
Operation  118 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  119 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  120 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  121 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  122 : [ tf.round(x) ], weight= 52
Operation  123 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  124 : [ tf.sort(values, axis) ], weight= 52
Operation  125 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  126 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  127 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  128 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  129 : [ tf.range(start, limit, delta) ], weight= 56
Operation  130 : [ tf.repeat(input, repeats) ], weight= 56
Operation  131 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  132 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  133 : [ tf.sqrt(x) ], weight= 56
Operation  134 : [ tf.sparse.transpose(sp_input, perm) ], weight= 56
Operation  135 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  136 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  137 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  138 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  139 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  140 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  141 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  142 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]
 [1 1]], shape=(3, 2), dtype=int64), values=tf.Tensor([12 34 56], shape=(3,), dtype=int32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Output:
SparseTensor(indices=tf.Tensor(
[[0]
 [1]], shape=(2, 1), dtype=int64), values=tf.Tensor([46 56], shape=(2,), dtype=int32), dense_shape=tf.Tensor([2], shape=(1,), dtype=int64))

Constants: [0, 1, -1, True, False, 2]

Description: Reduce sum on a sparse tensor

Searching...

Found solution: tf.sparse.reduce_sum(in1, axis=1, output_is_sparse=True)

Solution was found in 3.5 seconds:
tf.sparse.reduce_sum(in1, axis=1, output_is_sparse=True)
Found in  3.4541363040000306 s!
[2.1085539939999975, 2.233127284000002, 2.3666453520000026, 2.4389251239999794, 2.469581896000001, 2.5907125200000003, 2.693565183999965, 3.2592578130000014, 3.4541363040000306, 5.995997497000019, 25.304693996, 303.589453951]
Benchmark # 12  --  tf.add(in1, tf.constant(100))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwhipDQrlbEcJt19jWUY30RCB91F", "object": "chat.completion", "created": 1701194550, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 12, 83, 56, 59, 14, 101, 42, 36, 16, 8, 11, 22, 34, 24]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1466, "completion_tokens": 45, "total_tokens": 1511 } }

Altering:  [1, 12, 83, 56, 59, 14, 101, 42, 36, 16, 8, 11, 22, 34, 24]

Reweighted:
Operation  0 : [ tf.constant(value) ], weight= 6
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.concat(values, axis) ], weight= 10
Operation  10 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  11 : [ tf.exp(x) ], weight= 15
Operation  12 : [ tf.math.divide_no_nan(x, y) ], weight= 15
Operation  13 : [ tf.math.log(x) ], weight= 15
Operation  14 : [ tf.math.reciprocal(x) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.minimum(x, y) ], weight= 32
Operation  40 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  41 : [ tf.zeros_like(input) ], weight= 32
Operation  42 : [ IndexingAxis1Operation ], weight= 32
Operation  43 : [ IndexingOperation ], weight= 32
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.fill(dims, value) ], weight= 40
Operation  60 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  61 : [ tf.math.bincount(arr) ], weight= 40
Operation  62 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.unstack(value, axis) ], weight= 40
Operation  73 : [ tf.zeros(shape) ], weight= 40
Operation  74 : [ tf.add_n(inputs) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  80 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  81 : [ tf.not_equal(x, y) ], weight= 44
Operation  82 : [ tf.ones(shape) ], weight= 44
Operation  83 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  84 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  85 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  86 : [ tf.transpose(a, perm) ], weight= 44
Operation  87 : [ tf.argmin(input, axis) ], weight= 48
Operation  88 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  89 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  90 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  91 : [ tf.math.logical_not(x) ], weight= 48
Operation  92 : [ tf.math.negative(x) ], weight= 48
Operation  93 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  94 : [ tf.math.top_k(input, k) ], weight= 48
Operation  95 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  96 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  97 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  98 : [ tf.sign(x) ], weight= 48
Operation  99 : [ tf.unique_with_counts(x) ], weight= 48
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([1 2 3], shape=(3,), dtype=int32)

Output:
tf.Tensor([101 102 103], shape=(3,), dtype=int32)

Constants: [100, 0, 1, -1, True, False, 3]

Description: Add 100 to every element

Searching...

Found solution: tf.add(in1, tf.constant(100))

Solution was found in 2.9 seconds:
tf.add(in1, tf.constant(100))
Found in  2.860567314999969 s!
[2.1085539939999975, 2.233127284000002, 2.3666453520000026, 2.4389251239999794, 2.469581896000001, 2.5907125200000003, 2.693565183999965, 2.860567314999969, 3.2592578130000014, 3.4541363040000306, 5.995997497000019, 25.304693996, 303.589453951]
Benchmark # 13  --  tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwhlPzVZyWQPCd7ux1tdyVa4gmTG", "object": "chat.completion", "created": 1701194553, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[6, 5, 95, 14, 59, 101, 1, 57, 58, 26, 27, 60, 15, 83, 56]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1493, "completion_tokens": 45, "total_tokens": 1538 } }

Altering:  [6, 5, 95, 14, 59, 101, 1, 57, 58, 26, 27, 60, 15, 83, 56]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.greater_equal(x, y) ], weight= 9
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.argsort(values, axis, stable=True) ], weight= 12
Operation  12 : [ tf.not_equal(x, y) ], weight= 13
Operation  13 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 14
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  120 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  121 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  123 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'in1':
tf.Tensor([40 20 60 50 10 20 50 50], shape=(8,), dtype=int32)

Output:
tf.Tensor([2 3 6 7 0 1 5 4], shape=(8,), dtype=int32)

Constants: [0, 1, -1, True, False, 8]

Description: Indices sorted in reverse order

Searching...

Found solution: tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)

Solution was found in 2.5 seconds:
tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)
Found in  2.4763319740000043 s!
[2.1085539939999975, 2.233127284000002, 2.3666453520000026, 2.4389251239999794, 2.469581896000001, 2.4763319740000043, 2.5907125200000003, 2.693565183999965, 2.860567314999969, 3.2592578130000014, 3.4541363040000306, 5.995997497000019, 25.304693996, 303.589453951]
Benchmark # 14  --  tf.multiply(in1, tf.eye(5))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "id": "chatcmpl-8PwhnDOwa81C6EdlYxtlZuXpNIKnq", "object": "chat.completion", "created": 1701194555, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[18, 1, 59, 83, 12, 9, 56, 21, 62, 111, 101, 14, 26, 27, 60]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1590, "completion_tokens": 45, "total_tokens": 1635 } }

Altering:  [18, 1, 59, 83, 12, 9, 56, 21, 62, 111, 101, 14, 26, 27, 60]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.constant(value) ], weight= 6
Operation  2 : [ tf.greater(x, y) ], weight= 7
Operation  3 : [ tf.matmul(a, b) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.greater_equal(x, y) ], weight= 9
Operation  10 : [ tf.eye(num_rows) ], weight= 12
Operation  11 : [ tf.fill(dims, value) ], weight= 12
Operation  12 : [ tf.zeros(shape) ], weight= 12
Operation  13 : [ tf.not_equal(x, y) ], weight= 13
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.squeeze(input, axis) ], weight= 23
Operation  19 : [ tf.constant(value, dtype) ], weight= 24
Operation  20 : [ tf.equal(x, y) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.maximum(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(7.0, shape=(), dtype=float32)

Output:
tf.Tensor(
[[7. 0. 0. 0. 0.]
 [0. 7. 0. 0. 0.]
 [0. 0. 7. 0. 0.]
 [0. 0. 0. 7. 0.]
 [0. 0. 0. 0. 7.]], shape=(5, 5), dtype=float32)

Constants: [0, 1, -1, True, False, 5]

Description: Multiply with the identity matrix

Searching...

Found solution: tf.multiply(in1, tf.eye(5))

Solution was found in 2.9 seconds:
tf.multiply(in1, tf.eye(5))
Found in  2.8552513839999847 s!
[2.1085539939999975, 2.233127284000002, 2.3666453520000026, 2.4389251239999794, 2.469581896000001, 2.4763319740000043, 2.5907125200000003, 2.693565183999965, 2.8552513839999847, 2.860567314999969, 3.2592578130000014, 3.4541363040000306, 5.995997497000019, 25.304693996, 303.589453951]
Benchmark # 15  --  tf.zeros((2, 3, 4, 5))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "error": { "message": "We could not parse the JSON body of your request. (HINT: This likely means you aren't using your HTTP library correctly. The OpenAI API expects a JSON payload, but what was sent was not valid JSON. If you have trouble figuring out how to fix this, please contact us through our help center at help.openai.com.)", "type": "invalid_request_error", "param": null, "code": null } }

Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 68, in <module>
    app.run(main)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 308, in run
    _run_main(main, args)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 254, in _run_main
    sys.exit(main(argv))
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 60, in main
    time = run_tf_coder(bm.examples[0].inputs, bm.examples[0].output, bm.constants, bm.description, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 40, in run_tf_coder
    result = colab_interface.run_value_search_from_colab(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/colab_interface.py", line 105, in run_value_search_from_colab
    return value_search.run_value_search_from_example(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 725, in run_value_search_from_example
    return run_value_search(benchmark, settings, **kwargs)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 659, in run_value_search
    operations = get_reweighted_operations_gpt(benchmark, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 605, in get_reweighted_operations_gpt
    content_string = data['choices'][0]['message']['content']
KeyError: 'choices'
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 benchmarks.py
Benchmark # 0  --  tf.zeros((2, 3, 4, 5))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
{ "error": { "message": "We could not parse the JSON body of your request. (HINT: This likely means you aren't using your HTTP library correctly. The OpenAI API expects a JSON payload, but what was sent was not valid JSON. If you have trouble figuring out how to fix this, please contact us through our help center at help.openai.com.)", "type": "invalid_request_error", "param": null, "code": null } }

{'error': {'message': "We could not parse the JSON body of your request. (HINT: This likely means you aren't using your HTTP library correctly. The OpenAI API expects a JSON payload, but what was sent was not valid JSON. If you have trouble figuring out how to fix this, please contact us through our help center at help.openai.com.)", 'type': 'invalid_request_error', 'param': None, 'code': None}}
Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 68, in <module>
    app.run(main)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 308, in run
    _run_main(main, args)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 254, in _run_main
    sys.exit(main(argv))
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 60, in main
    time = run_tf_coder(bm.examples[0].inputs, bm.examples[0].output, bm.constants, bm.description, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 40, in run_tf_coder
    result = colab_interface.run_value_search_from_colab(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/colab_interface.py", line 105, in run_value_search_from_colab
    return value_search.run_value_search_from_example(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 726, in run_value_search_from_example
    return run_value_search(benchmark, settings, **kwargs)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 660, in run_value_search
    operations = get_reweighted_operations_gpt(benchmark, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 606, in get_reweighted_operations_gpt
    content_string = data['choices'][0]['message']['content']
KeyError: 'choices'
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 benchmarks.py
Benchmark # 0  --  tf.zeros((2, 3, 4, 5))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[], output=<tf.Tensor: shape=(2, 3, 4, 5), dtype=float32, numpy=
array([[[[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]]],


       [[[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]]]], dtype=float32)>)] description = Construct a 4D zeros tensor constants = []
{ "error": { "message": "We could not parse the JSON body of your request. (HINT: This likely means you aren't using your HTTP library correctly. The OpenAI API expects a JSON payload, but what was sent was not valid JSON. If you have trouble figuring out how to fix this, please contact us through our help center at help.openai.com.)", "type": "invalid_request_error", "param": null, "code": null } }

{'error': {'message': "We could not parse the JSON body of your request. (HINT: This likely means you aren't using your HTTP library correctly. The OpenAI API expects a JSON payload, but what was sent was not valid JSON. If you have trouble figuring out how to fix this, please contact us through our help center at help.openai.com.)", 'type': 'invalid_request_error', 'param': None, 'code': None}}
Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 68, in <module>
    app.run(main)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 308, in run
    _run_main(main, args)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 254, in _run_main
    sys.exit(main(argv))
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 60, in main
    time = run_tf_coder(bm.examples[0].inputs, bm.examples[0].output, bm.constants, bm.description, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 40, in run_tf_coder
    result = colab_interface.run_value_search_from_colab(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/colab_interface.py", line 105, in run_value_search_from_colab
    return value_search.run_value_search_from_example(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 728, in run_value_search_from_example
    return run_value_search(benchmark, settings, **kwargs)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 662, in run_value_search
    operations = get_reweighted_operations_gpt(benchmark, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 608, in get_reweighted_operations_gpt
    content_string = data['choices'][0]['message']['content']
KeyError: 'choices'
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 benchmarks.py
Benchmark # 0  --  tf.zeros((2, 3, 4, 5))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[], output=<tf.Tensor: shape=(2, 3, 4, 5), dtype=float32, numpy=
array([[[[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]]],


       [[[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]]]], dtype=float32)>)] description = Construct a 4D zeros tensor constants = []
{"model": "gpt-4", "messages": [{"role": "user", "content": "You are a Computer Scientist who wants to optimize an enumerative search algorithm for tensor programs. You will be given a list of TensorFlow functions and a specification. You are to choose fifteen of those operations that you deem important for the search algorithm to consider. Here are the TensorFlow operations: 0: tf.abs(x) 1: tf.add(x, y) 2: tf.add_n(inputs) 3: tf.argmax(input, axis) 4: tf.argmin(input, axis) 5: tf.argsort(values, axis, stable=True) 6: tf.argsort(values, axis, direction='DESCENDING', stable=True) 7: tf.boolean_mask(tensor, mask) 8: tf.broadcast_to(input, shape) 9: tf.cast(x, dtype) 10: tf.clip_by_value(t, clip_value_min, clip_value_max) 11: tf.concat(values, axis) 12: tf.constant(value) 13: tf.constant(value, dtype) 14: tf.divide(x, y) 15: tf.equal(x, y) 16: tf.exp(x) 17: tf.expand_dims(input, axis) 18: tf.eye(num_rows) 19: tf.eye(num_rows, num_columns) 20: tf.eye(num_rows, dtype) 21: tf.fill(dims, value) 22: tf.gather(params, indices) 23: tf.gather(params, indices, axis, batch_dims) 24: tf.gather_nd(params, indices) 25: tf.gather_nd(params, indices, batch_dims) 26: tf.greater(x, y) 27: tf.greater_equal(x, y) 28: tf.math.bincount(arr) 29: tf.math.ceil(x) 30: tf.math.count_nonzero(input) 31: tf.math.count_nonzero(input, axis) 32: tf.math.cumsum(x, axis) 33: tf.math.cumsum(x, axis, exclusive=True) 34: tf.math.divide_no_nan(x, y) 35: tf.math.floor(x) 36: tf.math.log(x) 37: tf.math.logical_and(x, y) 38: tf.math.logical_not(x) 39: tf.math.logical_or(x, y) 40: tf.math.logical_xor(x, y) 41: tf.math.negative(x) 42: tf.math.reciprocal(x) 43: tf.math.reciprocal_no_nan(x) 44: tf.math.segment_max(data, segment_ids) 45: tf.math.segment_mean(data, segment_ids) 46: tf.math.segment_min(data, segment_ids) 47: tf.math.segment_prod(data, segment_ids) 48: tf.math.segment_sum(data, segment_ids) 49: tf.math.squared_difference(x, y) 50: tf.math.top_k(input, k) 51: tf.math.unsorted_segment_max(data, segment_ids, num_segments) 52: tf.math.unsorted_segment_mean(data, segment_ids, num_segments) 53: tf.math.unsorted_segment_min(data, segment_ids, num_segments) 54: tf.math.unsorted_segment_prod(data, segment_ids, num_segments) 55: tf.math.unsorted_segment_sum(data, segment_ids, num_segments) 56: tf.matmul(a, b) 57: tf.maximum(x, y) 58: tf.minimum(x, y) 59: tf.multiply(x, y) 60: tf.not_equal(x, y) 61: tf.one_hot(indices, depth) 62: tf.ones(shape) 63: tf.ones_like(input) 64: tf.pad(tensor, paddings, mode='CONSTANT') 65: tf.pad(tensor, paddings, mode='CONSTANT', constant_values) 66: tf.pad(tensor, paddings, mode='REFLECT') 67: tf.pad(tensor, paddings, mode='SYMMETRIC') 68: tf.range(start) 69: tf.range(start, limit, delta) 70: tf.reduce_any(input_tensor, axis) 71: tf.reduce_all(input_tensor, axis) 72: tf.reduce_max(input_tensor) 73: tf.reduce_max(input_tensor, axis) 74: tf.reduce_mean(input_tensor) 75: tf.reduce_mean(input_tensor, axis) 76: tf.reduce_min(input_tensor) 77: tf.reduce_min(input_tensor, axis) 78: tf.reduce_prod(input_tensor, axis) 79: tf.reduce_sum(input_tensor) 80: tf.reduce_sum(input_tensor, axis) 81: tf.repeat(input, repeats) 82: tf.repeat(input, repeats, axis) 83: tf.reshape(tensor, shape) 84: tf.reverse(tensor, axis)85: tf.roll(input, shift, axis) 86: tf.round(x) 87: tf.scatter_nd(indices, updates, shape) 88: tf.searchsorted(sorted_sequence, values, side='left') 89: tf.searchsorted(sorted_sequence, values, side='right') 90: tf.sequence_mask(lengths) 91: tf.sequence_mask(lengths, maxlen) 92: tf.shape(input) 93: tf.sign(x) 94: tf.sort(values, axis) 95: tf.sort(values, axis, direction='DESCENDING') 96: tf.sqrt(x) 97: tf.square(x) 98: tf.squeeze(input) 99: tf.squeeze(input, axis) 100: tf.stack(values, axis) 101: tf.subtract(x, y) 102: tf.tensor_scatter_nd_update(tensor, indices, updates) 103: tf.tensordot(a, b, axes) 104: tf.tile(input, multiples) 105: tf.transpose(a) 106: tf.transpose(a, perm) 107: tf.unique_with_counts(x) 108: tf.unstack(value, axis) 109: tf.where(condition) 110: tf.where(condition, x, y) 111: tf.zeros(shape) 112: tf.zeros_like(input) 113: IndexingAxis1Operation 114: IndexingOperation 115: PairCreationOperation 116: SingletonTupleCreationOperation 117: SlicingAxis0BothOperation 118: SlicingAxis0LeftOperation 119: SlicingAxis0RightOperation 120: SlicingAxis1BothOperation 121: SlicingAxis1LeftOperation 122: SlicingAxis1RightOperation 123: TripleCreationOperation Here is the specification, an input/output example, descriptor, and constant list: examples = [Example(inputs=[], output=<tf.Tensor: shape=(2, 3, 4, 5), dtype=float32, numpy= array([[[[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]], [[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]], [[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]]], [[[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]], [[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]], [[0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.], [0., 0., 0., 0., 0.]]]], dtype=float32)>)] description = Construct a 4D zeros tensor constants = [] Provide a list of the indices that correspond to important functions. More important functions should be first. Each operation should appear only once and there should be 15. Do not include any explanations or comments, only provide an array of indices in the form [a, b, ...]. The response contains 15 functions and is as follows:"}], "temperature": 0.7}

carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 benchmarks.py
Benchmark # 0  --  tf.zeros((2, 3, 4, 5))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[], output=<tf.Tensor: shape=(2, 3, 4, 5), dtype=float32, numpy=
array([[[[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]]],


       [[[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]]]], dtype=float32)>)] description = Construct a 4D zeros tensor constants = []
{ "model": "gpt-4", "messages": [ { "role": "user", "content": "You are a Computer Scientist who wants to optimize an enumerative search algorithm for tensor programs. You will be given a list of TensorFlow functions and a specification. You are to choose fifteen of those operations that you deem important for the search algorithm to consider. Here are the TensorFlow operations: 0: tf.abs(x) 1: tf.add(x, y) 2: tf.add_n(inputs) 3: tf.argmax(input, axis) 4: tf.argmin(input, axis) 5: tf.argsort(values, axis, stable=True) 6: tf.argsort(values, axis, direction='DESCENDING', stable=True) 7: tf.boolean_mask(tensor, mask) 8: tf.broadcast_to(input, shape) 9: tf.cast(x, dtype) 10: tf.clip_by_value(t, clip_value_min, clip_value_max) 11: tf.concat(values, axis) 12: tf.constant(value) 13: tf.constant(value, dtype) 14: tf.divide(x, y) 15: tf.equal(x, y) 16: tf.exp(x) 17: tf.expand_dims(input, axis) 18: tf.eye(num_rows) 19: tf.eye(num_rows, num_columns) 20: tf.eye(num_rows, dtype) 21: tf.fill(dims, value) 22: tf.gather(params, indices) 23: tf.gather(params, indices, axis, batch_dims) 24: tf.gather_nd(params, indices) 25: tf.gather_nd(params, indices, batch_dims) 26: tf.greater(x, y) 27: tf.greater_equal(x, y) 28: tf.math.bincount(arr) 29: tf.math.ceil(x) 30: tf.math.count_nonzero(input) 31: tf.math.count_nonzero(input, axis) 32: tf.math.cumsum(x, axis) 33: tf.math.cumsum(x, axis, exclusive=True) 34: tf.math.divide_no_nan(x, y) 35: tf.math.floor(x) 36: tf.math.log(x) 37: tf.math.logical_and(x, y) 38: tf.math.logical_not(x) 39: tf.math.logical_or(x, y) 40: tf.math.logical_xor(x, y) 41: tf.math.negative(x) 42: tf.math.reciprocal(x) 43: tf.math.reciprocal_no_nan(x) 44: tf.math.segment_max(data, segment_ids) 45: tf.math.segment_mean(data, segment_ids) 46: tf.math.segment_min(data, segment_ids) 47: tf.math.segment_prod(data, segment_ids) 48: tf.math.segment_sum(data, segment_ids) 49: tf.math.squared_difference(x, y) 50: tf.math.top_k(input, k) 51: tf.math.unsorted_segment_max(data, segment_ids, num_segments) 52: tf.math.unsorted_segment_mean(data, segment_ids, num_segments) 53: tf.math.unsorted_segment_min(data, segment_ids, num_segments) 54: tf.math.unsorted_segment_prod(data, segment_ids, num_segments) 55: tf.math.unsorted_segment_sum(data, segment_ids, num_segments) 56: tf.matmul(a, b) 57: tf.maximum(x, y) 58: tf.minimum(x, y) 59: tf.multiply(x, y) 60: tf.not_equal(x, y) 61: tf.one_hot(indices, depth) 62: tf.ones(shape) 63: tf.ones_like(input) 64: tf.pad(tensor, paddings, mode='CONSTANT') 65: tf.pad(tensor, paddings, mode='CONSTANT', constant_values) 66: tf.pad(tensor, paddings, mode='REFLECT') 67: tf.pad(tensor, paddings, mode='SYMMETRIC') 68: tf.range(start) 69: tf.range(start, limit, delta) 70: tf.reduce_any(input_tensor, axis) 71: tf.reduce_all(input_tensor, axis) 72: tf.reduce_max(input_tensor) 73: tf.reduce_max(input_tensor, axis) 74: tf.reduce_mean(input_tensor) 75: tf.reduce_mean(input_tensor, axis) 76: tf.reduce_min(input_tensor) 77: tf.reduce_min(input_tensor, axis) 78: tf.reduce_prod(input_tensor, axis) 79: tf.reduce_sum(input_tensor) 80: tf.reduce_sum(input_tensor, axis) 81: tf.repeat(input, repeats) 82: tf.repeat(input, repeats, axis) 83: tf.reshape(tensor, shape) 84: tf.reverse(tensor, axis)85: tf.roll(input, shift, axis) 86: tf.round(x) 87: tf.scatter_nd(indices, updates, shape) 88: tf.searchsorted(sorted_sequence, values, side='left') 89: tf.searchsorted(sorted_sequence, values, side='right') 90: tf.sequence_mask(lengths) 91: tf.sequence_mask(lengths, maxlen) 92: tf.shape(input) 93: tf.sign(x) 94: tf.sort(values, axis) 95: tf.sort(values, axis, direction='DESCENDING') 96: tf.sqrt(x) 97: tf.square(x) 98: tf.squeeze(input) 99: tf.squeeze(input, axis) 100: tf.stack(values, axis) 101: tf.subtract(x, y) 102: tf.tensor_scatter_nd_update(tensor, indices, updates) 103: tf.tensordot(a, b, axes) 104: tf.tile(input, multiples) 105: tf.transpose(a) 106: tf.transpose(a, perm) 107: tf.unique_with_counts(x) 108: tf.unstack(value, axis) 109: tf.where(condition) 110: tf.where(condition, x, y) 111: tf.zeros(shape) 112: tf.zeros_like(input) 113: IndexingAxis1Operation 114: IndexingOperation 115: PairCreationOperation 116: SingletonTupleCreationOperation 117: SlicingAxis0BothOperation 118: SlicingAxis0LeftOperation 119: SlicingAxis0RightOperation 120: SlicingAxis1BothOperation 121: SlicingAxis1LeftOperation 122: SlicingAxis1RightOperation 123: TripleCreationOperation Here is the specification, an input/output example, descriptor, and constant list: examples = [Example(inputs=[], output=<tf.Tensor: shape=(2, 3, 4, 5), dtype=float32, numpy=
array([[[[0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.]],

 [[0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.]],

 [[0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.]]],


 [[[0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.]],

 [[0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.]],

 [[0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.],
 [0., 0., 0., 0., 0.]]]], dtype=float32)>)] description = Construct a 4D zeros tensor constants = [] Provide a list of the indices that correspond to important functions. More important functions should be first. Each operation should appear only once and there should be 15. Do not include any explanations or comments, only provide an array of indices in the form [a, b, ...]. The response contains 15 functions and is as follows:" } ], "temperature": 0.7 }

carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 benchmarks.py
Benchmark # 0  --  tf.zeros((2, 3, 4, 5))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[], output=<tf.Tensor: shape=(2, 3, 4, 5), dtype=float32, numpy=
array([[[[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]]],


       [[[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]]]], dtype=float32)>)] description = Construct a 4D zeros tensor constants = []
{ "id": "chatcmpl-8Px1pxofJcR8EZJsl1AwRpm6VUpSc", "object": "chat.completion", "created": 1701195797, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[111, 83, 62, 12, 13, 1, 59, 101, 14, 56, 103, 105, 106, 92, 100]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1893, "completion_tokens": 45, "total_tokens": 1938 } }

{'id': 'chatcmpl-8Px1pxofJcR8EZJsl1AwRpm6VUpSc', 'object': 'chat.completion', 'created': 1701195797, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[111, 83, 62, 12, 13, 1, 59, 101, 14, 56, 103, 105, 106, 92, 100]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1893, 'completion_tokens': 45, 'total_tokens': 1938}}
Altering:  [111, 83, 62, 12, 13, 1, 59, 101, 14, 56, 103, 105, 106, 92, 100]

Reweighted:
Operation  0 : [ tf.constant(value) ], weight= 6
Operation  1 : [ tf.constant(value, dtype) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.shape(input) ], weight= 10
Operation  11 : [ tf.stack(values, axis) ], weight= 10
Operation  12 : [ tf.zeros(shape) ], weight= 12
Operation  13 : [ tf.ones(shape) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.equal(x, y) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Output:
tf.Tensor(
[[[[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]]


 [[[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]]], shape=(2, 3, 4, 5), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3, 4, 5]

Description: Construct a 4D zeros tensor

Searching...

Found solution: tf.zeros((2, 3, 4, 5))

Solution was found in 3.5 seconds:
tf.zeros((2, 3, 4, 5))
Found in  3.5005284910000007 s!
[3.5005284910000007]
Benchmark # 1  --  tf.add(in2, tf.constant(in1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[123, <tf.Tensor: shape=(), dtype=int32, numpy=45>], output=<tf.Tensor: shape=(), dtype=int32, numpy=168>)] description = Add primitive int and scalar int tensor constants = []
{ "id": "chatcmpl-8Px1teYdDnVeB6vUDJJj5JfoF61u9", "object": "chat.completion", "created": 1701195801, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 13, 12, 59, 101, 14, 57, 58, 56, 103, 83, 8, 11, 17, 62]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1482, "completion_tokens": 45, "total_tokens": 1527 } }

{'id': 'chatcmpl-8Px1teYdDnVeB6vUDJJj5JfoF61u9', 'object': 'chat.completion', 'created': 1701195801, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 13, 12, 59, 101, 14, 57, 58, 56, 103, 83, 8, 11, 17, 62]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1482, 'completion_tokens': 45, 'total_tokens': 1527}}
Altering:  [1, 13, 12, 59, 101, 14, 57, 58, 56, 103, 83, 8, 11, 17, 62]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.constant(value) ], weight= 6
Operation  2 : [ tf.constant(value, dtype) ], weight= 7
Operation  3 : [ tf.matmul(a, b) ], weight= 7
Operation  4 : [ tf.maximum(x, y) ], weight= 7
Operation  5 : [ tf.multiply(x, y) ], weight= 7
Operation  6 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.squeeze(input, axis) ], weight= 23
Operation  19 : [ tf.equal(x, y) ], weight= 24
Operation  20 : [ tf.gather(params, indices) ], weight= 24
Operation  21 : [ tf.greater(x, y) ], weight= 24
Operation  22 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  24 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.transpose(a) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
123

Input 'in2':
tf.Tensor(45, shape=(), dtype=int32)

Output:
tf.Tensor(168, shape=(), dtype=int32)

Constants: [0, 1, -1, True, False]

Description: Add primitive int and scalar int tensor

Searching...

Found solution: tf.add(in2, tf.constant(in1))

Solution was found in 4.4 seconds:
tf.add(in2, tf.constant(in1))
Found in  4.396263466999999 s!
[3.5005284910000007, 4.396263466999999]
Benchmark # 2  --  tf.add(tensor_x, tf.expand_dims(tensor_y, 1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs={'tensor_x': [3, 4, 5], 'tensor_y': [10, 20, 30]}, output=[[13, 14, 15], [23, 24, 25], [33, 34, 35]])] description = Add two tensors with broadcasting constants = []
{ "id": "chatcmpl-8Px1xoimSSoYHbT6ByMnlowmRySdr", "object": "chat.completion", "created": 1701195805, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 8, 59, 83, 11, 105, 56, 14, 101, 57, 58, 72, 76, 74, 80]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1499, "completion_tokens": 45, "total_tokens": 1544 } }

{'id': 'chatcmpl-8Px1xoimSSoYHbT6ByMnlowmRySdr', 'object': 'chat.completion', 'created': 1701195805, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 8, 59, 83, 11, 105, 56, 14, 101, 57, 58, 72, 76, 74, 80]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1499, 'completion_tokens': 45, 'total_tokens': 1544}}
Altering:  [1, 8, 59, 83, 11, 105, 56, 14, 101, 57, 58, 72, 76, 74, 80]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  13 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  14 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'tensor_x':
tf.Tensor([3 4 5], shape=(3,), dtype=int32)

Input 'tensor_y':
tf.Tensor([10 20 30], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[13 14 15]
 [23 24 25]
 [33 34 35]], shape=(3, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3]

Description: Add two tensors with broadcasting

Searching...

Found solution: tf.add(tensor_x, tf.expand_dims(tensor_y, 1))

Solution was found in 3.6 seconds:
tf.add(tensor_x, tf.expand_dims(tensor_y, 1))
Found in  3.598936417000001 s!
[3.5005284910000007, 3.598936417000001, 4.396263466999999]
Benchmark # 3  --  tf.gather(params, indices, axis=axis, batch_dims=batch_dims)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs={'params': [[[11, 22, 33], [44, 55, 66]]], 'indices': [[2, 1]], 'axis': 2, 'batch_dims': 1}, output=[[[33, 22], [66, 55]]])] description = Use tf.gather constants = []
{ "id": "chatcmpl-8Px21zp8XaqSUWyDrEx8m4qKJ2azo", "object": "chat.completion", "created": 1701195809, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[23, 22, 83, 1, 59, 14, 101, 57, 58, 56, 103, 8, 98, 104, 17]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1502, "completion_tokens": 45, "total_tokens": 1547 } }

{'id': 'chatcmpl-8Px21zp8XaqSUWyDrEx8m4qKJ2azo', 'object': 'chat.completion', 'created': 1701195809, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[23, 22, 83, 1, 59, 14, 101, 57, 58, 56, 103, 8, 98, 104, 17]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1502, 'completion_tokens': 45, 'total_tokens': 1547}}
Altering:  [23, 22, 83, 1, 59, 14, 101, 57, 58, 56, 103, 8, 98, 104, 17]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.tile(input, multiples) ], weight= 8
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.squeeze(input) ], weight= 11
Operation  13 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 12
Operation  14 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.concat(values, axis) ], weight= 36
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'params':
tf.Tensor(
[[[11 22 33]
  [44 55 66]]], shape=(1, 2, 3), dtype=int32)

Input 'indices':
tf.Tensor([[2 1]], shape=(1, 2), dtype=int32)

Input 'axis':
2

Input 'batch_dims':
1

Output:
tf.Tensor(
[[[33 22]
  [66 55]]], shape=(1, 2, 2), dtype=int32)

Constants: [0, -1, True, False, 3]

Description: Use tf.gather

Searching...

Found solution: tf.gather(params, indices, axis=axis, batch_dims=batch_dims)

Solution was found in 3.4 seconds:
tf.gather(params, indices, axis=axis, batch_dims=batch_dims)
Found in  3.3506939269999982 s!
[3.3506939269999982, 3.5005284910000007, 3.598936417000001, 4.396263466999999]
Benchmark # 4  --  tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[0, 0, 0, 1, 3, 3]], output=[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0], [3, 1]])] description = Convert index tensor into pairs for SparseTensor indexing constants = []
{ "id": "chatcmpl-8Px24kNmMB9ru5PH26qB2m4KK5pCi", "object": "chat.completion", "created": 1701195812, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 11, 14, 59, 83, 101, 56, 103, 105, 8, 106, 17, 98, 21, 62]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1504, "completion_tokens": 45, "total_tokens": 1549 } }

{'id': 'chatcmpl-8Px24kNmMB9ru5PH26qB2m4KK5pCi', 'object': 'chat.completion', 'created': 1701195812, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 11, 14, 59, 83, 101, 56, 103, 105, 8, 106, 17, 98, 21, 62]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1504, 'completion_tokens': 45, 'total_tokens': 1549}}
Altering:  [1, 11, 14, 59, 83, 101, 56, 103, 105, 8, 106, 17, 98, 21, 62]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.concat(values, axis) ], weight= 10
Operation  10 : [ tf.squeeze(input) ], weight= 11
Operation  11 : [ tf.fill(dims, value) ], weight= 12
Operation  12 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  13 : [ tf.ones(shape) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.SparseTensor(indices, values, dense_shape) ], weight= 20
Operation  17 : [ tf.sparse.from_dense(tensor) ], weight= 20
Operation  18 : [ tf.sparse.to_dense(sp_input) ], weight= 20
Operation  19 : [ PairCreationOperation ], weight= 20
Operation  20 : [ SingletonTupleCreationOperation ], weight= 20
Operation  21 : [ tf.constant(value) ], weight= 23
Operation  22 : [ tf.squeeze(input, axis) ], weight= 23
Operation  23 : [ tf.constant(value, dtype) ], weight= 24
Operation  24 : [ tf.equal(x, y) ], weight= 24
Operation  25 : [ tf.gather(params, indices) ], weight= 24
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.maximum(x, y) ], weight= 24
Operation  28 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  29 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  30 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  31 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  32 : [ tf.where(condition) ], weight= 24
Operation  33 : [ tf.where(condition, x, y) ], weight= 24
Operation  34 : [ tf.sparse.expand_dims(sp_input, axis) ], weight= 24
Operation  35 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  36 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  37 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  38 : [ tf.range(start) ], weight= 28
Operation  39 : [ tf.square(x) ], weight= 28
Operation  40 : [ tf.tile(input, multiples) ], weight= 28
Operation  41 : [ tf.sparse.reduce_max(sp_input, axis, output_is_sparse) ], weight= 28
Operation  42 : [ tf.sparse.reduce_sum(sp_input, axis, output_is_sparse) ], weight= 28
Operation  43 : [ tf.argmax(input, axis) ], weight= 32
Operation  44 : [ tf.greater_equal(x, y) ], weight= 32
Operation  45 : [ tf.minimum(x, y) ], weight= 32
Operation  46 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  47 : [ tf.zeros_like(input) ], weight= 32
Operation  48 : [ tf.sparse.add(a, b) ], weight= 32
Operation  49 : [ tf.sparse.maximum(sp_a, sp_b) ], weight= 32
Operation  50 : [ tf.sparse.slice(sp_input, start, size) ], weight= 32
Operation  51 : [ tf.sparse.split(sp_input, num_split, axis) ], weight= 32
Operation  52 : [ IndexingAxis1Operation ], weight= 32
Operation  53 : [ IndexingOperation ], weight= 32
Operation  54 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  55 : [ tf.ones_like(input) ], weight= 36
Operation  56 : [ tf.shape(input) ], weight= 36
Operation  57 : [ tf.stack(values, axis) ], weight= 36
Operation  58 : [ tf.sparse.retain(sp_input, to_retain) ], weight= 36
Operation  59 : [ tf.sparse.to_dense(sp_input, default_value) ], weight= 36
Operation  60 : [ tf.sparse.transpose(sp_input) ], weight= 36
Operation  61 : [ SlicingAxis0BothOperation ], weight= 36
Operation  62 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  63 : [ SlicingAxis0RightOperation ], weight= 36
Operation  64 : [ SlicingAxis1BothOperation ], weight= 36
Operation  65 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  66 : [ SlicingAxis1RightOperation ], weight= 36
Operation  67 : [ TripleCreationOperation ], weight= 36
Operation  68 : [ tf.abs(x) ], weight= 40
Operation  69 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  70 : [ tf.eye(num_rows) ], weight= 40
Operation  71 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  72 : [ tf.math.bincount(arr) ], weight= 40
Operation  73 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  74 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  75 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  76 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  77 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  78 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  79 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  80 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  81 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  82 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  83 : [ tf.unstack(value, axis) ], weight= 40
Operation  84 : [ tf.zeros(shape) ], weight= 40
Operation  85 : [ tf.sparse.concat(axis, sp_inputs) ], weight= 40
Operation  86 : [ tf.sparse.minimum(sp_a, sp_b) ], weight= 40
Operation  87 : [ tf.sparse.reset_shape(sp_input) ], weight= 40
Operation  88 : [ tf.sparse.reshape(sp_input, shape) ], weight= 40
Operation  89 : [ tf.add_n(inputs) ], weight= 44
Operation  90 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  91 : [ tf.math.ceil(x) ], weight= 44
Operation  92 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  93 : [ tf.math.floor(x) ], weight= 44
Operation  94 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  95 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  96 : [ tf.not_equal(x, y) ], weight= 44
Operation  97 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  98 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  99 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  100 : [ tf.sparse.to_indicator(sp_input, vocab_size) ], weight= 44
Operation  101 : [ tf.argmin(input, axis) ], weight= 48
Operation  102 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  103 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  104 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  105 : [ tf.math.logical_not(x) ], weight= 48
Operation  106 : [ tf.math.negative(x) ], weight= 48
Operation  107 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  108 : [ tf.math.top_k(input, k) ], weight= 48
Operation  109 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  110 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  111 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  112 : [ tf.sign(x) ], weight= 48
Operation  113 : [ tf.unique_with_counts(x) ], weight= 48
Operation  114 : [ tf.exp(x) ], weight= 52
Operation  115 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  116 : [ tf.math.log(x) ], weight= 52
Operation  117 : [ tf.math.reciprocal(x) ], weight= 52
Operation  118 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  119 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  120 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  121 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  122 : [ tf.round(x) ], weight= 52
Operation  123 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  124 : [ tf.sort(values, axis) ], weight= 52
Operation  125 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  126 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  127 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  128 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  129 : [ tf.range(start, limit, delta) ], weight= 56
Operation  130 : [ tf.repeat(input, repeats) ], weight= 56
Operation  131 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  132 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  133 : [ tf.sqrt(x) ], weight= 56
Operation  134 : [ tf.sparse.transpose(sp_input, perm) ], weight= 56
Operation  135 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  136 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  137 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  138 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  139 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  140 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  141 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  142 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([0 0 0 1 3 3], shape=(6,), dtype=int32)

Output:
tf.Tensor(
[[0 0]
 [0 1]
 [0 2]
 [1 0]
 [3 0]
 [3 1]], shape=(6, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 6]

Description: Convert index tensor into pairs for SparseTensor indexing

Searching...

Found solution: tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)

Solution was found in 219.8 seconds:
tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)
Found in  219.85008347 s!
[3.3506939269999982, 3.5005284910000007, 3.598936417000001, 4.396263466999999, 219.85008347]
Benchmark # 5  --  tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 1.0]]], output=[[0.0, 1.0, 0.0, 0.0], [0.0, 0.5, 0.5, 0.0], [0.25, 0.25, 0.25, 0.25]])] description = Divide each row by the sum of that row constants = []
{ "id": "chatcmpl-8Px5dPc9yimeRcjxllhPXWPzRho6X", "object": "chat.completion", "created": 1701196033, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 79, 80, 83, 11, 56, 92, 103, 26, 27, 15, 60, 9]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1572, "completion_tokens": 45, "total_tokens": 1617 } }

{'id': 'chatcmpl-8Px5dPc9yimeRcjxllhPXWPzRho6X', 'object': 'chat.completion', 'created': 1701196033, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 79, 80, 83, 11, 56, 92, 103, 26, 27, 15, 60, 9]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1572, 'completion_tokens': 45, 'total_tokens': 1617}}
Altering:  [1, 14, 59, 79, 80, 83, 11, 56, 92, 103, 26, 27, 15, 60, 9]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.equal(x, y) ], weight= 7
Operation  2 : [ tf.greater(x, y) ], weight= 7
Operation  3 : [ tf.matmul(a, b) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  6 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  7 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  8 : [ tf.add(x, y) ], weight= 8
Operation  9 : [ tf.divide(x, y) ], weight= 8
Operation  10 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  11 : [ tf.greater_equal(x, y) ], weight= 9
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.shape(input) ], weight= 10
Operation  14 : [ tf.not_equal(x, y) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.maximum(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.transpose(a) ], weight= 24
Operation  26 : [ tf.where(condition) ], weight= 24
Operation  27 : [ tf.where(condition, x, y) ], weight= 24
Operation  28 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  29 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  30 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  31 : [ tf.range(start) ], weight= 28
Operation  32 : [ tf.square(x) ], weight= 28
Operation  33 : [ tf.subtract(x, y) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.minimum(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[0. 1. 0. 0.]
 [0. 1. 1. 0.]
 [1. 1. 1. 1.]], shape=(3, 4), dtype=float32)

Output:
tf.Tensor(
[[0.   1.   0.   0.  ]
 [0.   0.5  0.5  0.  ]
 [0.25 0.25 0.25 0.25]], shape=(3, 4), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4]

Description: Divide each row by the sum of that row

Searching...

Found solution: tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))

Solution was found in 5.1 seconds:
tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))
Found in  5.07118140099999 s!
[3.3506939269999982, 3.5005284910000007, 3.598936417000001, 4.396263466999999, 5.07118140099999, 219.85008347]
Benchmark # 6  --  tf.sparse.slice(in1, tf.zeros(3, dtype=tf.int64), tf.concat([[1], in1.dense_shape[1:]], 0))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[<tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x7fb3ef690f10>], output=<tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x7fb3ef690fd0>)] description = Slice the first dimension of a SparseTensor constants = []
{ "id": "chatcmpl-8Px5ibeHLfGfnJsgZVyjdOmYBfwYM", "object": "chat.completion", "created": 1701196038, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 14, 1, 59, 101, 57, 58, 56, 103, 9, 22, 24, 11, 64, 26]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1495, "completion_tokens": 45, "total_tokens": 1540 } }

{'id': 'chatcmpl-8Px5ibeHLfGfnJsgZVyjdOmYBfwYM', 'object': 'chat.completion', 'created': 1701196038, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 14, 1, 59, 101, 57, 58, 56, 103, 9, 22, 24, 11, 64, 26]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1495, 'completion_tokens': 45, 'total_tokens': 1540}}
Altering:  [83, 14, 1, 59, 101, 57, 58, 56, 103, 9, 22, 24, 11, 64, 26]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.greater(x, y) ], weight= 7
Operation  3 : [ tf.matmul(a, b) ], weight= 7
Operation  4 : [ tf.maximum(x, y) ], weight= 7
Operation  5 : [ tf.multiply(x, y) ], weight= 7
Operation  6 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  10 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  11 : [ tf.subtract(x, y) ], weight= 8
Operation  12 : [ tf.minimum(x, y) ], weight= 9
Operation  13 : [ tf.concat(values, axis) ], weight= 10
Operation  14 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 12
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ tf.SparseTensor(indices, values, dense_shape) ], weight= 20
Operation  17 : [ tf.sparse.from_dense(tensor) ], weight= 20
Operation  18 : [ tf.sparse.to_dense(sp_input) ], weight= 20
Operation  19 : [ PairCreationOperation ], weight= 20
Operation  20 : [ SingletonTupleCreationOperation ], weight= 20
Operation  21 : [ tf.constant(value) ], weight= 23
Operation  22 : [ tf.squeeze(input, axis) ], weight= 23
Operation  23 : [ tf.constant(value, dtype) ], weight= 24
Operation  24 : [ tf.equal(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.sparse.expand_dims(sp_input, axis) ], weight= 24
Operation  33 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.sparse.reduce_max(sp_input, axis, output_is_sparse) ], weight= 28
Operation  39 : [ tf.sparse.reduce_sum(sp_input, axis, output_is_sparse) ], weight= 28
Operation  40 : [ tf.argmax(input, axis) ], weight= 32
Operation  41 : [ tf.greater_equal(x, y) ], weight= 32
Operation  42 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  43 : [ tf.zeros_like(input) ], weight= 32
Operation  44 : [ tf.sparse.add(a, b) ], weight= 32
Operation  45 : [ tf.sparse.maximum(sp_a, sp_b) ], weight= 32
Operation  46 : [ tf.sparse.slice(sp_input, start, size) ], weight= 32
Operation  47 : [ tf.sparse.split(sp_input, num_split, axis) ], weight= 32
Operation  48 : [ IndexingAxis1Operation ], weight= 32
Operation  49 : [ IndexingOperation ], weight= 32
Operation  50 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  51 : [ tf.ones_like(input) ], weight= 36
Operation  52 : [ tf.shape(input) ], weight= 36
Operation  53 : [ tf.stack(values, axis) ], weight= 36
Operation  54 : [ tf.sparse.retain(sp_input, to_retain) ], weight= 36
Operation  55 : [ tf.sparse.to_dense(sp_input, default_value) ], weight= 36
Operation  56 : [ tf.sparse.transpose(sp_input) ], weight= 36
Operation  57 : [ SlicingAxis0BothOperation ], weight= 36
Operation  58 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  59 : [ SlicingAxis0RightOperation ], weight= 36
Operation  60 : [ SlicingAxis1BothOperation ], weight= 36
Operation  61 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  62 : [ SlicingAxis1RightOperation ], weight= 36
Operation  63 : [ TripleCreationOperation ], weight= 36
Operation  64 : [ tf.squeeze(input) ], weight= 38
Operation  65 : [ tf.abs(x) ], weight= 40
Operation  66 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  67 : [ tf.eye(num_rows) ], weight= 40
Operation  68 : [ tf.fill(dims, value) ], weight= 40
Operation  69 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  70 : [ tf.math.bincount(arr) ], weight= 40
Operation  71 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  72 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  73 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  74 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  75 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  79 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  80 : [ tf.unstack(value, axis) ], weight= 40
Operation  81 : [ tf.zeros(shape) ], weight= 40
Operation  82 : [ tf.sparse.concat(axis, sp_inputs) ], weight= 40
Operation  83 : [ tf.sparse.minimum(sp_a, sp_b) ], weight= 40
Operation  84 : [ tf.sparse.reset_shape(sp_input) ], weight= 40
Operation  85 : [ tf.sparse.reshape(sp_input, shape) ], weight= 40
Operation  86 : [ tf.add_n(inputs) ], weight= 44
Operation  87 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  88 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  89 : [ tf.math.ceil(x) ], weight= 44
Operation  90 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  91 : [ tf.math.floor(x) ], weight= 44
Operation  92 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  93 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  94 : [ tf.not_equal(x, y) ], weight= 44
Operation  95 : [ tf.ones(shape) ], weight= 44
Operation  96 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  97 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  98 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  99 : [ tf.transpose(a, perm) ], weight= 44
Operation  100 : [ tf.sparse.to_indicator(sp_input, vocab_size) ], weight= 44
Operation  101 : [ tf.argmin(input, axis) ], weight= 48
Operation  102 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  103 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  104 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  105 : [ tf.math.logical_not(x) ], weight= 48
Operation  106 : [ tf.math.negative(x) ], weight= 48
Operation  107 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  108 : [ tf.math.top_k(input, k) ], weight= 48
Operation  109 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  110 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  111 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  112 : [ tf.sign(x) ], weight= 48
Operation  113 : [ tf.unique_with_counts(x) ], weight= 48
Operation  114 : [ tf.exp(x) ], weight= 52
Operation  115 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  116 : [ tf.math.log(x) ], weight= 52
Operation  117 : [ tf.math.reciprocal(x) ], weight= 52
Operation  118 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  119 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  120 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  121 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  122 : [ tf.round(x) ], weight= 52
Operation  123 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  124 : [ tf.sort(values, axis) ], weight= 52
Operation  125 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  126 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  127 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  128 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  129 : [ tf.range(start, limit, delta) ], weight= 56
Operation  130 : [ tf.repeat(input, repeats) ], weight= 56
Operation  131 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  132 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  133 : [ tf.sqrt(x) ], weight= 56
Operation  134 : [ tf.sparse.transpose(sp_input, perm) ], weight= 56
Operation  135 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  136 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  137 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  138 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  139 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  140 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  141 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  142 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0 0]
 [0 1 1]
 [1 1 1]
 [1 1 2]], shape=(4, 3), dtype=int64), values=tf.Tensor([1. 1. 1. 1.], shape=(4,), dtype=float32), dense_shape=tf.Tensor([  2   2 800], shape=(3,), dtype=int64))

Output:
SparseTensor(indices=tf.Tensor(
[[0 0 0]
 [0 1 1]], shape=(2, 3), dtype=int64), values=tf.Tensor([1. 1.], shape=(2,), dtype=float32), dense_shape=tf.Tensor([  1   2 800], shape=(3,), dtype=int64))

Constants: [0, 1, -1, True, False, 2, 800]

Description: Slice the first dimension of a SparseTensor

Searching...

Found solution: tf.sparse.split(sp_input=in1, num_split=2, axis=0)[0]

Solution was found in 47.6 seconds:
tf.sparse.split(sp_input=in1, num_split=2, axis=0)[0]
Found in  47.633042718999974 s!
[3.3506939269999982, 3.5005284910000007, 3.598936417000001, 4.396263466999999, 5.07118140099999, 47.633042718999974, 219.85008347]
Benchmark # 7  --  tf.reshape(in1, shape=(4, 3, 2))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432]], output=[[[111, 112], [121, 122], [131, 132]], [[211, 212], [221, 222], [231, 232]], [[311, 312], [321, 322], [331, 332]], [[411, 412], [421, 422], [431, 432]]])] description = Reshape a flat array into a rank 3 tensor constants = []
{ "id": "chatcmpl-8Px6TjT1jLY6c4S850p6hN3sCRzIs", "object": "chat.completion", "created": 1701196085, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 1, 11, 59, 14, 101, 57, 58, 74, 72, 76, 79, 56, 105, 9]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1597, "completion_tokens": 45, "total_tokens": 1642 } }

{'id': 'chatcmpl-8Px6TjT1jLY6c4S850p6hN3sCRzIs', 'object': 'chat.completion', 'created': 1701196085, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 1, 11, 59, 14, 101, 57, 58, 74, 72, 76, 79, 56, 105, 9]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1597, 'completion_tokens': 45, 'total_tokens': 1642}}
Altering:  [83, 1, 11, 59, 14, 101, 57, 58, 74, 72, 76, 79, 56, 105, 9]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  14 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[111 112 121 122 131 132 211 212 221 222 231 232 311 312 321 322 331 332
 411 412 421 422 431 432], shape=(24,), dtype=int32)

Output:
tf.Tensor(
[[[111 112]
  [121 122]
  [131 132]]

 [[211 212]
  [221 222]
  [231 232]]

 [[311 312]
  [321 322]
  [331 332]]

 [[411 412]
  [421 422]
  [431 432]]], shape=(4, 3, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 4, 24]

Description: Reshape a flat array into a rank 3 tensor

Searching...

Found solution: tf.reshape(in1, (4, 3, 2))

Solution was found in 3.3 seconds:
tf.reshape(in1, (4, 3, 2))
Found in  3.3179832580000266 s!
[3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.598936417000001, 4.396263466999999, 5.07118140099999, 47.633042718999974, 219.85008347]
Benchmark # 8  --  tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[1, 2, 3, 4], [5, 6, 7, 8]]], output=[[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8]]])] description = Repeat each input entry 6 times constants = [6]
{ "id": "chatcmpl-8Px6XS5eI4BFSjy7cRFpYvOAvKeqz", "object": "chat.completion", "created": 1701196089, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[104, 83, 1, 101, 59, 14, 11, 56, 103, 79, 80, 72, 76, 74, 75]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1621, "completion_tokens": 45, "total_tokens": 1666 } }

{'id': 'chatcmpl-8Px6XS5eI4BFSjy7cRFpYvOAvKeqz', 'object': 'chat.completion', 'created': 1701196089, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[104, 83, 1, 101, 59, 14, 11, 56, 103, 79, 80, 72, 76, 74, 75]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1621, 'completion_tokens': 45, 'total_tokens': 1666}}
Altering:  [104, 83, 1, 101, 59, 14, 11, 56, 103, 79, 80, 72, 76, 74, 75]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.multiply(x, y) ], weight= 7
Operation  2 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  3 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.tile(input, multiples) ], weight= 8
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  13 : [ tf.reduce_mean(input_tensor, axis) ], weight= 12
Operation  14 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.maximum(x, y) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[1 2 3 4]
 [5 6 7 8]], shape=(2, 4), dtype=int32)

Output:
tf.Tensor(
[[[1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]]

 [[5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]]], shape=(2, 6, 4), dtype=int32)

Constants: [6, 0, 1, -1, True, False, 2, 4]

Description: Repeat each input entry 6 times

Searching...

Found solution: tf.reshape(tf.tile(in1, (1, 6)), (2, 6, 4))

Solution was found in 178.6 seconds:
tf.reshape(tf.tile(in1, (1, 6)), (2, 6, 4))
Found in  178.64823744399996 s!
[3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.598936417000001, 4.396263466999999, 5.07118140099999, 47.633042718999974, 178.64823744399996, 219.85008347]
Benchmark # 9  --  tf.math.segment_max(in2, in1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[0, 1, 1, 2, 3, 3, 3, 3], [1, 3, 4, 5, 10, 8, 9, 4]], output=[1, 4, 5, 10])] description = Take the max from each group of elements constants = []
{ "id": "chatcmpl-8Px9QJhYIiIAolZtSQLeb3NTevmWx", "object": "chat.completion", "created": 1701196268, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[56, 72, 73, 1, 101, 14, 59, 57, 58, 83, 104, 105, 106, 11, 17]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1508, "completion_tokens": 45, "total_tokens": 1553 } }

{'id': 'chatcmpl-8Px9QJhYIiIAolZtSQLeb3NTevmWx', 'object': 'chat.completion', 'created': 1701196268, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[56, 72, 73, 1, 101, 14, 59, 57, 58, 83, 104, 105, 106, 11, 17]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1508, 'completion_tokens': 45, 'total_tokens': 1553}}
Altering:  [56, 72, 73, 1, 101, 14, 59, 57, 58, 83, 104, 105, 106, 11, 17]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  5 : [ tf.reduce_max(input_tensor, axis) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.tile(input, multiples) ], weight= 8
Operation  12 : [ tf.minimum(x, y) ], weight= 9
Operation  13 : [ tf.concat(values, axis) ], weight= 10
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.argmax(input, axis) ], weight= 32
Operation  35 : [ tf.greater_equal(x, y) ], weight= 32
Operation  36 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  37 : [ tf.zeros_like(input) ], weight= 32
Operation  38 : [ IndexingAxis1Operation ], weight= 32
Operation  39 : [ IndexingOperation ], weight= 32
Operation  40 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([0 1 1 2 3 3 3 3], shape=(8,), dtype=int32)

Input 'in2':
tf.Tensor([ 1  3  4  5 10  8  9  4], shape=(8,), dtype=int32)

Output:
tf.Tensor([ 1  4  5 10], shape=(4,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 8]

Description: Take the max from each group of elements

Searching...

Found solution: tf.math.segment_max(in2, in1)

Solution was found in 5.5 seconds:
tf.math.segment_max(in2, in1)
Found in  5.540512747999969 s!
[3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.598936417000001, 4.396263466999999, 5.07118140099999, 5.540512747999969, 47.633042718999974, 178.64823744399996, 219.85008347]
Benchmark # 10  --  tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5], [4, 1, 8, 2, 5, 7, 9, 3, 7, 3, 1, 42, 1, 2, 4, 0]], output=[2, 3, 1, 0, 1, 0])] description = Take the argmax of each group of elements constants = []
{ "id": "chatcmpl-8Px9WActbEnrKeDCJPWWwN5edzFzl", "object": "chat.completion", "created": 1701196274, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[3, 83, 1, 59, 14, 101, 57, 58, 56, 9, 72, 76, 74, 79, 105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1563, "completion_tokens": 45, "total_tokens": 1608 } }

{'id': 'chatcmpl-8Px9WActbEnrKeDCJPWWwN5edzFzl', 'object': 'chat.completion', 'created': 1701196274, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[3, 83, 1, 59, 14, 101, 57, 58, 56, 9, 72, 76, 74, 79, 105]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1563, 'completion_tokens': 45, 'total_tokens': 1608}}
Altering:  [3, 83, 1, 59, 14, 101, 57, 58, 56, 9, 72, 76, 74, 79, 105]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.argmax(input, axis) ], weight= 9
Operation  12 : [ tf.minimum(x, y) ], weight= 9
Operation  13 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  14 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.greater_equal(x, y) ], weight= 32
Operation  36 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  37 : [ tf.zeros_like(input) ], weight= 32
Operation  38 : [ IndexingAxis1Operation ], weight= 32
Operation  39 : [ IndexingOperation ], weight= 32
Operation  40 : [ tf.concat(values, axis) ], weight= 36
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([0 0 0 1 1 1 1 2 2 2 2 3 4 4 5 5], shape=(16,), dtype=int32)

Input 'in2':
tf.Tensor([ 4  1  8  2  5  7  9  3  7  3  1 42  1  2  4  0], shape=(16,), dtype=int32)

Output:
tf.Tensor([2 3 1 0 1 0], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6, 16]

Description: Take the argmax of each group of elements

Searching...

Could not find solution within 300 seconds.
Found in  300.61143124399996 s!
[3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.598936417000001, 4.396263466999999, 5.07118140099999, 5.540512747999969, 47.633042718999974, 178.64823744399996, 219.85008347, 300.61143124399996]
Benchmark # 11  --  tf.cast(tf.greater(tf.expand_dims(in1, 1), tf.range(5)), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[3, 4, 2, 1]], output=[[1, 1, 1, 0, 0], [1, 1, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 0, 0, 0]])] description = create a mask for sequences of the given lengths constants = [5]
{ "id": "chatcmpl-8PxEOgeUhs4UDPHjBcb5maTcWTd5b", "object": "chat.completion", "created": 1701196576, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[61, 62, 83, 1, 17, 22, 11, 14, 59, 56, 68, 21, 101, 79, 75]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1524, "completion_tokens": 45, "total_tokens": 1569 } }

{'id': 'chatcmpl-8PxEOgeUhs4UDPHjBcb5maTcWTd5b', 'object': 'chat.completion', 'created': 1701196576, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[61, 62, 83, 1, 17, 22, 11, 14, 59, 56, 68, 21, 101, 79, 75]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1524, 'completion_tokens': 45, 'total_tokens': 1569}}
Altering:  [61, 62, 83, 1, 17, 22, 11, 14, 59, 56, 68, 21, 101, 79, 75]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.one_hot(indices, depth) ], weight= 8
Operation  8 : [ tf.range(start) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.fill(dims, value) ], weight= 12
Operation  13 : [ tf.reduce_mean(input_tensor, axis) ], weight= 12
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([3 4 2 1], shape=(4,), dtype=int32)

Output:
tf.Tensor(
[[1 1 1 0 0]
 [1 1 1 1 0]
 [1 1 0 0 0]
 [1 0 0 0 0]], shape=(4, 5), dtype=int32)

Constants: [5, 0, 1, -1, True, False, 4]

Description: create a mask for sequences of the given lengths

Searching...

Found solution: tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)

Solution was found in 4.7 seconds:
tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)
Found in  4.699767347000034 s!
[3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.598936417000001, 4.396263466999999, 4.699767347000034, 5.07118140099999, 5.540512747999969, 47.633042718999974, 178.64823744399996, 219.85008347, 300.61143124399996]
Benchmark # 12  --  tf.gather(in2, tf.argsort(in1, stable=True))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[1, 1, 1, 0, 0, 2], [10, 20, 30, 14, 15, 26]], output=[14, 15, 10, 20, 30, 26])] description = sort the segments constants = []
{ "id": "chatcmpl-8PxESAqVvCHyMSok1gB0iLT0RIBIX", "object": "chat.completion", "created": 1701196580, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 11, 56, 59, 101, 14, 34, 83, 105, 72, 76, 78, 80, 74, 75]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1497, "completion_tokens": 45, "total_tokens": 1542 } }

{'id': 'chatcmpl-8PxESAqVvCHyMSok1gB0iLT0RIBIX', 'object': 'chat.completion', 'created': 1701196580, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 11, 56, 59, 101, 14, 34, 83, 105, 72, 76, 78, 80, 74, 75]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1497, 'completion_tokens': 45, 'total_tokens': 1542}}
Altering:  [1, 11, 56, 59, 101, 14, 34, 83, 105, 72, 76, 78, 80, 74, 75]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.multiply(x, y) ], weight= 7
Operation  2 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  3 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.concat(values, axis) ], weight= 10
Operation  10 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  11 : [ tf.reduce_mean(input_tensor, axis) ], weight= 12
Operation  12 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  13 : [ tf.math.divide_no_nan(x, y) ], weight= 15
Operation  14 : [ tf.reduce_prod(input_tensor, axis) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.maximum(x, y) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.minimum(x, y) ], weight= 32
Operation  40 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  41 : [ tf.zeros_like(input) ], weight= 32
Operation  42 : [ IndexingAxis1Operation ], weight= 32
Operation  43 : [ IndexingOperation ], weight= 32
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.fill(dims, value) ], weight= 40
Operation  60 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  61 : [ tf.math.bincount(arr) ], weight= 40
Operation  62 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.exp(x) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([1 1 1 0 0 2], shape=(6,), dtype=int32)

Input 'in2':
tf.Tensor([10 20 30 14 15 26], shape=(6,), dtype=int32)

Output:
tf.Tensor([14 15 10 20 30 26], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6]

Description: sort the segments

Searching...

Found solution: tf.gather(in2, tf.argsort(in1, axis=0, stable=True))

Solution was found in 267.5 seconds:
tf.gather(in2, tf.argsort(in1, axis=0, stable=True))
Found in  267.53478624499996 s!
[3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.598936417000001, 4.396263466999999, 4.699767347000034, 5.07118140099999, 5.540512747999969, 47.633042718999974, 178.64823744399996, 219.85008347, 267.53478624499996, 300.61143124399996]
Benchmark # 13  --  tf.boolean_mask(in1, tf.cast(in2, tf.bool))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[10, 20, 0, 40, 0, 30], [1, 1, 0, 1, 0, 1]], output=[10, 20, 40, 30])] description = gather the marked elements constants = []
{ "id": "chatcmpl-8PxInIid5Qf4jeuNgYFcO0rFTDFYz", "object": "chat.completion", "created": 1701196849, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[7, 22, 24, 25, 83, 1, 14, 59, 101, 11, 56, 17, 8, 104, 105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1492, "completion_tokens": 45, "total_tokens": 1537 } }

{'id': 'chatcmpl-8PxInIid5Qf4jeuNgYFcO0rFTDFYz', 'object': 'chat.completion', 'created': 1701196849, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[7, 22, 24, 25, 83, 1, 14, 59, 101, 11, 56, 17, 8, 104, 105]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1492, 'completion_tokens': 45, 'total_tokens': 1537}}
Altering:  [7, 22, 24, 25, 83, 1, 14, 59, 101, 11, 56, 17, 8, 104, 105]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.boolean_mask(tensor, mask) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.tile(input, multiples) ], weight= 8
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 10
Operation  14 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.argmax(input, axis) ], weight= 32
Operation  35 : [ tf.greater_equal(x, y) ], weight= 32
Operation  36 : [ tf.minimum(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([10 20  0 40  0 30], shape=(6,), dtype=int32)

Input 'in2':
tf.Tensor([1 1 0 1 0 1], shape=(6,), dtype=int32)

Output:
tf.Tensor([10 20 40 30], shape=(4,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 6]

Description: gather the marked elements

Searching...

Found solution: tf.boolean_mask(in1, tf.cast(in2, tf.bool))

Solution was found in 3.6 seconds:
tf.boolean_mask(in1, tf.cast(in2, tf.bool))
Found in  3.570054990000017 s!
[3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.699767347000034, 5.07118140099999, 5.540512747999969, 47.633042718999974, 178.64823744399996, 219.85008347, 267.53478624499996, 300.61143124399996]
Benchmark # 14  --  tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]]], output=[4, 2, 3, 5])] description = count the number of elements greater than 0 in each row constants = []
{ "id": "chatcmpl-8PxIrYpqpq2spxWNNHyidIYSheWZv", "object": "chat.completion", "created": 1701196853, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[26, 30, 11, 1, 59, 14, 101, 56, 103, 62, 111, 9, 83, 17, 104]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1586, "completion_tokens": 45, "total_tokens": 1631 } }

{'id': 'chatcmpl-8PxIrYpqpq2spxWNNHyidIYSheWZv', 'object': 'chat.completion', 'created': 1701196853, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[26, 30, 11, 1, 59, 14, 101, 56, 103, 62, 111, 9, 83, 17, 104]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1586, 'completion_tokens': 45, 'total_tokens': 1631}}
Altering:  [26, 30, 11, 1, 59, 14, 101, 56, 103, 62, 111, 9, 83, 17, 104]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  2 : [ tf.greater(x, y) ], weight= 7
Operation  3 : [ tf.matmul(a, b) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.tile(input, multiples) ], weight= 8
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.zeros(shape) ], weight= 12
Operation  13 : [ tf.ones(shape) ], weight= 13
Operation  14 : [ tf.math.count_nonzero(input) ], weight= 16
Operation  15 : [ PairCreationOperation ], weight= 20
Operation  16 : [ SingletonTupleCreationOperation ], weight= 20
Operation  17 : [ tf.constant(value) ], weight= 23
Operation  18 : [ tf.squeeze(input, axis) ], weight= 23
Operation  19 : [ tf.constant(value, dtype) ], weight= 24
Operation  20 : [ tf.equal(x, y) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.maximum(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 1.    0.3  -4.2   0.    2.1   0.4 ]
 [-0.1   0.    1.4  -1.    0.4   0.  ]
 [ 0.1   0.    0.7  -0.3   0.5  -0.1 ]
 [ 1.4   2.5   0.3   0.01  0.    1.2 ]], shape=(4, 6), dtype=float32)

Output:
tf.Tensor([4 2 3 5], shape=(4,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 6]

Description: count the number of elements greater than 0 in each row

Searching...

Found solution: tf.reduce_sum(tf.cast(tf.greater(in1, tf.cast(0, tf.float32)), tf.int32), axis=1)

Solution was found in 29.4 seconds:
tf.reduce_sum(tf.cast(tf.greater(in1, tf.cast(0, tf.float32)), tf.int32), axis=1)
Found in  29.42273010200006 s!
[3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.699767347000034, 5.07118140099999, 5.540512747999969, 29.42273010200006, 47.633042718999974, 178.64823744399996, 219.85008347, 267.53478624499996, 300.61143124399996]
Benchmark # 15  --  tf.cast(tf.logical_and(0 <= in1, in1 <= 1), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]]], output=[[1, 1, 0, 1, 0], [0, 1, 0, 0, 1], [1, 1, 1, 0, 1], [0, 0, 1, 0, 1]])] description = identify elements between 0 and 1 constants = []
{ "id": "chatcmpl-8PxJKfuUINtnDyH2bv9CE6iq1QMyg", "object": "chat.completion", "created": 1701196882, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 26, 27, 57, 58, 59, 101, 15, 60, 37, 39, 38, 40, 83]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1611, "completion_tokens": 45, "total_tokens": 1656 } }

{'id': 'chatcmpl-8PxJKfuUINtnDyH2bv9CE6iq1QMyg', 'object': 'chat.completion', 'created': 1701196882, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 26, 27, 57, 58, 59, 101, 15, 60, 37, 39, 38, 40, 83]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1611, 'completion_tokens': 45, 'total_tokens': 1656}}
Altering:  [1, 14, 26, 27, 57, 58, 59, 101, 15, 60, 37, 39, 38, 40, 83]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.greater_equal(x, y) ], weight= 9
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.math.logical_and(x, y) ], weight= 13
Operation  11 : [ tf.math.logical_or(x, y) ], weight= 13
Operation  12 : [ tf.not_equal(x, y) ], weight= 13
Operation  13 : [ tf.math.logical_not(x) ], weight= 14
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ tf.math.logical_xor(x, y) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.matmul(a, b) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.fill(dims, value) ], weight= 40
Operation  60 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  61 : [ tf.math.bincount(arr) ], weight= 40
Operation  62 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.unstack(value, axis) ], weight= 40
Operation  73 : [ tf.zeros(shape) ], weight= 40
Operation  74 : [ tf.add_n(inputs) ], weight= 44
Operation  75 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  76 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  77 : [ tf.math.ceil(x) ], weight= 44
Operation  78 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  79 : [ tf.math.floor(x) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 1.   0.3 -4.2  0.   2.1]
 [-0.1  0.   1.4 -1.   0.4]
 [ 0.1  0.   0.7 -0.3  0.5]
 [ 1.4  2.5  0.3 -0.1  0. ]], shape=(4, 5), dtype=float32)

Output:
tf.Tensor(
[[1 1 0 1 0]
 [0 1 0 0 1]
 [1 1 1 0 1]
 [0 0 1 0 1]], shape=(4, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 5]

Description: identify elements between 0 and 1

Searching...

Found solution: tf.cast(tf.greater_equal(in1, tf.multiply(in1, in1)), tf.int32)

Solution was found in 3.0 seconds:
tf.cast(tf.greater_equal(in1, tf.multiply(in1, in1)), tf.int32)
Found in  3.033315062000156 s!
[3.033315062000156, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.699767347000034, 5.07118140099999, 5.540512747999969, 29.42273010200006, 47.633042718999974, 178.64823744399996, 219.85008347, 267.53478624499996, 300.61143124399996]
Benchmark # 16  --  tf.concat([in1, in2], axis=1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[1, 2], [10, 20]], [[3, 4, 5], [30, 40, 50]]], output=[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50]])] description = Concatenate batches of sequences constants = []
{ "id": "chatcmpl-8PxJNEZs4qmGD9BKeNBg5QRL3QCre", "object": "chat.completion", "created": 1701196885, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[11, 83, 1, 14, 59, 101, 56, 103, 100, 92, 62, 111, 9, 17, 21]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1508, "completion_tokens": 45, "total_tokens": 1553 } }

{'id': 'chatcmpl-8PxJNEZs4qmGD9BKeNBg5QRL3QCre', 'object': 'chat.completion', 'created': 1701196885, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[11, 83, 1, 14, 59, 101, 56, 103, 100, 92, 62, 111, 9, 17, 21]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1508, 'completion_tokens': 45, 'total_tokens': 1553}}
Altering:  [11, 83, 1, 14, 59, 101, 56, 103, 100, 92, 62, 111, 9, 17, 21]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.concat(values, axis) ], weight= 10
Operation  10 : [ tf.shape(input) ], weight= 10
Operation  11 : [ tf.stack(values, axis) ], weight= 10
Operation  12 : [ tf.fill(dims, value) ], weight= 12
Operation  13 : [ tf.zeros(shape) ], weight= 12
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ PairCreationOperation ], weight= 20
Operation  16 : [ SingletonTupleCreationOperation ], weight= 20
Operation  17 : [ tf.constant(value) ], weight= 23
Operation  18 : [ tf.squeeze(input, axis) ], weight= 23
Operation  19 : [ tf.constant(value, dtype) ], weight= 24
Operation  20 : [ tf.equal(x, y) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.minimum(x, y) ], weight= 32
Operation  40 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  41 : [ tf.zeros_like(input) ], weight= 32
Operation  42 : [ IndexingAxis1Operation ], weight= 32
Operation  43 : [ IndexingOperation ], weight= 32
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 1  2]
 [10 20]], shape=(2, 2), dtype=int32)

Input 'in2':
tf.Tensor(
[[ 3  4  5]
 [30 40 50]], shape=(2, 3), dtype=int32)

Output:
tf.Tensor(
[[ 1  2  3  4  5]
 [10 20 30 40 50]], shape=(2, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 5]

Description: Concatenate batches of sequences

Searching...

Found solution: tf.concat((in1, in2), 1)

Solution was found in 4.7 seconds:
tf.concat((in1, in2), 1)
Found in  4.719615248999844 s!
[3.033315062000156, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 29.42273010200006, 47.633042718999974, 178.64823744399996, 219.85008347, 267.53478624499996, 300.61143124399996]
Benchmark # 17  --  tf.roll(in1, 1, 1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]]], output=[[0, 1, 3, 2, 0], [0, 4, 6, 5, 0], [0, 8, 7, 9, 0]])] description = circular buffer constants = []
{ "id": "chatcmpl-8PxJSweDUQJaizPCLEGgeibVdj3Vq", "object": "chat.completion", "created": 1701196890, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 1, 101, 59, 14, 56, 103, 100, 11, 8, 9, 98, 17, 21, 62]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1535, "completion_tokens": 45, "total_tokens": 1580 } }

{'id': 'chatcmpl-8PxJSweDUQJaizPCLEGgeibVdj3Vq', 'object': 'chat.completion', 'created': 1701196890, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 1, 101, 59, 14, 56, 103, 100, 11, 8, 9, 98, 17, 21, 62]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1535, 'completion_tokens': 45, 'total_tokens': 1580}}
Altering:  [83, 1, 101, 59, 14, 56, 103, 100, 11, 8, 9, 98, 17, 21, 62]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.concat(values, axis) ], weight= 10
Operation  10 : [ tf.stack(values, axis) ], weight= 10
Operation  11 : [ tf.squeeze(input) ], weight= 11
Operation  12 : [ tf.fill(dims, value) ], weight= 12
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ PairCreationOperation ], weight= 20
Operation  16 : [ SingletonTupleCreationOperation ], weight= 20
Operation  17 : [ tf.constant(value) ], weight= 23
Operation  18 : [ tf.squeeze(input, axis) ], weight= 23
Operation  19 : [ tf.constant(value, dtype) ], weight= 24
Operation  20 : [ tf.equal(x, y) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.minimum(x, y) ], weight= 32
Operation  40 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  41 : [ tf.zeros_like(input) ], weight= 32
Operation  42 : [ IndexingAxis1Operation ], weight= 32
Operation  43 : [ IndexingOperation ], weight= 32
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[1 3 2 0 0]
 [4 6 5 0 0]
 [8 7 9 0 0]], shape=(3, 5), dtype=int32)

Output:
tf.Tensor(
[[0 1 3 2 0]
 [0 4 6 5 0]
 [0 8 7 9 0]], shape=(3, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 5]

Description: circular buffer

Searching...

Found solution: tf.roll(in1, 1, 1)

Solution was found in 7.6 seconds:
tf.roll(in1, 1, 1)
Found in  7.6394969939999555 s!
[3.033315062000156, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 29.42273010200006, 47.633042718999974, 178.64823744399996, 219.85008347, 267.53478624499996, 300.61143124399996]
Benchmark # 18  --  tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[1, 3, 5, 7], [2, 4, 6, 8]]], output=[[1, 3, 5, 7, 0], [2, 4, 6, 8, 0]])] description = pad a zero column constants = []
{ "id": "chatcmpl-8PxJZ2ewKn6jAFwyAtCvW1owarERh", "object": "chat.completion", "created": 1701196897, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 21, 11, 1, 59, 14, 101, 57, 58, 71, 72, 79, 75, 56, 103]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1501, "completion_tokens": 45, "total_tokens": 1546 } }

{'id': 'chatcmpl-8PxJZ2ewKn6jAFwyAtCvW1owarERh', 'object': 'chat.completion', 'created': 1701196897, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 21, 11, 1, 59, 14, 101, 57, 58, 71, 72, 79, 75, 56, 103]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1501, 'completion_tokens': 45, 'total_tokens': 1546}}
Altering:  [83, 21, 11, 1, 59, 14, 101, 57, 58, 71, 72, 79, 75, 56, 103]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.fill(dims, value) ], weight= 12
Operation  13 : [ tf.reduce_mean(input_tensor, axis) ], weight= 12
Operation  14 : [ tf.reduce_all(input_tensor, axis) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[1 3 5 7]
 [2 4 6 8]], shape=(2, 4), dtype=int32)

Output:
tf.Tensor(
[[1 3 5 7 0]
 [2 4 6 8 0]], shape=(2, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 4, 5]

Description: pad a zero column

Searching...

Could not find solution within 300 seconds.
Found in  300.369390159 s!
[3.033315062000156, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 29.42273010200006, 47.633042718999974, 178.64823744399996, 219.85008347, 267.53478624499996, 300.369390159, 300.61143124399996]
Benchmark # 19  --  tf.gather(in1, tf.where(tf.sequence_mask(in2))[:, 0])
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[1, 2, 0, 3], [2, 1, 2, 3]], output=[1, 1, 2, 0, 0, 3, 3, 3])] description = replicate elements a given number of times constants = []
{ "id": "chatcmpl-8PxORIvLP5stJ2sahYJeqcNgdhAdp", "object": "chat.completion", "created": 1701197199, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 14, 101, 16, 36, 96, 97, 83, 105, 106, 56, 21, 62, 111]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1495, "completion_tokens": 45, "total_tokens": 1540 } }

{'id': 'chatcmpl-8PxORIvLP5stJ2sahYJeqcNgdhAdp', 'object': 'chat.completion', 'created': 1701197199, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 59, 14, 101, 16, 36, 96, 97, 83, 105, 106, 56, 21, 62, 111]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1495, 'completion_tokens': 45, 'total_tokens': 1540}}
Altering:  [1, 59, 14, 101, 16, 36, 96, 97, 83, 105, 106, 56, 21, 62, 111]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.multiply(x, y) ], weight= 7
Operation  2 : [ tf.transpose(a) ], weight= 7
Operation  3 : [ tf.add(x, y) ], weight= 8
Operation  4 : [ tf.divide(x, y) ], weight= 8
Operation  5 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  6 : [ tf.square(x) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.fill(dims, value) ], weight= 12
Operation  9 : [ tf.zeros(shape) ], weight= 12
Operation  10 : [ tf.ones(shape) ], weight= 13
Operation  11 : [ tf.transpose(a, perm) ], weight= 13
Operation  12 : [ tf.exp(x) ], weight= 15
Operation  13 : [ tf.math.log(x) ], weight= 15
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.sqrt(x) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.maximum(x, y) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  29 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  30 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  31 : [ tf.where(condition) ], weight= 24
Operation  32 : [ tf.where(condition, x, y) ], weight= 24
Operation  33 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  34 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  35 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  36 : [ tf.range(start) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.minimum(x, y) ], weight= 32
Operation  41 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingAxis1Operation ], weight= 32
Operation  44 : [ IndexingOperation ], weight= 32
Operation  45 : [ tf.concat(values, axis) ], weight= 36
Operation  46 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  47 : [ tf.ones_like(input) ], weight= 36
Operation  48 : [ tf.shape(input) ], weight= 36
Operation  49 : [ tf.stack(values, axis) ], weight= 36
Operation  50 : [ SlicingAxis0BothOperation ], weight= 36
Operation  51 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis0RightOperation ], weight= 36
Operation  53 : [ SlicingAxis1BothOperation ], weight= 36
Operation  54 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  55 : [ SlicingAxis1RightOperation ], weight= 36
Operation  56 : [ TripleCreationOperation ], weight= 36
Operation  57 : [ tf.squeeze(input) ], weight= 38
Operation  58 : [ tf.abs(x) ], weight= 40
Operation  59 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  60 : [ tf.eye(num_rows) ], weight= 40
Operation  61 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  62 : [ tf.math.bincount(arr) ], weight= 40
Operation  63 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  67 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  68 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  72 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  73 : [ tf.unstack(value, axis) ], weight= 40
Operation  74 : [ tf.add_n(inputs) ], weight= 44
Operation  75 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  76 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  77 : [ tf.math.ceil(x) ], weight= 44
Operation  78 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  79 : [ tf.math.floor(x) ], weight= 44
Operation  80 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  81 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  82 : [ tf.not_equal(x, y) ], weight= 44
Operation  83 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  84 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  85 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([1 2 0 3], shape=(4,), dtype=int32)

Input 'in2':
tf.Tensor([2 1 2 3], shape=(4,), dtype=int32)

Output:
tf.Tensor([1 1 2 0 0 3 3 3], shape=(8,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 8]

Description: replicate elements a given number of times

Searching...

Found solution: tf.repeat(in1, in2)

Solution was found in 18.5 seconds:
tf.repeat(in1, in2)
Found in  18.517070384000135 s!
[3.033315062000156, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 29.42273010200006, 47.633042718999974, 178.64823744399996, 219.85008347, 267.53478624499996, 300.369390159, 300.61143124399996]
Benchmark # 20  --  tf.where(in1, in2, tf.multiply(in2, -10))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[True, False, False, True, False], [1, 2, 3, 4, 5]], output=[1, -20, -30, 4, -50])] description = use bool tensor as condition constants = [-10]
{ "id": "chatcmpl-8PxOkwySPlniacXwGonjSR6NWUE7I", "object": "chat.completion", "created": 1701197218, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[110, 15, 26, 27, 60, 59, 1, 101, 14, 56, 83, 9, 103, 17, 72]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1488, "completion_tokens": 45, "total_tokens": 1533 } }

{'id': 'chatcmpl-8PxOkwySPlniacXwGonjSR6NWUE7I', 'object': 'chat.completion', 'created': 1701197218, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[110, 15, 26, 27, 60, 59, 1, 101, 14, 56, 83, 9, 103, 17, 72]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1488, 'completion_tokens': 45, 'total_tokens': 1533}}
Altering:  [110, 15, 26, 27, 60, 59, 1, 101, 14, 56, 83, 9, 103, 17, 72]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  2 : [ tf.equal(x, y) ], weight= 7
Operation  3 : [ tf.greater(x, y) ], weight= 7
Operation  4 : [ tf.matmul(a, b) ], weight= 7
Operation  5 : [ tf.multiply(x, y) ], weight= 7
Operation  6 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  7 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  8 : [ tf.where(condition, x, y) ], weight= 7
Operation  9 : [ tf.add(x, y) ], weight= 8
Operation  10 : [ tf.divide(x, y) ], weight= 8
Operation  11 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  12 : [ tf.subtract(x, y) ], weight= 8
Operation  13 : [ tf.greater_equal(x, y) ], weight= 9
Operation  14 : [ tf.not_equal(x, y) ], weight= 13
Operation  15 : [ PairCreationOperation ], weight= 20
Operation  16 : [ SingletonTupleCreationOperation ], weight= 20
Operation  17 : [ tf.constant(value) ], weight= 23
Operation  18 : [ tf.squeeze(input, axis) ], weight= 23
Operation  19 : [ tf.constant(value, dtype) ], weight= 24
Operation  20 : [ tf.gather(params, indices) ], weight= 24
Operation  21 : [ tf.maximum(x, y) ], weight= 24
Operation  22 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  23 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.transpose(a) ], weight= 24
Operation  26 : [ tf.where(condition) ], weight= 24
Operation  27 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  28 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  29 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  30 : [ tf.range(start) ], weight= 28
Operation  31 : [ tf.square(x) ], weight= 28
Operation  32 : [ tf.tile(input, multiples) ], weight= 28
Operation  33 : [ tf.argmax(input, axis) ], weight= 32
Operation  34 : [ tf.minimum(x, y) ], weight= 32
Operation  35 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  36 : [ tf.zeros_like(input) ], weight= 32
Operation  37 : [ IndexingAxis1Operation ], weight= 32
Operation  38 : [ IndexingOperation ], weight= 32
Operation  39 : [ tf.concat(values, axis) ], weight= 36
Operation  40 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([ True False False  True False], shape=(5,), dtype=bool)

Input 'in2':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Output:
tf.Tensor([  1 -20 -30   4 -50], shape=(5,), dtype=int32)

Constants: [-10, 0, 1, -1, True, False, 5]

Description: use bool tensor as condition

Searching...

Found solution: tf.where(in1, x=in2, y=tf.multiply(in2, tf.cast(-10, tf.int32)))

Solution was found in 4.5 seconds:
tf.where(in1, x=in2, y=tf.multiply(in2, tf.cast(-10, tf.int32)))
Found in  4.519948830999965 s!
[3.033315062000156, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 29.42273010200006, 47.633042718999974, 178.64823744399996, 219.85008347, 267.53478624499996, 300.369390159, 300.61143124399996]
Benchmark # 21  --  tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[5, 7, -12, 10, 20], [1, 2, 3, 1, 2]], output=[15, 27, -12, 15, 27])] description = sum of elements in the first tensor but partitioned by the second tensor constants = []
{ "id": "chatcmpl-8PxOoHLrAb0H43p0uzmP2P3egTQJ0", "object": "chat.completion", "created": 1701197222, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 11, 22, 48, 59, 80, 83, 101, 105, 56, 14, 49, 34, 96, 97]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1499, "completion_tokens": 45, "total_tokens": 1544 } }

{'id': 'chatcmpl-8PxOoHLrAb0H43p0uzmP2P3egTQJ0', 'object': 'chat.completion', 'created': 1701197222, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 11, 22, 48, 59, 80, 83, 101, 105, 56, 14, 49, 34, 96, 97]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1499, 'completion_tokens': 45, 'total_tokens': 1544}}
Altering:  [1, 11, 22, 48, 59, 80, 83, 101, 105, 56, 14, 49, 34, 96, 97]

Reweighted:
Operation  0 : [ tf.gather(params, indices) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.square(x) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.math.segment_sum(data, segment_ids) ], weight= 12
Operation  12 : [ tf.math.divide_no_nan(x, y) ], weight= 15
Operation  13 : [ tf.math.squared_difference(x, y) ], weight= 15
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.sqrt(x) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.exp(x) ], weight= 52
Operation  100 : [ tf.math.log(x) ], weight= 52
Operation  101 : [ tf.math.reciprocal(x) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([  5   7 -12  10  20], shape=(5,), dtype=int32)

Input 'in2':
tf.Tensor([1 2 3 1 2], shape=(5,), dtype=int32)

Output:
tf.Tensor([ 15  27 -12  15  27], shape=(5,), dtype=int32)

Constants: [0, 1, -1, True, False, 5]

Description: sum of elements in the first tensor but partitioned by the second tensor

Searching...

Could not find solution within 300 seconds.
Found in  310.10302116699995 s!
[3.033315062000156, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 29.42273010200006, 47.633042718999974, 178.64823744399996, 219.85008347, 267.53478624499996, 300.369390159, 300.61143124399996, 310.10302116699995]
Benchmark # 22  --  tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[11, 12, 13], [30, 20, 10], [77, 88, 99]], [[2, 0, 1], [1, 0, 2], [0, 2, 1]]], output=[[12, 13, 11], [20, 30, 10], [77, 99, 88]])] description = scatter a 2-D tensor with indices constants = []
{ "id": "chatcmpl-8PxTqr2OY3CnAoVdqNUilWCwE4zMP", "object": "chat.completion", "created": 1701197534, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[87, 22, 83, 1, 101, 59, 14, 56, 103, 105, 62, 111, 9, 17, 79]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1532, "completion_tokens": 45, "total_tokens": 1577 } }

{'id': 'chatcmpl-8PxTqr2OY3CnAoVdqNUilWCwE4zMP', 'object': 'chat.completion', 'created': 1701197534, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[87, 22, 83, 1, 101, 59, 14, 56, 103, 105, 62, 111, 9, 17, 79]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1532, 'completion_tokens': 45, 'total_tokens': 1577}}
Altering:  [87, 22, 83, 1, 101, 59, 14, 56, 103, 105, 62, 111, 9, 17, 79]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  2 : [ tf.gather(params, indices) ], weight= 7
Operation  3 : [ tf.matmul(a, b) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  6 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  7 : [ tf.transpose(a) ], weight= 7
Operation  8 : [ tf.add(x, y) ], weight= 8
Operation  9 : [ tf.divide(x, y) ], weight= 8
Operation  10 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  11 : [ tf.subtract(x, y) ], weight= 8
Operation  12 : [ tf.zeros(shape) ], weight= 12
Operation  13 : [ tf.ones(shape) ], weight= 13
Operation  14 : [ tf.scatter_nd(indices, updates, shape) ], weight= 15
Operation  15 : [ PairCreationOperation ], weight= 20
Operation  16 : [ SingletonTupleCreationOperation ], weight= 20
Operation  17 : [ tf.constant(value) ], weight= 23
Operation  18 : [ tf.squeeze(input, axis) ], weight= 23
Operation  19 : [ tf.constant(value, dtype) ], weight= 24
Operation  20 : [ tf.equal(x, y) ], weight= 24
Operation  21 : [ tf.greater(x, y) ], weight= 24
Operation  22 : [ tf.maximum(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.where(condition) ], weight= 24
Operation  27 : [ tf.where(condition, x, y) ], weight= 24
Operation  28 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  29 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  30 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  31 : [ tf.range(start) ], weight= 28
Operation  32 : [ tf.square(x) ], weight= 28
Operation  33 : [ tf.tile(input, multiples) ], weight= 28
Operation  34 : [ tf.argmax(input, axis) ], weight= 32
Operation  35 : [ tf.greater_equal(x, y) ], weight= 32
Operation  36 : [ tf.minimum(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.concat(values, axis) ], weight= 36
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[11 12 13]
 [30 20 10]
 [77 88 99]], shape=(3, 3), dtype=int32)

Input 'in2':
tf.Tensor(
[[2 0 1]
 [1 0 2]
 [0 2 1]], shape=(3, 3), dtype=int32)

Output:
tf.Tensor(
[[12 13 11]
 [20 30 10]
 [77 99 88]], shape=(3, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3]

Description: scatter a 2-D tensor with indices

Searching...

Could not find solution within 300 seconds.
Found in  306.0170476789999 s!
[3.033315062000156, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 29.42273010200006, 47.633042718999974, 178.64823744399996, 219.85008347, 267.53478624499996, 300.369390159, 300.61143124399996, 306.0170476789999, 310.10302116699995]
Benchmark # 23  --  tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[10, 7, 4, 3, 2, 8]], output=[5, 3, 2, 1, 0, 4])] description = sort a tensor and return sorted index in original order constants = []
{ "id": "chatcmpl-8PxYp70fF61e63400ipKWgAqNeVIk", "object": "chat.completion", "created": 1701197843, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[4, 5, 6, 94, 95, 83, 105, 106, 1, 14, 59, 101, 56, 103, 11]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1486, "completion_tokens": 45, "total_tokens": 1531 } }

{'id': 'chatcmpl-8PxYp70fF61e63400ipKWgAqNeVIk', 'object': 'chat.completion', 'created': 1701197843, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[4, 5, 6, 94, 95, 83, 105, 106, 1, 14, 59, 101, 56, 103, 11]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1486, 'completion_tokens': 45, 'total_tokens': 1531}}
Altering:  [4, 5, 6, 94, 95, 83, 105, 106, 1, 14, 59, 101, 56, 103, 11]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.multiply(x, y) ], weight= 7
Operation  2 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  3 : [ tf.transpose(a) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.concat(values, axis) ], weight= 10
Operation  9 : [ tf.argsort(values, axis, stable=True) ], weight= 12
Operation  10 : [ tf.transpose(a, perm) ], weight= 13
Operation  11 : [ tf.argmin(input, axis) ], weight= 14
Operation  12 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 14
Operation  13 : [ tf.sort(values, axis) ], weight= 15
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.maximum(x, y) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  29 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.minimum(x, y) ], weight= 32
Operation  41 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingAxis1Operation ], weight= 32
Operation  44 : [ IndexingOperation ], weight= 32
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.shape(input) ], weight= 36
Operation  48 : [ tf.stack(values, axis) ], weight= 36
Operation  49 : [ SlicingAxis0BothOperation ], weight= 36
Operation  50 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis0RightOperation ], weight= 36
Operation  52 : [ SlicingAxis1BothOperation ], weight= 36
Operation  53 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  54 : [ SlicingAxis1RightOperation ], weight= 36
Operation  55 : [ TripleCreationOperation ], weight= 36
Operation  56 : [ tf.squeeze(input) ], weight= 38
Operation  57 : [ tf.abs(x) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.fill(dims, value) ], weight= 40
Operation  60 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  61 : [ tf.math.bincount(arr) ], weight= 40
Operation  62 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.unstack(value, axis) ], weight= 40
Operation  73 : [ tf.zeros(shape) ], weight= 40
Operation  74 : [ tf.add_n(inputs) ], weight= 44
Operation  75 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  76 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  77 : [ tf.math.ceil(x) ], weight= 44
Operation  78 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  79 : [ tf.math.floor(x) ], weight= 44
Operation  80 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  81 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  82 : [ tf.not_equal(x, y) ], weight= 44
Operation  83 : [ tf.ones(shape) ], weight= 44
Operation  84 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  85 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  86 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.exp(x) ], weight= 52
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.log(x) ], weight= 52
Operation  101 : [ tf.math.reciprocal(x) ], weight= 52
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  120 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  121 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  123 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'in1':
tf.Tensor([10  7  4  3  2  8], shape=(6,), dtype=int32)

Output:
tf.Tensor([5 3 2 1 0 4], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6]

Description: sort a tensor and return sorted index in original order

Searching...

Found solution: tf.argsort(tf.argsort(in1, axis=0, stable=True), axis=0, stable=True)

Solution was found in 2.6 seconds:
tf.argsort(tf.argsort(in1, axis=0, stable=True), axis=0, stable=True)
Found in  2.6304693910001333 s!
[2.6304693910001333, 3.033315062000156, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 29.42273010200006, 47.633042718999974, 178.64823744399996, 219.85008347, 267.53478624499996, 300.369390159, 300.61143124399996, 306.0170476789999, 310.10302116699995]
Benchmark # 24  --  tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs={'tensor': [[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11]], 'indices': [[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]], 'updates': [[0, -2], [-1, -3], [-2, -4]]}, output=[[0, 2, -2, 4, 5], [4, -1, 6, -3, 8], [7, 8, -2, 10, -4]])] description = update a tensor at the given indices constants = []
{ "id": "chatcmpl-8PxYrnjOoQ0eWep0HQ4CVZNZay6s4", "object": "chat.completion", "created": 1701197845, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[102, 1, 83, 22, 11, 59, 14, 101, 15, 60, 26, 27, 57, 58, 56]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1602, "completion_tokens": 45, "total_tokens": 1647 } }

{'id': 'chatcmpl-8PxYrnjOoQ0eWep0HQ4CVZNZay6s4', 'object': 'chat.completion', 'created': 1701197845, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[102, 1, 83, 22, 11, 59, 14, 101, 15, 60, 26, 27, 57, 58, 56]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1602, 'completion_tokens': 45, 'total_tokens': 1647}}
Altering:  [102, 1, 83, 22, 11, 59, 14, 101, 15, 60, 26, 27, 57, 58, 56]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.greater(x, y) ], weight= 7
Operation  3 : [ tf.matmul(a, b) ], weight= 7
Operation  4 : [ tf.maximum(x, y) ], weight= 7
Operation  5 : [ tf.multiply(x, y) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.greater_equal(x, y) ], weight= 9
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.not_equal(x, y) ], weight= 13
Operation  14 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  24 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'tensor':
tf.Tensor(
[[ 1  2  3  4  5]
 [ 4  5  6  7  8]
 [ 7  8  9 10 11]], shape=(3, 5), dtype=int32)

Input 'indices':
tf.Tensor(
[[0 0]
 [0 2]
 [1 1]
 [1 3]
 [2 2]
 [2 4]], shape=(6, 2), dtype=int32)

Input 'updates':
tf.Tensor(
[[ 0 -2]
 [-1 -3]
 [-2 -4]], shape=(3, 2), dtype=int32)

Output:
tf.Tensor(
[[ 0  2 -2  4  5]
 [ 4 -1  6 -3  8]
 [ 7  8 -2 10 -4]], shape=(3, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 5, 6]

Description: update a tensor at the given indices

Searching...

Found solution: tf.tensor_scatter_nd_update(tensor, indices, tf.boolean_mask(updates, tf.equal(updates, updates)))

Solution was found in 70.7 seconds:
tf.tensor_scatter_nd_update(tensor, indices, tf.boolean_mask(updates, tf.equal(updates, updates)))
Found in  70.6739105239999 s!
[2.6304693910001333, 3.033315062000156, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 29.42273010200006, 47.633042718999974, 70.6739105239999, 178.64823744399996, 219.85008347, 267.53478624499996, 300.369390159, 300.61143124399996, 306.0170476789999, 310.10302116699995]
Benchmark # 25  --  tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, tf.reduce_max(in1) + 1), axis=1)), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[0, 2], [1, 3], [2, 4]]], output=[[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]])] description = pair with row index constants = []
{ "id": "chatcmpl-8Pxa0Ix6FSpy6auYRZ0RInTizERyI", "object": "chat.completion", "created": 1701197916, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 1, 11, 59, 14, 56, 101, 103, 104, 100, 105, 22, 24, 17, 8]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1501, "completion_tokens": 45, "total_tokens": 1546 } }

{'id': 'chatcmpl-8Pxa0Ix6FSpy6auYRZ0RInTizERyI', 'object': 'chat.completion', 'created': 1701197916, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 1, 11, 59, 14, 56, 101, 103, 104, 100, 105, 22, 24, 17, 8]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1501, 'completion_tokens': 45, 'total_tokens': 1546}}
Altering:  [83, 1, 11, 59, 14, 56, 101, 103, 104, 100, 105, 22, 24, 17, 8]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.tile(input, multiples) ], weight= 8
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.stack(values, axis) ], weight= 10
Operation  14 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.argmax(input, axis) ], weight= 32
Operation  35 : [ tf.greater_equal(x, y) ], weight= 32
Operation  36 : [ tf.minimum(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[0 2]
 [1 3]
 [2 4]], shape=(3, 2), dtype=int32)

Output:
tf.Tensor(
[[0 0]
 [0 2]
 [1 1]
 [1 3]
 [2 2]
 [2 4]], shape=(6, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 6]

Description: pair with row index

Searching...

Could not find solution within 300 seconds.
Found in  300.2143869319998 s!
[2.6304693910001333, 3.033315062000156, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 29.42273010200006, 47.633042718999974, 70.6739105239999, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 306.0170476789999, 310.10302116699995]
Benchmark # 26  --  tf.transpose(tf.cast((in1, in1), tf.float32))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]], output=[[[5.0, 5.0], [1.0, 1.0], [0.0, 0.0]], [[2.0, 2.0], [3.0, 3.0], [-1.0, -1.0]]])] description = reshape by separating and duplicating columns constants = []
{ "id": "chatcmpl-8PxerJWNq2eZ1doF86pBtOfW4oPIr", "object": "chat.completion", "created": 1701198217, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 1, 59, 101, 14, 21, 62, 111, 12, 22, 24, 56, 103, 72, 76]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1541, "completion_tokens": 45, "total_tokens": 1586 } }

{'id': 'chatcmpl-8PxerJWNq2eZ1doF86pBtOfW4oPIr', 'object': 'chat.completion', 'created': 1701198217, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 1, 59, 101, 14, 21, 62, 111, 12, 22, 24, 56, 103, 72, 76]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1541, 'completion_tokens': 45, 'total_tokens': 1586}}
Altering:  [83, 1, 59, 101, 14, 21, 62, 111, 12, 22, 24, 56, 103, 72, 76]

Reweighted:
Operation  0 : [ tf.constant(value) ], weight= 6
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.fill(dims, value) ], weight= 12
Operation  12 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  13 : [ tf.zeros(shape) ], weight= 12
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 5.  2.]
 [ 1.  3.]
 [ 0. -1.]], shape=(3, 2), dtype=float32)

Output:
tf.Tensor(
[[[ 5.  5.]
  [ 1.  1.]
  [ 0.  0.]]

 [[ 2.  2.]
  [ 3.  3.]
  [-1. -1.]]], shape=(2, 3, 2), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: reshape by separating and duplicating columns

Searching...

Found solution: tf.transpose(tf.add(in1, tf.zeros((2, 3, 2))))

Solution was found in 29.0 seconds:
tf.transpose(tf.add(in1, tf.zeros((2, 3, 2))))
Found in  28.989513696999893 s!
[2.6304693910001333, 3.033315062000156, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 28.989513696999893, 29.42273010200006, 47.633042718999974, 70.6739105239999, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 306.0170476789999, 310.10302116699995]
Benchmark # 27  --  tf.minimum(in1, tf.constant(1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[5, 1, 0, 3, 0, -1, 2, -10, 2]], output=[1, 1, 0, 1, 0, -1, 1, -10, 1])] description = clip values that are greater than 1 constants = [1]
{ "id": "chatcmpl-8PxfKIUNVBSK7Axi8lMDgbPkDdKzF", "object": "chat.completion", "created": 1701198246, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[10, 1, 101, 59, 14, 57, 58, 9, 83, 11, 56, 103, 36, 16, 42]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1504, "completion_tokens": 45, "total_tokens": 1549 } }

{'id': 'chatcmpl-8PxfKIUNVBSK7Axi8lMDgbPkDdKzF', 'object': 'chat.completion', 'created': 1701198246, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[10, 1, 101, 59, 14, 57, 58, 9, 83, 11, 56, 103, 36, 16, 42]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1504, 'completion_tokens': 45, 'total_tokens': 1549}}
Altering:  [10, 1, 101, 59, 14, 57, 58, 9, 83, 11, 56, 103, 36, 16, 42]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 13
Operation  12 : [ tf.exp(x) ], weight= 15
Operation  13 : [ tf.math.log(x) ], weight= 15
Operation  14 : [ tf.math.reciprocal(x) ], weight= 15
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.zeros(shape) ], weight= 40
Operation  73 : [ tf.add_n(inputs) ], weight= 44
Operation  74 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([  5   1   0   3   0  -1   2 -10   2], shape=(9,), dtype=int32)

Output:
tf.Tensor([  1   1   0   1   0  -1   1 -10   1], shape=(9,), dtype=int32)

Constants: [1, 0, -1, True, False, 9]

Description: clip values that are greater than 1

Searching...

Found solution: tf.minimum(in1, tf.cast(1, tf.int32))

Solution was found in 3.1 seconds:
tf.minimum(in1, tf.cast(1, tf.int32))
Found in  3.056987118000052 s!
[2.6304693910001333, 3.033315062000156, 3.056987118000052, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 28.989513696999893, 29.42273010200006, 47.633042718999974, 70.6739105239999, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 306.0170476789999, 310.10302116699995]
Benchmark # 28  --  tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0) * in2 + (1 - tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0)) * in1
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]], [[-9, -8, -7, -6, -5, -4, -3], [11, 12, 13, 14, 15, 16, 17]]], output=[[11, 22, 33, -6, -5, 66, 77], [70, 60, 50, 14, 15, 20, 10]])] description = replace certain columns with columns from the other tensor constants = [3, 4, 5]
{ "id": "chatcmpl-8PxfNYmcaCVYAvTZArrhUExyJbUmX", "object": "chat.completion", "created": 1701198249, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 83, 59, 14, 101, 57, 58, 56, 72, 76, 75, 74, 79, 80, 103]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1587, "completion_tokens": 45, "total_tokens": 1632 } }

{'id': 'chatcmpl-8PxfNYmcaCVYAvTZArrhUExyJbUmX', 'object': 'chat.completion', 'created': 1701198249, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 83, 59, 14, 101, 57, 58, 56, 72, 76, 75, 74, 79, 80, 103]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1587, 'completion_tokens': 45, 'total_tokens': 1632}}
Altering:  [1, 83, 59, 14, 101, 57, 58, 56, 72, 76, 75, 74, 79, 80, 103]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  6 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  13 : [ tf.reduce_mean(input_tensor, axis) ], weight= 12
Operation  14 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.transpose(a) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.concat(values, axis) ], weight= 36
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[11 22 33 44 55 66 77]
 [70 60 50 40 30 20 10]], shape=(2, 7), dtype=int32)

Input 'in2':
tf.Tensor(
[[-9 -8 -7 -6 -5 -4 -3]
 [11 12 13 14 15 16 17]], shape=(2, 7), dtype=int32)

Output:
tf.Tensor(
[[11 22 33 -6 -5 66 77]
 [70 60 50 14 15 20 10]], shape=(2, 7), dtype=int32)

Constants: [3, 4, 5, 0, 1, -1, True, False, 2, 7]

Description: replace certain columns with columns from the other tensor

Searching...

Could not find solution within 300 seconds.
Found in  307.5279804060001 s!
[2.6304693910001333, 3.033315062000156, 3.056987118000052, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 28.989513696999893, 29.42273010200006, 47.633042718999974, 70.6739105239999, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 29  --  tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[12, 23, 34, 45], [66, 77, 88, 99]], [[0, 1], [0, 1], [1, 0], [0, 0]], [[2, 1], [1, 2], [0, 2], [0, 0]]], output=[[34, 77], [23, 88], [66, 34], [12, 12]])] description = index into the tensor constants = []
{ "id": "chatcmpl-8PxkNVq3JOWKKdbRlD8UKgPuHcWPS", "object": "chat.completion", "created": 1701198559, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[8, 22, 24, 11, 56, 59, 101, 14, 1, 2, 98, 83, 105, 72, 76]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1543, "completion_tokens": 45, "total_tokens": 1588 } }

{'id': 'chatcmpl-8PxkNVq3JOWKKdbRlD8UKgPuHcWPS', 'object': 'chat.completion', 'created': 1701198559, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[8, 22, 24, 11, 56, 59, 101, 14, 1, 2, 98, 83, 105, 72, 76]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1543, 'completion_tokens': 45, 'total_tokens': 1588}}
Altering:  [8, 22, 24, 11, 56, 59, 101, 14, 1, 2, 98, 83, 105, 72, 76]

Reweighted:
Operation  0 : [ tf.gather(params, indices) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.squeeze(input) ], weight= 11
Operation  12 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  13 : [ tf.add_n(inputs) ], weight= 13
Operation  14 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[12 23 34 45]
 [66 77 88 99]], shape=(2, 4), dtype=int32)

Input 'in2':
tf.Tensor(
[[0 1]
 [0 1]
 [1 0]
 [0 0]], shape=(4, 2), dtype=int32)

Input 'in3':
tf.Tensor(
[[2 1]
 [1 2]
 [0 2]
 [0 0]], shape=(4, 2), dtype=int32)

Output:
tf.Tensor(
[[34 77]
 [23 88]
 [66 34]
 [12 12]], shape=(4, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 4]

Description: index into the tensor

Searching...

Could not find solution within 300 seconds.
Found in  302.668201728 s!
[2.6304693910001333, 3.033315062000156, 3.056987118000052, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 28.989513696999893, 29.42273010200006, 47.633042718999974, 70.6739105239999, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 30  --  tf.tensordot(in1, in2, 1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[4, 3, 1], [6, 5, 2]], [[[5, 5]], [[1, 5]], [[6, 0]]]], output=[[[29, 35]], [[47, 55]]])] description = tensor multiplication like np.tensordot constants = []
{ "id": "chatcmpl-8PxpIOmHMOFybCaFUX1DHZIgcAlZe", "object": "chat.completion", "created": 1701198864, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[103, 1, 59, 14, 56, 83, 11, 8, 105, 106, 17, 98, 92, 62, 111]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1500, "completion_tokens": 45, "total_tokens": 1545 } }

{'id': 'chatcmpl-8PxpIOmHMOFybCaFUX1DHZIgcAlZe', 'object': 'chat.completion', 'created': 1701198864, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[103, 1, 59, 14, 56, 83, 11, 8, 105, 106, 17, 98, 92, 62, 111]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1500, 'completion_tokens': 45, 'total_tokens': 1545}}
Altering:  [103, 1, 59, 14, 56, 83, 11, 8, 105, 106, 17, 98, 92, 62, 111]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.concat(values, axis) ], weight= 10
Operation  9 : [ tf.shape(input) ], weight= 10
Operation  10 : [ tf.squeeze(input) ], weight= 11
Operation  11 : [ tf.zeros(shape) ], weight= 12
Operation  12 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  13 : [ tf.ones(shape) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.subtract(x, y) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.minimum(x, y) ], weight= 32
Operation  41 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingAxis1Operation ], weight= 32
Operation  44 : [ IndexingOperation ], weight= 32
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[4 3 1]
 [6 5 2]], shape=(2, 3), dtype=int32)

Input 'in2':
tf.Tensor(
[[[5 5]]

 [[1 5]]

 [[6 0]]], shape=(3, 1, 2), dtype=int32)

Output:
tf.Tensor(
[[[29 35]]

 [[47 55]]], shape=(2, 1, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: tensor multiplication like np.tensordot

Searching...

Found solution: tf.tensordot(in1, in2, 1)

Solution was found in 3.0 seconds:
tf.tensordot(in1, in2, 1)
Found in  2.9580927080000947 s!
[2.6304693910001333, 2.9580927080000947, 3.033315062000156, 3.056987118000052, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 28.989513696999893, 29.42273010200006, 47.633042718999974, 70.6739105239999, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 31  --  tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[3, 5, 0, 2, 3, 3, 0]], output=[[1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], [1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]])] description = binary tensor from vector indicating if elements are equal constants = []
{ "id": "chatcmpl-8PxpLEANnzueNyQN8LuRTcAA7sdqg", "object": "chat.completion", "created": 1701198867, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[61, 15, 1, 83, 11, 57, 58, 14, 59, 101, 56, 96, 36, 16, 49]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1716, "completion_tokens": 45, "total_tokens": 1761 } }

{'id': 'chatcmpl-8PxpLEANnzueNyQN8LuRTcAA7sdqg', 'object': 'chat.completion', 'created': 1701198867, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[61, 15, 1, 83, 11, 57, 58, 14, 59, 101, 56, 96, 36, 16, 49]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1716, 'completion_tokens': 45, 'total_tokens': 1761}}
Altering:  [61, 15, 1, 83, 11, 57, 58, 14, 59, 101, 56, 96, 36, 16, 49]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.one_hot(indices, depth) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.exp(x) ], weight= 15
Operation  12 : [ tf.math.log(x) ], weight= 15
Operation  13 : [ tf.math.squared_difference(x, y) ], weight= 15
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.sqrt(x) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.zeros(shape) ], weight= 40
Operation  73 : [ tf.add_n(inputs) ], weight= 44
Operation  74 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  80 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  81 : [ tf.not_equal(x, y) ], weight= 44
Operation  82 : [ tf.ones(shape) ], weight= 44
Operation  83 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  84 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  85 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  86 : [ tf.transpose(a, perm) ], weight= 44
Operation  87 : [ tf.argmin(input, axis) ], weight= 48
Operation  88 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  89 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  90 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  91 : [ tf.math.logical_not(x) ], weight= 48
Operation  92 : [ tf.math.negative(x) ], weight= 48
Operation  93 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  94 : [ tf.math.top_k(input, k) ], weight= 48
Operation  95 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  96 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  97 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  98 : [ tf.sign(x) ], weight= 48
Operation  99 : [ tf.unique_with_counts(x) ], weight= 48
Operation  100 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  101 : [ tf.math.reciprocal(x) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([3 5 0 2 3 3 0], shape=(7,), dtype=int32)

Output:
tf.Tensor(
[[1. 0. 0. 0. 1. 1. 0.]
 [0. 1. 0. 0. 0. 0. 0.]
 [0. 0. 1. 0. 0. 0. 1.]
 [0. 0. 0. 1. 0. 0. 0.]
 [1. 0. 0. 0. 1. 1. 0.]
 [1. 0. 0. 0. 1. 1. 0.]
 [0. 0. 1. 0. 0. 0. 1.]], shape=(7, 7), dtype=float32)

Constants: [0, 1, -1, True, False, 7]

Description: binary tensor from vector indicating if elements are equal

Searching...

Found solution: tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)

Solution was found in 3.0 seconds:
tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)
Found in  3.0490382789998876 s!
[2.6304693910001333, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 28.989513696999893, 29.42273010200006, 47.633042718999974, 70.6739105239999, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 32  --  tf.cast(tf.unstack(in1, axis=1), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[[8, 4, 6], [2, 12, 3]], [[11, 12, 5], [9, 12, 12]], [[9, 2, 13], [7, 0, 7]], [[2, 10, 5], [7, 1, 2]]]], output=[[[8, 4, 6], [11, 12, 5], [9, 2, 13], [2, 10, 5]], [[2, 12, 3], [9, 12, 12], [7, 0, 7], [7, 1, 2]]])] description = swap the first two dimensions of the tensor constants = []
{ "id": "chatcmpl-8PxpOyS7sVd4iMQqFSvLZ7Ciamz9v", "object": "chat.completion", "created": 1701198870, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[105, 83, 11, 1, 14, 59, 101, 56, 103, 62, 111, 12, 13, 72, 74]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1597, "completion_tokens": 45, "total_tokens": 1642 } }

{'id': 'chatcmpl-8PxpOyS7sVd4iMQqFSvLZ7Ciamz9v', 'object': 'chat.completion', 'created': 1701198870, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[105, 83, 11, 1, 14, 59, 101, 56, 103, 62, 111, 12, 13, 72, 74]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1597, 'completion_tokens': 45, 'total_tokens': 1642}}
Altering:  [105, 83, 11, 1, 14, 59, 101, 56, 103, 62, 111, 12, 13, 72, 74]

Reweighted:
Operation  0 : [ tf.constant(value) ], weight= 6
Operation  1 : [ tf.constant(value, dtype) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  13 : [ tf.zeros(shape) ], weight= 12
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.equal(x, y) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[[ 8  4  6]
  [ 2 12  3]]

 [[11 12  5]
  [ 9 12 12]]

 [[ 9  2 13]
  [ 7  0  7]]

 [[ 2 10  5]
  [ 7  1  2]]], shape=(4, 2, 3), dtype=int32)

Output:
tf.Tensor(
[[[ 8  4  6]
  [11 12  5]
  [ 9  2 13]
  [ 2 10  5]]

 [[ 2 12  3]
  [ 9 12 12]
  [ 7  0  7]
  [ 7  1  2]]], shape=(2, 4, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 4]

Description: swap the first two dimensions of the tensor

Searching...

Found solution: tf.cast(tf.unstack(in1, axis=1), tf.int32)

Solution was found in 25.9 seconds:
tf.cast(tf.unstack(in1, axis=1), tf.int32)
Found in  25.90471896400004 s!
[2.6304693910001333, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 70.6739105239999, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 33  --  tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10], [12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32]], output=[6, 8, 9, 4, 32])] description = select the values in the second tensor where the first tensor is greater than 1 constants = [1]
{ "id": "chatcmpl-8PxpoAqrgLZwtObiQBHR30Lb2QNE6", "object": "chat.completion", "created": 1701198896, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[26, 22, 8, 1, 2, 14, 59, 101, 56, 57, 58, 4, 5, 3, 83]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1540, "completion_tokens": 45, "total_tokens": 1585 } }

{'id': 'chatcmpl-8PxpoAqrgLZwtObiQBHR30Lb2QNE6', 'object': 'chat.completion', 'created': 1701198896, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[26, 22, 8, 1, 2, 14, 59, 101, 56, 57, 58, 4, 5, 3, 83]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1540, 'completion_tokens': 45, 'total_tokens': 1585}}
Altering:  [26, 22, 8, 1, 2, 14, 59, 101, 56, 57, 58, 4, 5, 3, 83]

Reweighted:
Operation  0 : [ tf.gather(params, indices) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.argmax(input, axis) ], weight= 9
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.argsort(values, axis, stable=True) ], weight= 12
Operation  12 : [ tf.add_n(inputs) ], weight= 13
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.argmin(input, axis) ], weight= 14
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([-1  0 -3  2  1  3  5 -1 -9  2 10], shape=(11,), dtype=int32)

Input 'in2':
tf.Tensor([12  3 45  6  7  8  9 87 65  4 32], shape=(11,), dtype=int32)

Output:
tf.Tensor([ 6  8  9  4 32], shape=(5,), dtype=int32)

Constants: [1, 0, -1, True, False, 5, 11]

Description: select the values in the second tensor where the first tensor is greater than 1

Searching...

Found solution: tf.boolean_mask(in2, tf.greater(tf.multiply(in1, in2), in2))

Solution was found in 12.9 seconds:
tf.boolean_mask(in2, tf.greater(tf.multiply(in1, in2), in2))
Found in  12.926215972000136 s!
[2.6304693910001333, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 12.926215972000136, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 70.6739105239999, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 34  --  tf.unique_with_counts(in1)[1]
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[37, 42, 42, 37, 28, 15, 42, 15]], output=[0, 1, 1, 0, 2, 3, 1, 3])] description = group items by value and get the group indices constants = []
{ "id": "chatcmpl-8Pxq15yNYJcHJubQiR58vSVk1PrPw", "object": "chat.completion", "created": 1701198909, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 11, 100, 83, 56, 103, 105, 106, 8, 104, 9, 72]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1497, "completion_tokens": 45, "total_tokens": 1542 } }

{'id': 'chatcmpl-8Pxq15yNYJcHJubQiR58vSVk1PrPw', 'object': 'chat.completion', 'created': 1701198909, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 101, 11, 100, 83, 56, 103, 105, 106, 8, 104, 9, 72]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1497, 'completion_tokens': 45, 'total_tokens': 1542}}
Altering:  [1, 14, 59, 101, 11, 100, 83, 56, 103, 105, 106, 8, 104, 9, 72]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.tile(input, multiples) ], weight= 8
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.stack(values, axis) ], weight= 10
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([37 42 42 37 28 15 42 15], shape=(8,), dtype=int32)

Output:
tf.Tensor([0 1 1 0 2 3 1 3], shape=(8,), dtype=int32)

Constants: [0, 1, -1, True, False, 8]

Description: group items by value and get the group indices

Searching...

Found solution: tf.unique_with_counts(in1)[1]

Solution was found in 107.7 seconds:
tf.unique_with_counts(in1)[1]
Found in  107.65597702399964 s!
[2.6304693910001333, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 12.926215972000136, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 70.6739105239999, 107.65597702399964, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 35  --  tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[15, 10], [20, -5]], [[2, 3, 1], [-2, 5, 0]]], output=[[[30, 45, 15], [20, 30, 10]], [[-40, 100, 0], [10, -25, 0]]])] description = perform matrix multiplication constants = []
{ "id": "chatcmpl-8PxrmN1G8cZlSmEliuAoegSBgKcvP", "object": "chat.completion", "created": 1701199018, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[56, 1, 14, 59, 101, 57, 58, 26, 27, 15, 60, 11, 104, 83, 105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1514, "completion_tokens": 45, "total_tokens": 1559 } }

{'id': 'chatcmpl-8PxrmN1G8cZlSmEliuAoegSBgKcvP', 'object': 'chat.completion', 'created': 1701199018, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[56, 1, 14, 59, 101, 57, 58, 26, 27, 15, 60, 11, 104, 83, 105]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1514, 'completion_tokens': 45, 'total_tokens': 1559}}
Altering:  [56, 1, 14, 59, 101, 57, 58, 26, 27, 15, 60, 11, 104, 83, 105]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.tile(input, multiples) ], weight= 8
Operation  11 : [ tf.greater_equal(x, y) ], weight= 9
Operation  12 : [ tf.minimum(x, y) ], weight= 9
Operation  13 : [ tf.concat(values, axis) ], weight= 10
Operation  14 : [ tf.not_equal(x, y) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  37 : [ tf.zeros_like(input) ], weight= 32
Operation  38 : [ IndexingAxis1Operation ], weight= 32
Operation  39 : [ IndexingOperation ], weight= 32
Operation  40 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[15 10]
 [20 -5]], shape=(2, 2), dtype=int32)

Input 'in2':
tf.Tensor(
[[ 2  3  1]
 [-2  5  0]], shape=(2, 3), dtype=int32)

Output:
tf.Tensor(
[[[ 30  45  15]
  [ 20  30  10]]

 [[-40 100   0]
  [ 10 -25   0]]], shape=(2, 2, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: perform matrix multiplication

Searching...

Found solution: tf.transpose(tf.multiply(tf.transpose(in1), tf.expand_dims(tf.transpose(in2), 1)))

Solution was found in 10.9 seconds:
tf.transpose(tf.multiply(tf.transpose(in1), tf.expand_dims(tf.transpose(in2), 1)))
Found in  10.9046982750001 s!
[2.6304693910001333, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 12.926215972000136, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 70.6739105239999, 107.65597702399964, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 36  --  tf.math.bincount(in1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1]], output=[4, 3, 0, 1, 3])] description = count the number of occurences of each distinct number constants = []
{ "id": "chatcmpl-8PxrwXt8zFUVtGCv0CtiFzjlmqIMl", "object": "chat.completion", "created": 1701199028, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[28, 11, 83, 92, 1, 14, 59, 101, 56, 16, 36, 96, 97, 26, 27]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1499, "completion_tokens": 45, "total_tokens": 1544 } }

{'id': 'chatcmpl-8PxrwXt8zFUVtGCv0CtiFzjlmqIMl', 'object': 'chat.completion', 'created': 1701199028, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[28, 11, 83, 92, 1, 14, 59, 101, 56, 16, 36, 96, 97, 26, 27]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1499, 'completion_tokens': 45, 'total_tokens': 1544}}
Altering:  [28, 11, 83, 92, 1, 14, 59, 101, 56, 16, 36, 96, 97, 26, 27]

Reweighted:
Operation  0 : [ tf.greater(x, y) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.add(x, y) ], weight= 8
Operation  4 : [ tf.divide(x, y) ], weight= 8
Operation  5 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  6 : [ tf.square(x) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.greater_equal(x, y) ], weight= 9
Operation  9 : [ tf.concat(values, axis) ], weight= 10
Operation  10 : [ tf.shape(input) ], weight= 10
Operation  11 : [ tf.math.bincount(arr) ], weight= 12
Operation  12 : [ tf.exp(x) ], weight= 15
Operation  13 : [ tf.math.log(x) ], weight= 15
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.sqrt(x) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  30 : [ tf.transpose(a) ], weight= 24
Operation  31 : [ tf.where(condition) ], weight= 24
Operation  32 : [ tf.where(condition, x, y) ], weight= 24
Operation  33 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  34 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  35 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  36 : [ tf.range(start) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.minimum(x, y) ], weight= 32
Operation  40 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  41 : [ tf.zeros_like(input) ], weight= 32
Operation  42 : [ IndexingAxis1Operation ], weight= 32
Operation  43 : [ IndexingOperation ], weight= 32
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([4 0 1 1 0 4 0 0 3 4 1], shape=(11,), dtype=int32)

Output:
tf.Tensor([4 3 0 1 3], shape=(5,), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 11]

Description: count the number of occurences of each distinct number

Searching...

Found solution: tf.math.bincount(in1)

Solution was found in 3.1 seconds:
tf.math.bincount(in1)
Found in  3.0892288730001383 s!
[2.6304693910001333, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 12.926215972000136, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 70.6739105239999, 107.65597702399964, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 37  --  tf.gather(in1, (0, 2), axis=1, batch_dims=0)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[12, 34, 56], [33, 22, 11]]], output=[[12, 56], [33, 11]])] description = remove a column from the tensor constants = [0, 1, 2]
{ "id": "chatcmpl-8PxrzGJZM91zi0HRTlXXEjIBuQhST", "object": "chat.completion", "created": 1701199031, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 98, 105, 1, 59, 101, 14, 57, 58, 72, 74, 76, 77, 79, 80]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1487, "completion_tokens": 45, "total_tokens": 1532 } }

{'id': 'chatcmpl-8PxrzGJZM91zi0HRTlXXEjIBuQhST', 'object': 'chat.completion', 'created': 1701199031, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 98, 105, 1, 59, 101, 14, 57, 58, 72, 74, 76, 77, 79, 80]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1487, 'completion_tokens': 45, 'total_tokens': 1532}}
Altering:  [83, 98, 105, 1, 59, 101, 14, 57, 58, 72, 74, 76, 77, 79, 80]

Reweighted:
Operation  0 : [ tf.maximum(x, y) ], weight= 7
Operation  1 : [ tf.multiply(x, y) ], weight= 7
Operation  2 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  3 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.squeeze(input) ], weight= 11
Operation  12 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  13 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  14 : [ tf.reduce_min(input_tensor, axis) ], weight= 12
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.matmul(a, b) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[12 34 56]
 [33 22 11]], shape=(2, 3), dtype=int32)

Output:
tf.Tensor(
[[12 56]
 [33 11]], shape=(2, 2), dtype=int32)

Constants: [0, 1, 2, -1, True, False, 3]

Description: remove a column from the tensor

Searching...

Found solution: tf.transpose(tf.gather(tf.transpose(in1), (0, 2)))

Solution was found in 57.2 seconds:
tf.transpose(tf.gather(tf.transpose(in1), (0, 2)))
Found in  57.220862238000336 s!
[2.6304693910001333, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 12.926215972000136, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 38  --  tf.tensordot(in1, in2, (1, 1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[3, 5], [10, 2]], [[[1, 0], [5, 4]], [[3, 10], [2, -2]]]], output=[[[28, 20], [19, 20]], [[20, 8], [34, 96]]])] description = multiply vectors by tensor constants = []
{ "id": "chatcmpl-8PxsvGlHSicWbfPqS5KeAd7CH7dtT", "object": "chat.completion", "created": 1701199089, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[59, 1, 101, 14, 57, 58, 83, 8, 56, 104, 105, 106, 11, 16, 36]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1508, "completion_tokens": 45, "total_tokens": 1553 } }

{'id': 'chatcmpl-8PxsvGlHSicWbfPqS5KeAd7CH7dtT', 'object': 'chat.completion', 'created': 1701199089, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[59, 1, 101, 14, 57, 58, 83, 8, 56, 104, 105, 106, 11, 16, 36]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1508, 'completion_tokens': 45, 'total_tokens': 1553}}
Altering:  [59, 1, 101, 14, 57, 58, 83, 8, 56, 104, 105, 106, 11, 16, 36]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.transpose(a) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.tile(input, multiples) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  12 : [ tf.transpose(a, perm) ], weight= 13
Operation  13 : [ tf.exp(x) ], weight= 15
Operation  14 : [ tf.math.log(x) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.zeros(shape) ], weight= 40
Operation  73 : [ tf.add_n(inputs) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 3  5]
 [10  2]], shape=(2, 2), dtype=int32)

Input 'in2':
tf.Tensor(
[[[ 1  0]
  [ 5  4]]

 [[ 3 10]
  [ 2 -2]]], shape=(2, 2, 2), dtype=int32)

Output:
tf.Tensor(
[[[28 20]
  [19 20]]

 [[20  8]
  [34 96]]], shape=(2, 2, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2]

Description: multiply vectors by tensor

Searching...

Found solution: tf.tensordot(in1, in2, (1, 1))

Solution was found in 123.5 seconds:
tf.tensordot(in1, in2, (1, 1))
Found in  123.52271150200022 s!
[2.6304693910001333, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 12.926215972000136, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 39  --  tf.reduce_any(in1, axis=-1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[[False, False, True], [False, False, False], [True, False, True], [False, True, False], [False, False, False], [True, True, True], [True, True, False]]]], output=[[True, False, True, True, False, True, True]])] description = choose True if any value in a row is True, False otherwise constants = []
{ "id": "chatcmpl-8PxuvGff0sTUnGqqTKNgxaCnqcay8", "object": "chat.completion", "created": 1701199213, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[70, 21, 11, 83, 8, 1, 14, 59, 101, 57, 58, 15, 60, 26, 27]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1521, "completion_tokens": 45, "total_tokens": 1566 } }

{'id': 'chatcmpl-8PxuvGff0sTUnGqqTKNgxaCnqcay8', 'object': 'chat.completion', 'created': 1701199213, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[70, 21, 11, 83, 8, 1, 14, 59, 101, 57, 58, 15, 60, 26, 27]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1521, 'completion_tokens': 45, 'total_tokens': 1566}}
Altering:  [70, 21, 11, 83, 8, 1, 14, 59, 101, 57, 58, 15, 60, 26, 27]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.greater_equal(x, y) ], weight= 9
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.fill(dims, value) ], weight= 12
Operation  12 : [ tf.reduce_any(input_tensor, axis) ], weight= 12
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.not_equal(x, y) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.matmul(a, b) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[[False False  True]
  [False False False]
  [ True False  True]
  [False  True False]
  [False False False]
  [ True  True  True]
  [ True  True False]]], shape=(1, 7, 3), dtype=bool)

Output:
tf.Tensor([[ True False  True  True False  True  True]], shape=(1, 7), dtype=bool)

Constants: [0, 1, -1, True, False, 2, 3, 7]

Description: choose True if any value in a row is True, False otherwise

Searching...

Found solution: tf.reduce_any(in1, axis=-1)

Solution was found in 2.4 seconds:
tf.reduce_any(in1, axis=-1)
Found in  2.3809033979996457 s!
[2.3809033979996457, 2.6304693910001333, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 12.926215972000136, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 40  --  tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[3, 1, 2, 0, 1, -1, 10, 1, -10]], output=[3, 0, 2, 0, 0, -1, 10, 0, -10])] description = set all instances of 1 to 0 constants = [0, 1]
{ "id": "chatcmpl-8PxuyxJAJt1gXSb5wc5fIuhv5v6oK", "object": "chat.completion", "created": 1701199216, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 15, 59, 56, 11, 83, 101, 14, 0, 105, 58, 57, 79, 80, 73]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1508, "completion_tokens": 45, "total_tokens": 1553 } }

{'id': 'chatcmpl-8PxuyxJAJt1gXSb5wc5fIuhv5v6oK', 'object': 'chat.completion', 'created': 1701199216, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 15, 59, 56, 11, 83, 101, 14, 0, 105, 58, 57, 79, 80, 73]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1508, 'completion_tokens': 45, 'total_tokens': 1553}}
Altering:  [1, 15, 59, 56, 11, 83, 101, 14, 0, 105, 58, 57, 79, 80, 73]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_max(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  6 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  7 : [ tf.transpose(a) ], weight= 7
Operation  8 : [ tf.add(x, y) ], weight= 8
Operation  9 : [ tf.divide(x, y) ], weight= 8
Operation  10 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  11 : [ tf.subtract(x, y) ], weight= 8
Operation  12 : [ tf.minimum(x, y) ], weight= 9
Operation  13 : [ tf.concat(values, axis) ], weight= 10
Operation  14 : [ tf.abs(x) ], weight= 12
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  26 : [ tf.where(condition) ], weight= 24
Operation  27 : [ tf.where(condition, x, y) ], weight= 24
Operation  28 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  29 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  30 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  31 : [ tf.range(start) ], weight= 28
Operation  32 : [ tf.square(x) ], weight= 28
Operation  33 : [ tf.tile(input, multiples) ], weight= 28
Operation  34 : [ tf.argmax(input, axis) ], weight= 32
Operation  35 : [ tf.greater_equal(x, y) ], weight= 32
Operation  36 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  37 : [ tf.zeros_like(input) ], weight= 32
Operation  38 : [ IndexingAxis1Operation ], weight= 32
Operation  39 : [ IndexingOperation ], weight= 32
Operation  40 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([  3   1   2   0   1  -1  10   1 -10], shape=(9,), dtype=int32)

Output:
tf.Tensor([  3   0   2   0   0  -1  10   0 -10], shape=(9,), dtype=int32)

Constants: [0, 1, -1, True, False, 9]

Description: set all instances of 1 to 0

Searching...

Found solution: tf.minimum(in1, tf.subtract(tf.multiply(in1, in1), in1))

Solution was found in 3.1 seconds:
tf.minimum(in1, tf.subtract(tf.multiply(in1, in1), in1))
Found in  3.148279413000182 s!
[2.3809033979996457, 2.6304693910001333, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 12.926215972000136, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 41  --  tf.multiply(in1, tf.expand_dims(in2, 1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[2, 5], [3, 0], [8, -7]], [4, 10, -6]], output=[[8, 20], [30, 0], [-48, 42]])] description = multiply tensors across the first axis constants = []
{ "id": "chatcmpl-8Pxv1MNvS5Z5Zzn9VB4g4ZrFeVIQS", "object": "chat.completion", "created": 1701199219, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[59, 1, 11, 56, 83, 105, 17, 8, 80, 72, 76, 74, 101, 14, 16]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1493, "completion_tokens": 45, "total_tokens": 1538 } }

{'id': 'chatcmpl-8Pxv1MNvS5Z5Zzn9VB4g4ZrFeVIQS', 'object': 'chat.completion', 'created': 1701199219, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[59, 1, 11, 56, 83, 105, 17, 8, 80, 72, 76, 74, 101, 14, 16]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1493, 'completion_tokens': 45, 'total_tokens': 1538}}
Altering:  [59, 1, 11, 56, 83, 105, 17, 8, 80, 72, 76, 74, 101, 14, 16]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  12 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.exp(x) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 2  5]
 [ 3  0]
 [ 8 -7]], shape=(3, 2), dtype=int32)

Input 'in2':
tf.Tensor([ 4 10 -6], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[  8  20]
 [ 30   0]
 [-48  42]], shape=(3, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: multiply tensors across the first axis

Searching...

Found solution: tf.multiply(in1, tf.expand_dims(in2, 1))

Solution was found in 2.9 seconds:
tf.multiply(in1, tf.expand_dims(in2, 1))
Found in  2.8565072619999228 s!
[2.3809033979996457, 2.6304693910001333, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 12.926215972000136, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 42  --  tf.stack((in1, in1), axis=1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[17, -32, 99]], output=[[17, 17], [-32, -32], [99, 99]])] description = duplicate each element of a tensor constants = []
{ "id": "chatcmpl-8Pxv4xnsQ93FPVDDzOWBwDs2J70zt", "object": "chat.completion", "created": 1701199222, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 11, 83, 81, 56, 8, 105, 106, 14, 59, 101, 9, 19, 62, 111]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1474, "completion_tokens": 45, "total_tokens": 1519 } }

{'id': 'chatcmpl-8Pxv4xnsQ93FPVDDzOWBwDs2J70zt', 'object': 'chat.completion', 'created': 1701199222, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 11, 83, 81, 56, 8, 105, 106, 14, 59, 101, 9, 19, 62, 111]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1474, 'completion_tokens': 45, 'total_tokens': 1519}}
Altering:  [1, 11, 83, 81, 56, 8, 105, 106, 14, 59, 101, 9, 19, 62, 111]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.transpose(a) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.concat(values, axis) ], weight= 10
Operation  9 : [ tf.zeros(shape) ], weight= 12
Operation  10 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  11 : [ tf.ones(shape) ], weight= 13
Operation  12 : [ tf.transpose(a, perm) ], weight= 13
Operation  13 : [ tf.repeat(input, repeats) ], weight= 16
Operation  14 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  15 : [ tf.eye(num_rows, num_columns) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.minimum(x, y) ], weight= 32
Operation  41 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingAxis1Operation ], weight= 32
Operation  44 : [ IndexingOperation ], weight= 32
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.shape(input) ], weight= 36
Operation  48 : [ tf.stack(values, axis) ], weight= 36
Operation  49 : [ SlicingAxis0BothOperation ], weight= 36
Operation  50 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis0RightOperation ], weight= 36
Operation  52 : [ SlicingAxis1BothOperation ], weight= 36
Operation  53 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  54 : [ SlicingAxis1RightOperation ], weight= 36
Operation  55 : [ TripleCreationOperation ], weight= 36
Operation  56 : [ tf.squeeze(input) ], weight= 38
Operation  57 : [ tf.abs(x) ], weight= 40
Operation  58 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  59 : [ tf.eye(num_rows) ], weight= 40
Operation  60 : [ tf.fill(dims, value) ], weight= 40
Operation  61 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  62 : [ tf.math.bincount(arr) ], weight= 40
Operation  63 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  67 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  68 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  72 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  73 : [ tf.unstack(value, axis) ], weight= 40
Operation  74 : [ tf.add_n(inputs) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  80 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  81 : [ tf.not_equal(x, y) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.exp(x) ], weight= 52
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.log(x) ], weight= 52
Operation  101 : [ tf.math.reciprocal(x) ], weight= 52
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.sort(values, axis) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.range(start, limit, delta) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([ 17 -32  99], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[ 17  17]
 [-32 -32]
 [ 99  99]], shape=(3, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: duplicate each element of a tensor

Searching...

Found solution: tf.transpose(tf.cast((in1, in1), tf.int32))

Solution was found in 2.8 seconds:
tf.transpose(tf.cast((in1, in1), tf.int32))
Found in  2.787692562999837 s!
[2.3809033979996457, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 12.926215972000136, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 43  --  tf.add(in3, tf.matmul(in1, in2))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], [[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], [100, 200, 300, 400]], output=[[[107, 209, 311, 413], [106, 207, 308, 409]], [[118, 223, 328, 433], [139, 250, 361, 472]]])] description = multiply 3D tensor and 2D tensor and add another tensor constants = []
{ "id": "chatcmpl-8Pxv7pE9oWop9RVzwz9z3pXoukOJS", "object": "chat.completion", "created": 1701199225, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[59, 1, 83, 11, 105, 56, 92, 22, 24, 14, 101, 9, 78, 80, 102]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1591, "completion_tokens": 45, "total_tokens": 1636 } }

{'id': 'chatcmpl-8Pxv7pE9oWop9RVzwz9z3pXoukOJS', 'object': 'chat.completion', 'created': 1701199225, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[59, 1, 83, 11, 105, 56, 92, 22, 24, 14, 101, 9, 78, 80, 102]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1591, 'completion_tokens': 45, 'total_tokens': 1636}}
Altering:  [59, 1, 83, 11, 105, 56, 92, 22, 24, 14, 101, 9, 78, 80, 102]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.shape(input) ], weight= 10
Operation  13 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 13
Operation  14 : [ tf.reduce_prod(input_tensor, axis) ], weight= 15
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[[1 1 1]
  [1 0 1]]

 [[1 2 3]
  [4 5 6]]], shape=(2, 2, 3), dtype=int32)

Input 'in2':
tf.Tensor(
[[1 1 1 1]
 [1 2 3 4]
 [5 6 7 8]], shape=(3, 4), dtype=int32)

Input 'in3':
tf.Tensor([100 200 300 400], shape=(4,), dtype=int32)

Output:
tf.Tensor(
[[[107 209 311 413]
  [106 207 308 409]]

 [[118 223 328 433]
  [139 250 361 472]]], shape=(2, 2, 4), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 4]

Description: multiply 3D tensor and 2D tensor and add another tensor

Searching...

Found solution: tf.add(in3, tf.matmul(in1, in2))

Solution was found in 2.6 seconds:
tf.add(in3, tf.matmul(in1, in2))
Found in  2.5983521369998925 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 12.926215972000136, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 44  --  tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]]], output=[[0, 5, 1], [1, 0, 4], [1, 1, 2], [1, 2, 3], [2, 1, 0], [2, 3, 1], [3, 1, 2]])] description = sort a tensor considering the first column, breaking ties using the second column constants = []
{ "id": "chatcmpl-8Pxv9CQgd3vDLU5QZHcOb92LtyAaU", "object": "chat.completion", "created": 1701199227, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[94, 5, 6, 11, 83, 1, 59, 14, 101, 57, 58, 26, 27, 15, 60]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1583, "completion_tokens": 45, "total_tokens": 1628 } }

{'id': 'chatcmpl-8Pxv9CQgd3vDLU5QZHcOb92LtyAaU', 'object': 'chat.completion', 'created': 1701199227, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[94, 5, 6, 11, 83, 1, 59, 14, 101, 57, 58, 26, 27, 15, 60]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1583, 'completion_tokens': 45, 'total_tokens': 1628}}
Altering:  [94, 5, 6, 11, 83, 1, 59, 14, 101, 57, 58, 26, 27, 15, 60]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.greater_equal(x, y) ], weight= 9
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.argsort(values, axis, stable=True) ], weight= 12
Operation  12 : [ tf.not_equal(x, y) ], weight= 13
Operation  13 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 14
Operation  14 : [ tf.sort(values, axis) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.matmul(a, b) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[3 1 2]
 [1 0 4]
 [1 2 3]
 [0 5 1]
 [1 1 2]
 [2 3 1]
 [2 1 0]], shape=(7, 3), dtype=int32)

Output:
tf.Tensor(
[[0 5 1]
 [1 0 4]
 [1 1 2]
 [1 2 3]
 [2 1 0]
 [2 3 1]
 [3 1 2]], shape=(7, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 7]

Description: sort a tensor considering the first column, breaking ties using the second column

Searching...

Could not find solution within 300 seconds.
Found in  301.3600095789998 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 12.926215972000136, 18.517070384000135, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 45  --  tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]]], output=[[1, 0, 0], [0, 1, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1]])] description = compute argmax in each tensor and set it to 1 constants = []
{ "id": "chatcmpl-8Py02eqrb2NufoWwiA7GZbChHcogM", "object": "chat.completion", "created": 1701199530, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[3, 1, 14, 59, 101, 57, 58, 83, 105, 11, 56, 16, 36, 96, 97]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1575, "completion_tokens": 45, "total_tokens": 1620 } }

{'id': 'chatcmpl-8Py02eqrb2NufoWwiA7GZbChHcogM', 'object': 'chat.completion', 'created': 1701199530, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[3, 1, 14, 59, 101, 57, 58, 83, 105, 11, 56, 16, 36, 96, 97]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1575, 'completion_tokens': 45, 'total_tokens': 1620}}
Altering:  [3, 1, 14, 59, 101, 57, 58, 83, 105, 11, 56, 16, 36, 96, 97]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.transpose(a) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.square(x) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.argmax(input, axis) ], weight= 9
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.exp(x) ], weight= 15
Operation  13 : [ tf.math.log(x) ], weight= 15
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.sqrt(x) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[0.7 0.2 0.1]
 [0.4 0.5 0.1]
 [0.4 0.4 0.2]
 [0.3 0.4 0.3]
 [0.  0.  1. ]], shape=(5, 3), dtype=float32)

Output:
tf.Tensor(
[[1 0 0]
 [0 1 0]
 [1 0 0]
 [0 1 0]
 [0 0 1]], shape=(5, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 5]

Description: compute argmax in each tensor and set it to 1

Searching...

Found solution: tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)

Solution was found in 22.4 seconds:
tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)
Found in  22.372072675000254 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 12.926215972000136, 18.517070384000135, 22.372072675000254, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 46  --  tf.gather(in2, in1, axis=1, batch_dims=1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[2], [0], [1], [0]], [[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]]], output=[[0.3], [0.1], [0.6], [0.7]])] description = gather elements in a tensor along axis 1 constants = []
{ "id": "chatcmpl-8Py0PDwTx7t25R8ccuebj5wFuwmzy", "object": "chat.completion", "created": 1701199553, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 56, 9, 83, 11, 100, 24, 8, 22, 103, 105, 81]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1544, "completion_tokens": 45, "total_tokens": 1589 } }

{'id': 'chatcmpl-8Py0PDwTx7t25R8ccuebj5wFuwmzy', 'object': 'chat.completion', 'created': 1701199553, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 101, 56, 9, 83, 11, 100, 24, 8, 22, 103, 105, 81]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1544, 'completion_tokens': 45, 'total_tokens': 1589}}
Altering:  [1, 14, 59, 101, 56, 9, 83, 11, 100, 24, 8, 22, 103, 105, 81]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.stack(values, axis) ], weight= 10
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.repeat(input, repeats) ], weight= 16
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[2]
 [0]
 [1]
 [0]], shape=(4, 1), dtype=int32)

Input 'in2':
tf.Tensor(
[[0.2 0.5 0.3]
 [0.1 0.3 0.6]
 [0.1 0.6 0.3]
 [0.7 0.  0.3]], shape=(4, 3), dtype=float32)

Output:
tf.Tensor(
[[0.3]
 [0.1]
 [0.6]
 [0.7]], shape=(4, 1), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4]

Description: gather elements in a tensor along axis 1

Searching...

Found solution: tf.gather(in2, in1, axis=1, batch_dims=1)

Solution was found in 19.8 seconds:
tf.gather(in2, in1, axis=1, batch_dims=1)
Found in  19.79564001100016 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 12.926215972000136, 18.517070384000135, 19.79564001100016, 22.372072675000254, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 47  --  tf.tensordot(tf.cast(in1, tf.float32), in2, 1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[3, 1, 10], [[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]]], output=[32.3, 42.2])] description = multiply a vector with a matrix without reshaping the vector constants = []
{ "id": "chatcmpl-8Py0iKm51AscsFZJv1OoZaUxX0lRY", "object": "chat.completion", "created": 1701199572, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[59, 83, 1, 14, 56, 8, 101, 74, 105, 72, 76, 80, 17, 98, 100]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1501, "completion_tokens": 45, "total_tokens": 1546 } }

{'id': 'chatcmpl-8Py0iKm51AscsFZJv1OoZaUxX0lRY', 'object': 'chat.completion', 'created': 1701199572, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[59, 83, 1, 14, 56, 8, 101, 74, 105, 72, 76, 80, 17, 98, 100]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1501, 'completion_tokens': 45, 'total_tokens': 1546}}
Altering:  [59, 83, 1, 14, 56, 8, 101, 74, 105, 72, 76, 80, 17, 98, 100]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.stack(values, axis) ], weight= 10
Operation  11 : [ tf.squeeze(input) ], weight= 11
Operation  12 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  13 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  14 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([ 3  1 10], shape=(3,), dtype=int32)

Input 'in2':
tf.Tensor(
[[0.6 0.4]
 [0.5 1. ]
 [3.  4. ]], shape=(3, 2), dtype=float32)

Output:
tf.Tensor([32.3 42.2], shape=(2,), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: multiply a vector with a matrix without reshaping the vector

Searching...

Found solution: tf.reduce_sum(tf.multiply(tf.transpose(in2), tf.cast(in1, tf.float32)), axis=1)

Solution was found in 11.8 seconds:
tf.reduce_sum(tf.multiply(tf.transpose(in2), tf.cast(in1, tf.float32)), axis=1)
Found in  11.753776261999974 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 11.753776261999974, 12.926215972000136, 18.517070384000135, 19.79564001100016, 22.372072675000254, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 48  --  tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[0, 5, 2], [3, 1, 4], [5, 1, 5]]], output=[[1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0]])] description = place 1 at the indices in the input tensor constants = []
{ "id": "chatcmpl-8Py0uY8bR1o8X2zLInnOWeiJHCYqx", "object": "chat.completion", "created": 1701199584, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 56, 11, 74, 80, 77, 72, 103, 22, 24, 87, 102]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1561, "completion_tokens": 45, "total_tokens": 1606 } }

{'id': 'chatcmpl-8Py0uY8bR1o8X2zLInnOWeiJHCYqx', 'object': 'chat.completion', 'created': 1701199584, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 101, 56, 11, 74, 80, 77, 72, 103, 22, 24, 87, 102]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1561, 'completion_tokens': 45, 'total_tokens': 1606}}
Altering:  [1, 14, 59, 101, 56, 11, 74, 80, 77, 72, 103, 22, 24, 87, 102]

Reweighted:
Operation  0 : [ tf.gather(params, indices) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  12 : [ tf.reduce_min(input_tensor, axis) ], weight= 12
Operation  13 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 13
Operation  14 : [ tf.scatter_nd(indices, updates, shape) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[0 5 2]
 [3 1 4]
 [5 1 5]], shape=(3, 3), dtype=int32)

Output:
tf.Tensor(
[[1 0 1 0 0 1 0 0 0]
 [0 1 0 1 1 0 0 0 0]
 [0 1 0 0 0 1 0 0 0]], shape=(3, 9), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 9]

Description: place 1 at the indices in the input tensor

Searching...

Found solution: tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)

Solution was found in 130.7 seconds:
tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)
Found in  130.70833711900013 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 11.753776261999974, 12.926215972000136, 18.517070384000135, 19.79564001100016, 22.372072675000254, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 130.70833711900013, 178.64823744399996, 219.85008347, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 49  --  tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[3.0, 1.0, 4.0, 5.0, 2.0, 8.0, -6.0, -7.0], [0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0]], output=[6.0, 1.0, -2.0, 5.0, 2.0, -8.0, -6.0, -3.5])] description = like tf.divide(), but when dividing by 0, return the numerator constants = [0]
{ "id": "chatcmpl-8Py32kOUA12GHtDauh4WjmTmGLP74", "object": "chat.completion", "created": 1701199716, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[14, 34, 1, 101, 59, 57, 58, 79, 74, 72, 76, 83, 105, 8, 62]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1576, "completion_tokens": 45, "total_tokens": 1621 } }

{'id': 'chatcmpl-8Py32kOUA12GHtDauh4WjmTmGLP74', 'object': 'chat.completion', 'created': 1701199716, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[14, 34, 1, 101, 59, 57, 58, 79, 74, 72, 76, 83, 105, 8, 62]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1576, 'completion_tokens': 45, 'total_tokens': 1621}}
Altering:  [14, 34, 1, 101, 59, 57, 58, 79, 74, 72, 76, 83, 105, 8, 62]

Reweighted:
Operation  0 : [ tf.maximum(x, y) ], weight= 7
Operation  1 : [ tf.multiply(x, y) ], weight= 7
Operation  2 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  3 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  11 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  12 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  13 : [ tf.ones(shape) ], weight= 13
Operation  14 : [ tf.math.divide_no_nan(x, y) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.matmul(a, b) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.fill(dims, value) ], weight= 40
Operation  60 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  61 : [ tf.math.bincount(arr) ], weight= 40
Operation  62 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([ 3.  1.  4.  5.  2.  8. -6. -7.], shape=(8,), dtype=float32)

Input 'in2':
tf.Tensor([ 0.5  0.  -2.   0.   1.  -1.   0.   2. ], shape=(8,), dtype=float32)

Output:
tf.Tensor([ 6.   1.  -2.   5.   2.  -8.  -6.  -3.5], shape=(8,), dtype=float32)

Constants: [0, 1, -1, True, False, 8]

Description: like tf.divide(), but when dividing by 0, return the numerator

Searching...

Found solution: tf.add(in1, tf.math.divide_no_nan(tf.subtract(in1, tf.multiply(in1, in2)), in2))

Solution was found in 253.0 seconds:
tf.add(in1, tf.math.divide_no_nan(tf.subtract(in1, tf.multiply(in1, in2)), in2))
Found in  253.0626362099997 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 11.753776261999974, 12.926215972000136, 18.517070384000135, 19.79564001100016, 22.372072675000254, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 130.70833711900013, 178.64823744399996, 219.85008347, 253.0626362099997, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 50  --  tf.tile(tf.eye(in1), (in2, 1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[3, 4], output=[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]])] description = copy the tensor tf.eye(3), 4 times constants = []
{ "id": "chatcmpl-8Py7AXgUreWQr1CKsLFMrRVUx9Lph", "object": "chat.completion", "created": 1701199972, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[18, 104, 83, 1, 101, 59, 14, 57, 58, 111, 62, 21, 12, 102, 87]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1638, "completion_tokens": 45, "total_tokens": 1683 } }

{'id': 'chatcmpl-8Py7AXgUreWQr1CKsLFMrRVUx9Lph', 'object': 'chat.completion', 'created': 1701199972, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[18, 104, 83, 1, 101, 59, 14, 57, 58, 111, 62, 21, 12, 102, 87]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1638, 'completion_tokens': 45, 'total_tokens': 1683}}
Altering:  [18, 104, 83, 1, 101, 59, 14, 57, 58, 111, 62, 21, 12, 102, 87]

Reweighted:
Operation  0 : [ tf.constant(value) ], weight= 6
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.add(x, y) ], weight= 8
Operation  4 : [ tf.divide(x, y) ], weight= 8
Operation  5 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  6 : [ tf.subtract(x, y) ], weight= 8
Operation  7 : [ tf.tile(input, multiples) ], weight= 8
Operation  8 : [ tf.minimum(x, y) ], weight= 9
Operation  9 : [ tf.eye(num_rows) ], weight= 12
Operation  10 : [ tf.fill(dims, value) ], weight= 12
Operation  11 : [ tf.zeros(shape) ], weight= 12
Operation  12 : [ tf.ones(shape) ], weight= 13
Operation  13 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 13
Operation  14 : [ tf.scatter_nd(indices, updates, shape) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.matmul(a, b) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  30 : [ tf.transpose(a) ], weight= 24
Operation  31 : [ tf.where(condition) ], weight= 24
Operation  32 : [ tf.where(condition, x, y) ], weight= 24
Operation  33 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  34 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  35 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  36 : [ tf.range(start) ], weight= 28
Operation  37 : [ tf.square(x) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  41 : [ tf.zeros_like(input) ], weight= 32
Operation  42 : [ IndexingAxis1Operation ], weight= 32
Operation  43 : [ IndexingOperation ], weight= 32
Operation  44 : [ tf.concat(values, axis) ], weight= 36
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.shape(input) ], weight= 36
Operation  48 : [ tf.stack(values, axis) ], weight= 36
Operation  49 : [ SlicingAxis0BothOperation ], weight= 36
Operation  50 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis0RightOperation ], weight= 36
Operation  52 : [ SlicingAxis1BothOperation ], weight= 36
Operation  53 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  54 : [ SlicingAxis1RightOperation ], weight= 36
Operation  55 : [ TripleCreationOperation ], weight= 36
Operation  56 : [ tf.squeeze(input) ], weight= 38
Operation  57 : [ tf.abs(x) ], weight= 40
Operation  58 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
3

Input 'in2':
4

Output:
tf.Tensor(
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]], shape=(12, 3), dtype=float32)

Constants: [0, 1, -1, True, False, 12]

Description: copy the tensor tf.eye(3), 4 times

Searching...

Found solution: tf.tile(tf.eye(in1), (in2, 1))

Solution was found in 4.8 seconds:
tf.tile(tf.eye(in1), (in2, 1))
Found in  4.821249545000683 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 4.821249545000683, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 11.753776261999974, 12.926215972000136, 18.517070384000135, 19.79564001100016, 22.372072675000254, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 130.70833711900013, 178.64823744399996, 219.85008347, 253.0626362099997, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 51  --  tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]], output=[10, -4, 33])] description = reduction operation for multiple dimensions simultaneously constants = []
{ "id": "chatcmpl-8Py7EXr7MzESuYJdx3zYXfFfURZN7", "object": "chat.completion", "created": 1701199976, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[72, 76, 74, 79, 71, 70, 56, 1, 14, 59, 101, 9, 83, 105, 8]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1494, "completion_tokens": 45, "total_tokens": 1539 } }

{'id': 'chatcmpl-8Py7EXr7MzESuYJdx3zYXfFfURZN7', 'object': 'chat.completion', 'created': 1701199976, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[72, 76, 74, 79, 71, 70, 56, 1, 14, 59, 101, 9, 83, 105, 8]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1494, 'completion_tokens': 45, 'total_tokens': 1539}}
Altering:  [72, 76, 74, 79, 71, 70, 56, 1, 14, 59, 101, 9, 83, 105, 8]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.reduce_any(input_tensor, axis) ], weight= 12
Operation  11 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  12 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.reduce_all(input_tensor, axis) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.fill(dims, value) ], weight= 40
Operation  60 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  61 : [ tf.math.bincount(arr) ], weight= 40
Operation  62 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[[  3   4]
  [  1   2]]

 [[  5  -2]
  [-10   3]]

 [[ 10  20]
  [ -4   7]]], shape=(3, 2, 2), dtype=int32)

Output:
tf.Tensor([10 -4 33], shape=(3,), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: reduction operation for multiple dimensions simultaneously

Searching...

Found solution: tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)

Solution was found in 22.3 seconds:
tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)
Found in  22.30840986200019 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 4.821249545000683, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.9046982750001, 11.753776261999974, 12.926215972000136, 18.517070384000135, 19.79564001100016, 22.30840986200019, 22.372072675000254, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 130.70833711900013, 178.64823744399996, 219.85008347, 253.0626362099997, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 52  --  tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[0, 3, 5, 6], 8], output=[1, 0, 0, 1, 0, 1, 1, 0])] description = boolean tensor with 1 at the indices in the input tensor constants = []
{ "id": "chatcmpl-8Py7bwOD8AKizeayQkR2wSXIUqL3D", "object": "chat.completion", "created": 1701199999, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[8, 1, 101, 59, 14, 56, 57, 58, 15, 60, 26, 27, 42, 36, 16]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1491, "completion_tokens": 45, "total_tokens": 1536 } }

{'id': 'chatcmpl-8Py7bwOD8AKizeayQkR2wSXIUqL3D', 'object': 'chat.completion', 'created': 1701199999, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[8, 1, 101, 59, 14, 56, 57, 58, 15, 60, 26, 27, 42, 36, 16]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1491, 'completion_tokens': 45, 'total_tokens': 1536}}
Altering:  [8, 1, 101, 59, 14, 56, 57, 58, 15, 60, 26, 27, 42, 36, 16]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.greater_equal(x, y) ], weight= 9
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  11 : [ tf.not_equal(x, y) ], weight= 13
Operation  12 : [ tf.exp(x) ], weight= 15
Operation  13 : [ tf.math.log(x) ], weight= 15
Operation  14 : [ tf.math.reciprocal(x) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.fill(dims, value) ], weight= 40
Operation  60 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  61 : [ tf.math.bincount(arr) ], weight= 40
Operation  62 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.unstack(value, axis) ], weight= 40
Operation  73 : [ tf.zeros(shape) ], weight= 40
Operation  74 : [ tf.add_n(inputs) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  80 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([0 3 5 6], shape=(4,), dtype=int32)

Input 'in2':
8

Output:
tf.Tensor([1 0 0 1 0 1 1 0], shape=(8,), dtype=int32)

Constants: [0, 1, -1, True, False, 4]

Description: boolean tensor with 1 at the indices in the input tensor

Searching...

Found solution: tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)

Solution was found in 10.6 seconds:
tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)
Found in  10.619392506999247 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 4.821249545000683, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.619392506999247, 10.9046982750001, 11.753776261999974, 12.926215972000136, 18.517070384000135, 19.79564001100016, 22.30840986200019, 22.372072675000254, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 130.70833711900013, 178.64823744399996, 219.85008347, 253.0626362099997, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 53  --  tf.squeeze(tf.gather(in1, tf.expand_dims(in2, 1), axis=-1, batch_dims=1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[[5, 3], [0, 2]], [[7, 4], [5, 1]], [[10, 20], [15, 30]], [[11, 16], [14, 12]], [[-2, -7], [-4, 6]]], [1, 0, 1, 1, 0]], output=[[3, 2], [7, 5], [20, 30], [16, 12], [-2, -4]])] description = extract columns from a 3D tensor given column indices constants = []
{ "id": "chatcmpl-8Py7laXSPb34r7R0cS81v316RMBSs", "object": "chat.completion", "created": 1701200009, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 22, 11, 14, 1, 101, 59, 57, 58, 72, 76, 74, 79, 56, 105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1561, "completion_tokens": 45, "total_tokens": 1606 } }

{'id': 'chatcmpl-8Py7laXSPb34r7R0cS81v316RMBSs', 'object': 'chat.completion', 'created': 1701200009, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 22, 11, 14, 1, 101, 59, 57, 58, 72, 76, 74, 79, 56, 105]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1561, 'completion_tokens': 45, 'total_tokens': 1606}}
Altering:  [83, 22, 11, 14, 1, 101, 59, 57, 58, 72, 76, 74, 79, 56, 105]

Reweighted:
Operation  0 : [ tf.gather(params, indices) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  14 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[[ 5  3]
  [ 0  2]]

 [[ 7  4]
  [ 5  1]]

 [[10 20]
  [15 30]]

 [[11 16]
  [14 12]]

 [[-2 -7]
  [-4  6]]], shape=(5, 2, 2), dtype=int32)

Input 'in2':
tf.Tensor([1 0 1 1 0], shape=(5,), dtype=int32)

Output:
tf.Tensor(
[[ 3  2]
 [ 7  5]
 [20 30]
 [16 12]
 [-2 -4]], shape=(5, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 5]

Description: extract columns from a 3D tensor given column indices

Searching...

Could not find solution within 300 seconds.
Found in  300.8844738030002 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 4.821249545000683, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.619392506999247, 10.9046982750001, 11.753776261999974, 12.926215972000136, 18.517070384000135, 19.79564001100016, 22.30840986200019, 22.372072675000254, 25.90471896400004, 28.989513696999893, 29.42273010200006, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 130.70833711900013, 178.64823744399996, 219.85008347, 253.0626362099997, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 300.8844738030002, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 54  --  tf.searchsorted(in1, in2, side='left')
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0], [0.1, -10, -0.1, 1.1, 0.41]], output=[6, 0, 5, 11, 8])] description = place continuous values into buckets given bucket boundaries constants = []
{ "id": "chatcmpl-8PyCfqkuZSgaa1cGoUqbtOdvK8RBr", "object": "chat.completion", "created": 1701200313, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 0, 16, 36, 96, 97, 26, 27, 15, 60, 57, 58]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1542, "completion_tokens": 45, "total_tokens": 1587 } }

{'id': 'chatcmpl-8PyCfqkuZSgaa1cGoUqbtOdvK8RBr', 'object': 'chat.completion', 'created': 1701200313, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 101, 0, 16, 36, 96, 97, 26, 27, 15, 60, 57, 58]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1542, 'completion_tokens': 45, 'total_tokens': 1587}}
Altering:  [1, 14, 59, 101, 0, 16, 36, 96, 97, 26, 27, 15, 60, 57, 58]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.square(x) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.greater_equal(x, y) ], weight= 9
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.abs(x) ], weight= 12
Operation  11 : [ tf.not_equal(x, y) ], weight= 13
Operation  12 : [ tf.exp(x) ], weight= 15
Operation  13 : [ tf.math.log(x) ], weight= 15
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.sqrt(x) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.matmul(a, b) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.zeros(shape) ], weight= 40
Operation  73 : [ tf.add_n(inputs) ], weight= 44
Operation  74 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  80 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([-1.  -0.8 -0.6 -0.4 -0.2  0.   0.2  0.4  0.6  0.8  1. ], shape=(11,), dtype=float32)

Input 'in2':
tf.Tensor([  0.1  -10.    -0.1    1.1    0.41], shape=(5,), dtype=float32)

Output:
tf.Tensor([ 6  0  5 11  8], shape=(5,), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 11]

Description: place continuous values into buckets given bucket boundaries

Searching...

Found solution: tf.searchsorted(in1, in2, side='left')

Solution was found in 35.9 seconds:
tf.searchsorted(in1, in2, side='left')
Found in  35.921284668000226 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 4.821249545000683, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.619392506999247, 10.9046982750001, 11.753776261999974, 12.926215972000136, 18.517070384000135, 19.79564001100016, 22.30840986200019, 22.372072675000254, 25.90471896400004, 28.989513696999893, 29.42273010200006, 35.921284668000226, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 130.70833711900013, 178.64823744399996, 219.85008347, 253.0626362099997, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 300.8844738030002, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 55  --  tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[9.0, 4.0], [8.0, 5.0], [7.0, 6.0]]], output=[[8.246211251235321, 7.615773105863909, 7.211102550927978], [6.0, 5.0990195135927845, 4.47213595499958], [4.47213595499958, 3.1622776601683795, 2.0]])] description = compute Euclidean distance between two tensors constants = []
{ "id": "chatcmpl-8PyDFe86RvVefOQXxgL3iMyT9ELbm", "object": "chat.completion", "created": 1701200349, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 97, 96, 83, 11, 105, 81, 36, 16, 9, 42, 101, 2]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1585, "completion_tokens": 45, "total_tokens": 1630 } }

{'id': 'chatcmpl-8PyDFe86RvVefOQXxgL3iMyT9ELbm', 'object': 'chat.completion', 'created': 1701200349, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 97, 96, 83, 11, 105, 81, 36, 16, 9, 42, 101, 2]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1585, 'completion_tokens': 45, 'total_tokens': 1630}}
Altering:  [1, 14, 59, 97, 96, 83, 11, 105, 81, 36, 16, 9, 42, 101, 2]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.multiply(x, y) ], weight= 7
Operation  2 : [ tf.transpose(a) ], weight= 7
Operation  3 : [ tf.add(x, y) ], weight= 8
Operation  4 : [ tf.divide(x, y) ], weight= 8
Operation  5 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  6 : [ tf.square(x) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.concat(values, axis) ], weight= 10
Operation  9 : [ tf.add_n(inputs) ], weight= 13
Operation  10 : [ tf.exp(x) ], weight= 15
Operation  11 : [ tf.math.log(x) ], weight= 15
Operation  12 : [ tf.math.reciprocal(x) ], weight= 15
Operation  13 : [ tf.repeat(input, repeats) ], weight= 16
Operation  14 : [ tf.sqrt(x) ], weight= 16
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.matmul(a, b) ], weight= 24
Operation  25 : [ tf.maximum(x, y) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  29 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  30 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  31 : [ tf.where(condition) ], weight= 24
Operation  32 : [ tf.where(condition, x, y) ], weight= 24
Operation  33 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  34 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  35 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  36 : [ tf.range(start) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.minimum(x, y) ], weight= 32
Operation  41 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingAxis1Operation ], weight= 32
Operation  44 : [ IndexingOperation ], weight= 32
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.shape(input) ], weight= 36
Operation  48 : [ tf.stack(values, axis) ], weight= 36
Operation  49 : [ SlicingAxis0BothOperation ], weight= 36
Operation  50 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis0RightOperation ], weight= 36
Operation  52 : [ SlicingAxis1BothOperation ], weight= 36
Operation  53 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  54 : [ SlicingAxis1RightOperation ], weight= 36
Operation  55 : [ TripleCreationOperation ], weight= 36
Operation  56 : [ tf.squeeze(input) ], weight= 38
Operation  57 : [ tf.abs(x) ], weight= 40
Operation  58 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  59 : [ tf.eye(num_rows) ], weight= 40
Operation  60 : [ tf.fill(dims, value) ], weight= 40
Operation  61 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  62 : [ tf.math.bincount(arr) ], weight= 40
Operation  63 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  67 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  68 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  72 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  73 : [ tf.unstack(value, axis) ], weight= 40
Operation  74 : [ tf.zeros(shape) ], weight= 40
Operation  75 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  76 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  77 : [ tf.math.ceil(x) ], weight= 44
Operation  78 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  79 : [ tf.math.floor(x) ], weight= 44
Operation  80 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  81 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  82 : [ tf.not_equal(x, y) ], weight= 44
Operation  83 : [ tf.ones(shape) ], weight= 44
Operation  84 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  85 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  86 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  87 : [ tf.transpose(a, perm) ], weight= 44
Operation  88 : [ tf.argmin(input, axis) ], weight= 48
Operation  89 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  90 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  91 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  92 : [ tf.math.logical_not(x) ], weight= 48
Operation  93 : [ tf.math.negative(x) ], weight= 48
Operation  94 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  95 : [ tf.math.top_k(input, k) ], weight= 48
Operation  96 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  97 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  98 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  99 : [ tf.sign(x) ], weight= 48
Operation  100 : [ tf.unique_with_counts(x) ], weight= 48
Operation  101 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.sort(values, axis) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.range(start, limit, delta) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[1. 2.]
 [3. 4.]
 [5. 6.]], shape=(3, 2), dtype=float32)

Input 'in2':
tf.Tensor(
[[9. 4.]
 [8. 5.]
 [7. 6.]], shape=(3, 2), dtype=float32)

Output:
tf.Tensor(
[[8.246211  7.615773  7.2111025]
 [6.        5.0990195 4.472136 ]
 [4.472136  3.1622777 2.       ]], shape=(3, 3), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: compute Euclidean distance between two tensors

Searching...

Could not find solution within 300 seconds.
Found in  300.8028725870008 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 4.821249545000683, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.619392506999247, 10.9046982750001, 11.753776261999974, 12.926215972000136, 18.517070384000135, 19.79564001100016, 22.30840986200019, 22.372072675000254, 25.90471896400004, 28.989513696999893, 29.42273010200006, 35.921284668000226, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 130.70833711900013, 178.64823744399996, 219.85008347, 253.0626362099997, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 300.8028725870008, 300.8844738030002, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 56  --  tf.reduce_sum(tf.square(tf.subtract(in2, tf.sparse.to_dense(in1))))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[<tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x7fb3ef668b80>, [[3.0, 1.0], [0.2, -1.0]]], output=5.29)] description = squared error between two tensors, one being a sparse tensor constants = []
{ "id": "chatcmpl-8PyI8QYvhyPI4mnCVQ2OCRNgUu78n", "object": "chat.completion", "created": 1701200652, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 49, 97, 58, 57, 101, 83, 105, 106, 11, 8, 100, 56]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1500, "completion_tokens": 45, "total_tokens": 1545 } }

{'id': 'chatcmpl-8PyI8QYvhyPI4mnCVQ2OCRNgUu78n', 'object': 'chat.completion', 'created': 1701200652, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 49, 97, 58, 57, 101, 83, 105, 106, 11, 8, 100, 56]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1500, 'completion_tokens': 45, 'total_tokens': 1545}}
Altering:  [1, 14, 59, 49, 97, 58, 57, 101, 83, 105, 106, 11, 8, 100, 56]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.transpose(a) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.square(x) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.stack(values, axis) ], weight= 10
Operation  12 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  13 : [ tf.transpose(a, perm) ], weight= 13
Operation  14 : [ tf.math.squared_difference(x, y) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ tf.SparseTensor(indices, values, dense_shape) ], weight= 20
Operation  18 : [ tf.sparse.from_dense(tensor) ], weight= 20
Operation  19 : [ tf.sparse.to_dense(sp_input) ], weight= 20
Operation  20 : [ PairCreationOperation ], weight= 20
Operation  21 : [ SingletonTupleCreationOperation ], weight= 20
Operation  22 : [ tf.constant(value) ], weight= 23
Operation  23 : [ tf.squeeze(input, axis) ], weight= 23
Operation  24 : [ tf.constant(value, dtype) ], weight= 24
Operation  25 : [ tf.equal(x, y) ], weight= 24
Operation  26 : [ tf.gather(params, indices) ], weight= 24
Operation  27 : [ tf.greater(x, y) ], weight= 24
Operation  28 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  29 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  30 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  31 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  32 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  33 : [ tf.where(condition) ], weight= 24
Operation  34 : [ tf.where(condition, x, y) ], weight= 24
Operation  35 : [ tf.sparse.expand_dims(sp_input, axis) ], weight= 24
Operation  36 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  37 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  38 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  39 : [ tf.range(start) ], weight= 28
Operation  40 : [ tf.tile(input, multiples) ], weight= 28
Operation  41 : [ tf.sparse.reduce_max(sp_input, axis, output_is_sparse) ], weight= 28
Operation  42 : [ tf.sparse.reduce_sum(sp_input, axis, output_is_sparse) ], weight= 28
Operation  43 : [ tf.argmax(input, axis) ], weight= 32
Operation  44 : [ tf.greater_equal(x, y) ], weight= 32
Operation  45 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  46 : [ tf.zeros_like(input) ], weight= 32
Operation  47 : [ tf.sparse.add(a, b) ], weight= 32
Operation  48 : [ tf.sparse.maximum(sp_a, sp_b) ], weight= 32
Operation  49 : [ tf.sparse.slice(sp_input, start, size) ], weight= 32
Operation  50 : [ tf.sparse.split(sp_input, num_split, axis) ], weight= 32
Operation  51 : [ IndexingAxis1Operation ], weight= 32
Operation  52 : [ IndexingOperation ], weight= 32
Operation  53 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  54 : [ tf.ones_like(input) ], weight= 36
Operation  55 : [ tf.shape(input) ], weight= 36
Operation  56 : [ tf.sparse.retain(sp_input, to_retain) ], weight= 36
Operation  57 : [ tf.sparse.to_dense(sp_input, default_value) ], weight= 36
Operation  58 : [ tf.sparse.transpose(sp_input) ], weight= 36
Operation  59 : [ SlicingAxis0BothOperation ], weight= 36
Operation  60 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  61 : [ SlicingAxis0RightOperation ], weight= 36
Operation  62 : [ SlicingAxis1BothOperation ], weight= 36
Operation  63 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  64 : [ SlicingAxis1RightOperation ], weight= 36
Operation  65 : [ TripleCreationOperation ], weight= 36
Operation  66 : [ tf.squeeze(input) ], weight= 38
Operation  67 : [ tf.abs(x) ], weight= 40
Operation  68 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  69 : [ tf.eye(num_rows) ], weight= 40
Operation  70 : [ tf.fill(dims, value) ], weight= 40
Operation  71 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  72 : [ tf.math.bincount(arr) ], weight= 40
Operation  73 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  74 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  75 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  76 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  77 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  78 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  79 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  80 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  81 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  82 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  83 : [ tf.unstack(value, axis) ], weight= 40
Operation  84 : [ tf.zeros(shape) ], weight= 40
Operation  85 : [ tf.sparse.concat(axis, sp_inputs) ], weight= 40
Operation  86 : [ tf.sparse.minimum(sp_a, sp_b) ], weight= 40
Operation  87 : [ tf.sparse.reset_shape(sp_input) ], weight= 40
Operation  88 : [ tf.sparse.reshape(sp_input, shape) ], weight= 40
Operation  89 : [ tf.add_n(inputs) ], weight= 44
Operation  90 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  91 : [ tf.math.ceil(x) ], weight= 44
Operation  92 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  93 : [ tf.math.floor(x) ], weight= 44
Operation  94 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  95 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  96 : [ tf.not_equal(x, y) ], weight= 44
Operation  97 : [ tf.ones(shape) ], weight= 44
Operation  98 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  99 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  100 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  101 : [ tf.sparse.to_indicator(sp_input, vocab_size) ], weight= 44
Operation  102 : [ tf.argmin(input, axis) ], weight= 48
Operation  103 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  104 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  105 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  106 : [ tf.math.logical_not(x) ], weight= 48
Operation  107 : [ tf.math.negative(x) ], weight= 48
Operation  108 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  109 : [ tf.math.top_k(input, k) ], weight= 48
Operation  110 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  111 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  112 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  113 : [ tf.sign(x) ], weight= 48
Operation  114 : [ tf.unique_with_counts(x) ], weight= 48
Operation  115 : [ tf.exp(x) ], weight= 52
Operation  116 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  117 : [ tf.math.log(x) ], weight= 52
Operation  118 : [ tf.math.reciprocal(x) ], weight= 52
Operation  119 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  120 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  121 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  122 : [ tf.round(x) ], weight= 52
Operation  123 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  124 : [ tf.sort(values, axis) ], weight= 52
Operation  125 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  126 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  127 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  128 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  129 : [ tf.range(start, limit, delta) ], weight= 56
Operation  130 : [ tf.repeat(input, repeats) ], weight= 56
Operation  131 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  132 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  133 : [ tf.sqrt(x) ], weight= 56
Operation  134 : [ tf.sparse.transpose(sp_input, perm) ], weight= 56
Operation  135 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  136 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  137 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  138 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  139 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  140 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  141 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  142 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]
 [1 1]], shape=(3, 2), dtype=int64), values=tf.Tensor([ 1.   1.5 -2. ], shape=(3,), dtype=float32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Input 'in2':
tf.Tensor(
[[ 3.   1. ]
 [ 0.2 -1. ]], shape=(2, 2), dtype=float32)

Output:
tf.Tensor(5.29, shape=(), dtype=float32)

Constants: [0, 1, -1, True, False, 2]

Description: squared error between two tensors, one being a sparse tensor

Searching...

Found solution: tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))

Solution was found in 28.9 seconds:
tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))
Found in  28.855307827000615 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 4.821249545000683, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.619392506999247, 10.9046982750001, 11.753776261999974, 12.926215972000136, 18.517070384000135, 19.79564001100016, 22.30840986200019, 22.372072675000254, 25.90471896400004, 28.855307827000615, 28.989513696999893, 29.42273010200006, 35.921284668000226, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 130.70833711900013, 178.64823744399996, 219.85008347, 253.0626362099997, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 300.8028725870008, 300.8844738030002, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 57  --  tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]]], output=[1.3, 1.5, 2.0])] description = weighted sum across rows, where the column index is the weight constants = []
{ "id": "chatcmpl-8PyIbSFGZl0tV9qxyDQ0HDlJt0z6b", "object": "chat.completion", "created": 1701200681, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 56, 11, 79, 80, 74, 75, 14, 101, 9, 83, 92, 57, 58]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1529, "completion_tokens": 45, "total_tokens": 1574 } }

{'id': 'chatcmpl-8PyIbSFGZl0tV9qxyDQ0HDlJt0z6b', 'object': 'chat.completion', 'created': 1701200681, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 59, 56, 11, 79, 80, 74, 75, 14, 101, 9, 83, 92, 57, 58]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1529, 'completion_tokens': 45, 'total_tokens': 1574}}
Altering:  [1, 59, 56, 11, 79, 80, 74, 75, 14, 101, 9, 83, 92, 57, 58]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.shape(input) ], weight= 10
Operation  13 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  14 : [ tf.reduce_mean(input_tensor, axis) ], weight= 12
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[0.1 0.6 0.2 0.1]
 [0.3 0.1 0.4 0.2]
 [0.2 0.1 0.2 0.5]], shape=(3, 4), dtype=float32)

Output:
tf.Tensor([1.3 1.5 2. ], shape=(3,), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4]

Description: weighted sum across rows, where the column index is the weight

Searching...

Found solution: tf.reduce_sum(tf.matmul(in1, tf.cast(tf.where(tf.reduce_sum(in1, axis=0)), tf.float32)), axis=1)

Solution was found in 161.1 seconds:
tf.reduce_sum(tf.matmul(in1, tf.cast(tf.where(tf.reduce_sum(in1, axis=0)), tf.float32)), axis=1)
Found in  161.11060812300002 s!
[2.3809033979996457, 2.5983521369998925, 2.6304693910001333, 2.787692562999837, 2.8565072619999228, 2.9580927080000947, 3.033315062000156, 3.0490382789998876, 3.056987118000052, 3.0892288730001383, 3.148279413000182, 3.3179832580000266, 3.3506939269999982, 3.5005284910000007, 3.570054990000017, 3.598936417000001, 4.396263466999999, 4.519948830999965, 4.699767347000034, 4.719615248999844, 4.821249545000683, 5.07118140099999, 5.540512747999969, 7.6394969939999555, 10.619392506999247, 10.9046982750001, 11.753776261999974, 12.926215972000136, 18.517070384000135, 19.79564001100016, 22.30840986200019, 22.372072675000254, 25.90471896400004, 28.855307827000615, 28.989513696999893, 29.42273010200006, 35.921284668000226, 47.633042718999974, 57.220862238000336, 70.6739105239999, 107.65597702399964, 123.52271150200022, 130.70833711900013, 161.11060812300002, 178.64823744399996, 219.85008347, 253.0626362099997, 267.53478624499996, 300.2143869319998, 300.369390159, 300.61143124399996, 300.8028725870008, 300.8844738030002, 301.3600095789998, 302.668201728, 306.0170476789999, 307.5279804060001, 310.10302116699995]
Benchmark # 58  --  tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[0.3, 0.1, 0.4], [0.1, 0.5, 0.9], [0.2, 0.6, 0.5], [0.3, 0.5, 0.8], [0.9, 0.7, 0.9]], [[0.3, 0.2, 0.3], [0.8, 0.4, 0.6], [0.2, 0.6, 0.4], [0.3, 0.3, 0.8]]], output=[0.02, 0.19, 0.01, 0.04])] description = find the minimum distance between two sets of points constants = []
{ "error": { "message": "Internal server error", "type": "auth_subrequest_error", "param": null, "code": "internal_error" } }

{'error': {'message': 'Internal server error', 'type': 'auth_subrequest_error', 'param': None, 'code': 'internal_error'}}
Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 68, in <module>
    app.run(main)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 308, in run
    _run_main(main, args)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 254, in _run_main
    sys.exit(main(argv))
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 60, in main
    time = run_tf_coder(bm.examples[0].inputs, bm.examples[0].output, bm.constants, bm.description, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 40, in run_tf_coder
    result = colab_interface.run_value_search_from_colab(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/colab_interface.py", line 105, in run_value_search_from_colab
    return value_search.run_value_search_from_example(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 727, in run_value_search_from_example
    return run_value_search(benchmark, settings, **kwargs)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 661, in run_value_search
    operations = get_reweighted_operations_gpt(benchmark, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 607, in get_reweighted_operations_gpt
    content_string = data['choices'][0]['message']['content']
KeyError: 'choices'
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 benchmarks.py
Benchmark # 73  --  tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[0.3, 0.1, 0.4], [0.1, 0.5, 0.9], [0.2, 0.6, 0.5], [0.3, 0.5, 0.8], [0.9, 0.7, 0.9]], [[0.3, 0.2, 0.3], [0.8, 0.4, 0.6], [0.2, 0.6, 0.4], [0.3, 0.3, 0.8]]], output=[0.02, 0.19, 0.01, 0.04])] description = find the minimum distance between two sets of points constants = []
{ "id": "chatcmpl-8PyTnU7rpzVUcTbtCSOX6NkMq3uHr", "object": "chat.completion", "created": 1701201375, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 58, 59, 56, 83, 101, 72, 76, 74, 80, 103, 105, 9, 11]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1606, "completion_tokens": 45, "total_tokens": 1651 } }

{'id': 'chatcmpl-8PyTnU7rpzVUcTbtCSOX6NkMq3uHr', 'object': 'chat.completion', 'created': 1701201375, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 58, 59, 56, 83, 101, 72, 76, 74, 80, 103, 105, 9, 11]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1606, 'completion_tokens': 45, 'total_tokens': 1651}}
Altering:  [1, 14, 58, 59, 56, 83, 101, 72, 76, 74, 80, 103, 105, 9, 11]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  14 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[0.3 0.1 0.4]
 [0.1 0.5 0.9]
 [0.2 0.6 0.5]
 [0.3 0.5 0.8]
 [0.9 0.7 0.9]], shape=(5, 3), dtype=float32)

Input 'in2':
tf.Tensor(
[[0.3 0.2 0.3]
 [0.8 0.4 0.6]
 [0.2 0.6 0.4]
 [0.3 0.3 0.8]], shape=(4, 3), dtype=float32)

Output:
tf.Tensor([0.02 0.19 0.01 0.04], shape=(4,), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4, 5]

Description: find the minimum distance between two sets of points

Searching...

Could not find solution within 300 seconds.
Found in  300.19206805199997 s!
[300.19206805199997]
Benchmark # 74  --  tf.tensordot(in2, in1, 1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[10, 20], [30, 40]]], [3, 5, 10]], output=[[128, 236], [344, 452]])] description = compute a weighted sum of tensors constants = []
{ "id": "chatcmpl-8PyYfbhx02UHdlPW4wkjdrDZHH2bM", "object": "chat.completion", "created": 1701201677, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 56, 11, 83, 62, 111, 8, 17, 14, 101, 57, 58, 9, 105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1507, "completion_tokens": 45, "total_tokens": 1552 } }

{'id': 'chatcmpl-8PyYfbhx02UHdlPW4wkjdrDZHH2bM', 'object': 'chat.completion', 'created': 1701201677, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 59, 56, 11, 83, 62, 111, 8, 17, 14, 101, 57, 58, 9, 105]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1507, 'completion_tokens': 45, 'total_tokens': 1552}}
Altering:  [1, 59, 56, 11, 83, 62, 111, 8, 17, 14, 101, 57, 58, 9, 105]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.zeros(shape) ], weight= 12
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ PairCreationOperation ], weight= 20
Operation  16 : [ SingletonTupleCreationOperation ], weight= 20
Operation  17 : [ tf.constant(value) ], weight= 23
Operation  18 : [ tf.squeeze(input, axis) ], weight= 23
Operation  19 : [ tf.constant(value, dtype) ], weight= 24
Operation  20 : [ tf.equal(x, y) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[[ 1  2]
  [ 3  4]]

 [[ 5  6]
  [ 7  8]]

 [[10 20]
  [30 40]]], shape=(3, 2, 2), dtype=int32)

Input 'in2':
tf.Tensor([ 3  5 10], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[128 236]
 [344 452]], shape=(2, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: compute a weighted sum of tensors

Searching...

Found solution: tf.tensordot(in2, in1, 1)

Solution was found in 3.2 seconds:
tf.tensordot(in2, in1, 1)
Found in  3.1715551140000002 s!
[3.1715551140000002, 300.19206805199997]
Benchmark # 75  --  tf.add(in2, tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in1, in2)))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10.0, 20.0], [30.0, 40.0], [50.0, 60.0]]], [[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90.0, 80.0], [70.0, 60.0], [50.0, 40.0]]], [0.1, 0.4, 0.8]], output=[[[8.2, 7.4], [5.4, 5.2], [5.0, 5.6]], [[82.0, 74.0], [54.0, 52.0], [50.0, 56.0]]])] description = linear interpolation between two tensors constants = []
{ "id": "chatcmpl-8PyYisul0FBEjIaFqVR0FkvwE0KgD", "object": "chat.completion", "created": 1701201680, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 56, 103, 101, 9, 83, 11, 22, 24, 81, 104, 105, 79]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1646, "completion_tokens": 45, "total_tokens": 1691 } }

{'id': 'chatcmpl-8PyYisul0FBEjIaFqVR0FkvwE0KgD', 'object': 'chat.completion', 'created': 1701201680, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 56, 103, 101, 9, 83, 11, 22, 24, 81, 104, 105, 79]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1646, 'completion_tokens': 45, 'total_tokens': 1691}}
Altering:  [1, 14, 59, 56, 103, 101, 9, 83, 11, 22, 24, 81, 104, 105, 79]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  10 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  11 : [ tf.subtract(x, y) ], weight= 8
Operation  12 : [ tf.tile(input, multiples) ], weight= 8
Operation  13 : [ tf.concat(values, axis) ], weight= 10
Operation  14 : [ tf.repeat(input, repeats) ], weight= 16
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  31 : [ tf.range(start) ], weight= 28
Operation  32 : [ tf.square(x) ], weight= 28
Operation  33 : [ tf.argmax(input, axis) ], weight= 32
Operation  34 : [ tf.greater_equal(x, y) ], weight= 32
Operation  35 : [ tf.minimum(x, y) ], weight= 32
Operation  36 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  37 : [ tf.zeros_like(input) ], weight= 32
Operation  38 : [ IndexingAxis1Operation ], weight= 32
Operation  39 : [ IndexingOperation ], weight= 32
Operation  40 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[[ 1.  2.]
  [ 3.  4.]
  [ 5.  6.]]

 [[10. 20.]
  [30. 40.]
  [50. 60.]]], shape=(2, 3, 2), dtype=float32)

Input 'in2':
tf.Tensor(
[[[ 9.  8.]
  [ 7.  6.]
  [ 5.  4.]]

 [[90. 80.]
  [70. 60.]
  [50. 40.]]], shape=(2, 3, 2), dtype=float32)

Input 'in3':
tf.Tensor([0.1 0.4 0.8], shape=(3,), dtype=float32)

Output:
tf.Tensor(
[[[ 8.2  7.4]
  [ 5.4  5.2]
  [ 5.   5.6]]

 [[82.  74. ]
  [54.  52. ]
  [50.  56. ]]], shape=(2, 3, 2), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: linear interpolation between two tensors

Searching...

Could not find solution within 300 seconds.
Found in  300.528663423 s!
[3.1715551140000002, 300.19206805199997, 300.528663423]
Benchmark # 76  --  tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[1, 0, 1, 1, 0, 1, 0, 1]], output=[1.0, 0.0, 0.333333, 0.25, 0.0, 0.166667, 0.0, 0.125])] description = divide each element by the column index constants = []
{ "id": "chatcmpl-8Pyda9REUmBcmUB9rO8edGk5PlkE1", "object": "chat.completion", "created": 1701201982, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 83, 17, 8, 11, 22, 24, 56, 100, 105, 21, 62]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1513, "completion_tokens": 45, "total_tokens": 1558 } }

{'id': 'chatcmpl-8Pyda9REUmBcmUB9rO8edGk5PlkE1', 'object': 'chat.completion', 'created': 1701201982, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 101, 83, 17, 8, 11, 22, 24, 56, 100, 105, 21, 62]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1513, 'completion_tokens': 45, 'total_tokens': 1558}}
Altering:  [1, 14, 59, 101, 83, 17, 8, 11, 22, 24, 56, 100, 105, 21, 62]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.stack(values, axis) ], weight= 10
Operation  12 : [ tf.fill(dims, value) ], weight= 12
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([1 0 1 1 0 1 0 1], shape=(8,), dtype=int32)

Output:
tf.Tensor([1.       0.       0.333333 0.25     0.       0.166667 0.       0.125   ], shape=(8,), dtype=float32)

Constants: [0, 1, -1, True, False, 8]

Description: divide each element by the column index

Searching...

Found solution: tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)

Solution was found in 11.2 seconds:
tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)
Found in  11.169672976000015 s!
[3.1715551140000002, 11.169672976000015, 300.19206805199997, 300.528663423]
Benchmark # 77  --  tf.tensordot(in1, in2, 1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]], [0.5, 1.0, 2.0]], output=[[[8.5, 19.0], [15.2, 28.9]]])] description = dot product a vector with last dimension of a tensor constants = []
{ "id": "chatcmpl-8PydlOzrCh79N3y8s8WxodZnrBMEw", "object": "chat.completion", "created": 1701201993, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[56, 59, 14, 1, 101, 2, 83, 11, 8, 98, 17, 92, 100, 79, 62]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1550, "completion_tokens": 45, "total_tokens": 1595 } }

{'id': 'chatcmpl-8PydlOzrCh79N3y8s8WxodZnrBMEw', 'object': 'chat.completion', 'created': 1701201993, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[56, 59, 14, 1, 101, 2, 83, 11, 8, 98, 17, 92, 100, 79, 62]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1550, 'completion_tokens': 45, 'total_tokens': 1595}}
Altering:  [56, 59, 14, 1, 101, 2, 83, 11, 8, 98, 17, 92, 100, 79, 62]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.concat(values, axis) ], weight= 10
Operation  9 : [ tf.shape(input) ], weight= 10
Operation  10 : [ tf.stack(values, axis) ], weight= 10
Operation  11 : [ tf.squeeze(input) ], weight= 11
Operation  12 : [ tf.add_n(inputs) ], weight= 13
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.minimum(x, y) ], weight= 32
Operation  41 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingAxis1Operation ], weight= 32
Operation  44 : [ IndexingOperation ], weight= 32
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[[[1.  2.  3. ]
   [4.  5.  6. ]]

  [[1.2 3.4 5.6]
   [7.8 9.8 7.6]]]], shape=(1, 2, 2, 3), dtype=float32)

Input 'in2':
tf.Tensor([0.5 1.  2. ], shape=(3,), dtype=float32)

Output:
tf.Tensor(
[[[ 8.5 19. ]
  [15.2 28.9]]], shape=(1, 2, 2), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: dot product a vector with last dimension of a tensor

Searching...

Found solution: tf.tensordot(in1, in2, 1)

Solution was found in 3.1 seconds:
tf.tensordot(in1, in2, 1)
Found in  3.055485259999955 s!
[3.055485259999955, 3.1715551140000002, 11.169672976000015, 300.19206805199997, 300.528663423]
Benchmark # 78  --  tf.reduce_prod(tf.maximum(tf.reduce_max(in2), tf.multiply(in1, in2)), axis=1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[9, 2, 5, 3, 7, 4], [[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]]], output=[35, 9, 120])] description = compute the product of marked elements constants = []
{ "id": "chatcmpl-8PydoUEhSAC9NSueNSvx5cr0CrTLc", "object": "chat.completion", "created": 1701201996, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[59, 21, 24, 22, 56, 1, 2, 11, 10, 14, 83, 57, 58, 72, 76]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1528, "completion_tokens": 45, "total_tokens": 1573 } }

{'id': 'chatcmpl-8PydoUEhSAC9NSueNSvx5cr0CrTLc', 'object': 'chat.completion', 'created': 1701201996, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[59, 21, 24, 22, 56, 1, 2, 11, 10, 14, 83, 57, 58, 72, 76]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1528, 'completion_tokens': 45, 'total_tokens': 1573}}
Altering:  [59, 21, 24, 22, 56, 1, 2, 11, 10, 14, 83, 57, 58, 72, 76]

Reweighted:
Operation  0 : [ tf.gather(params, indices) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.fill(dims, value) ], weight= 12
Operation  12 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  13 : [ tf.add_n(inputs) ], weight= 13
Operation  14 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.subtract(x, y) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([9 2 5 3 7 4], shape=(6,), dtype=int32)

Input 'in2':
tf.Tensor(
[[0 0 1 0 1 0]
 [1 0 0 0 0 0]
 [0 1 1 1 0 1]], shape=(3, 6), dtype=int32)

Output:
tf.Tensor([ 35   9 120], shape=(3,), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 6]

Description: compute the product of marked elements

Searching...

Could not find solution within 300 seconds.
Found in  300.228903122 s!
[3.055485259999955, 3.1715551140000002, 11.169672976000015, 300.19206805199997, 300.228903122, 300.528663423]
Benchmark # 79  --  tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]]], output=[[2.25, 1.0, 0.0, 4.0], [1.21, 0.0, 0.0, 0.0], [1.0, 0.0, 1.21, 6.25]])] description = set to 0 the elements with absolute value less than 1, and square the other elements constants = []
{ "id": "chatcmpl-8Pyig9oIt2OXSy4ASDg9uZHlpUbKg", "object": "chat.completion", "created": 1701202298, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 14, 9, 97, 15, 60, 26, 27, 57, 58, 83, 105, 8, 11]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1582, "completion_tokens": 45, "total_tokens": 1627 } }

{'id': 'chatcmpl-8Pyig9oIt2OXSy4ASDg9uZHlpUbKg', 'object': 'chat.completion', 'created': 1701202298, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 59, 14, 9, 97, 15, 60, 26, 27, 57, 58, 83, 105, 8, 11]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1582, 'completion_tokens': 45, 'total_tokens': 1627}}
Altering:  [1, 59, 14, 9, 97, 15, 60, 26, 27, 57, 58, 83, 105, 8, 11]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.equal(x, y) ], weight= 7
Operation  2 : [ tf.greater(x, y) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.square(x) ], weight= 8
Operation  10 : [ tf.greater_equal(x, y) ], weight= 9
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.not_equal(x, y) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.matmul(a, b) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.subtract(x, y) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[-1.5  1.   0.9  2. ]
 [ 1.1  0.  -0.1 -0.9]
 [-1.   0.1 -1.1  2.5]], shape=(3, 4), dtype=float32)

Output:
tf.Tensor(
[[2.25 1.   0.   4.  ]
 [1.21 0.   0.   0.  ]
 [1.   0.   1.21 6.25]], shape=(3, 4), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4]

Description: set to 0 the elements with absolute value less than 1, and square the other elements

Searching...

Found solution: tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))

Solution was found in 10.0 seconds:
tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))
Found in  10.006027430000017 s!
[3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 300.19206805199997, 300.228903122, 300.528663423]
Benchmark # 80  --  tf.sparse.to_dense(tf.SparseTensor(tf.cast(in2, tf.int64), in1, (3, 5)))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[4, 5, 2, 7, 8, 6], [[0, 2], [0, 4], [1, 1], [1, 3], [2, 0], [2, 3]]], output=[[0, 0, 4, 0, 5], [0, 2, 0, 7, 0], [8, 0, 0, 6, 0]])] description = use the output of tf.nn.top_k to make a sparse tensor constants = []
{ "id": "chatcmpl-8PyiqjsRE47dNkjen4P8arYUZwXO0", "object": "chat.completion", "created": 1701202308, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[50, 87, 1, 14, 59, 101, 11, 100, 83, 56, 103, 9, 17, 8, 79]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1554, "completion_tokens": 45, "total_tokens": 1599 } }

{'id': 'chatcmpl-8PyiqjsRE47dNkjen4P8arYUZwXO0', 'object': 'chat.completion', 'created': 1701202308, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[50, 87, 1, 14, 59, 101, 11, 100, 83, 56, 103, 9, 17, 8, 79]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1554, 'completion_tokens': 45, 'total_tokens': 1599}}
Altering:  [50, 87, 1, 14, 59, 101, 11, 100, 83, 56, 103, 9, 17, 8, 79]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.stack(values, axis) ], weight= 10
Operation  12 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  13 : [ tf.math.top_k(input, k) ], weight= 14
Operation  14 : [ tf.scatter_nd(indices, updates, shape) ], weight= 15
Operation  15 : [ tf.SparseTensor(indices, values, dense_shape) ], weight= 20
Operation  16 : [ tf.sparse.from_dense(tensor) ], weight= 20
Operation  17 : [ tf.sparse.to_dense(sp_input) ], weight= 20
Operation  18 : [ PairCreationOperation ], weight= 20
Operation  19 : [ SingletonTupleCreationOperation ], weight= 20
Operation  20 : [ tf.constant(value) ], weight= 23
Operation  21 : [ tf.squeeze(input, axis) ], weight= 23
Operation  22 : [ tf.constant(value, dtype) ], weight= 24
Operation  23 : [ tf.equal(x, y) ], weight= 24
Operation  24 : [ tf.gather(params, indices) ], weight= 24
Operation  25 : [ tf.greater(x, y) ], weight= 24
Operation  26 : [ tf.maximum(x, y) ], weight= 24
Operation  27 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  30 : [ tf.transpose(a) ], weight= 24
Operation  31 : [ tf.where(condition) ], weight= 24
Operation  32 : [ tf.where(condition, x, y) ], weight= 24
Operation  33 : [ tf.sparse.expand_dims(sp_input, axis) ], weight= 24
Operation  34 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  35 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  36 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  37 : [ tf.range(start) ], weight= 28
Operation  38 : [ tf.square(x) ], weight= 28
Operation  39 : [ tf.tile(input, multiples) ], weight= 28
Operation  40 : [ tf.sparse.reduce_max(sp_input, axis, output_is_sparse) ], weight= 28
Operation  41 : [ tf.sparse.reduce_sum(sp_input, axis, output_is_sparse) ], weight= 28
Operation  42 : [ tf.argmax(input, axis) ], weight= 32
Operation  43 : [ tf.greater_equal(x, y) ], weight= 32
Operation  44 : [ tf.minimum(x, y) ], weight= 32
Operation  45 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  46 : [ tf.zeros_like(input) ], weight= 32
Operation  47 : [ tf.sparse.add(a, b) ], weight= 32
Operation  48 : [ tf.sparse.maximum(sp_a, sp_b) ], weight= 32
Operation  49 : [ tf.sparse.slice(sp_input, start, size) ], weight= 32
Operation  50 : [ tf.sparse.split(sp_input, num_split, axis) ], weight= 32
Operation  51 : [ IndexingAxis1Operation ], weight= 32
Operation  52 : [ IndexingOperation ], weight= 32
Operation  53 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  54 : [ tf.ones_like(input) ], weight= 36
Operation  55 : [ tf.shape(input) ], weight= 36
Operation  56 : [ tf.sparse.retain(sp_input, to_retain) ], weight= 36
Operation  57 : [ tf.sparse.to_dense(sp_input, default_value) ], weight= 36
Operation  58 : [ tf.sparse.transpose(sp_input) ], weight= 36
Operation  59 : [ SlicingAxis0BothOperation ], weight= 36
Operation  60 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  61 : [ SlicingAxis0RightOperation ], weight= 36
Operation  62 : [ SlicingAxis1BothOperation ], weight= 36
Operation  63 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  64 : [ SlicingAxis1RightOperation ], weight= 36
Operation  65 : [ TripleCreationOperation ], weight= 36
Operation  66 : [ tf.squeeze(input) ], weight= 38
Operation  67 : [ tf.abs(x) ], weight= 40
Operation  68 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  69 : [ tf.eye(num_rows) ], weight= 40
Operation  70 : [ tf.fill(dims, value) ], weight= 40
Operation  71 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  72 : [ tf.math.bincount(arr) ], weight= 40
Operation  73 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  74 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  75 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  76 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  77 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  78 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  79 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  80 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  81 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  82 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  83 : [ tf.unstack(value, axis) ], weight= 40
Operation  84 : [ tf.zeros(shape) ], weight= 40
Operation  85 : [ tf.sparse.concat(axis, sp_inputs) ], weight= 40
Operation  86 : [ tf.sparse.minimum(sp_a, sp_b) ], weight= 40
Operation  87 : [ tf.sparse.reset_shape(sp_input) ], weight= 40
Operation  88 : [ tf.sparse.reshape(sp_input, shape) ], weight= 40
Operation  89 : [ tf.add_n(inputs) ], weight= 44
Operation  90 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  91 : [ tf.math.ceil(x) ], weight= 44
Operation  92 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  93 : [ tf.math.floor(x) ], weight= 44
Operation  94 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  95 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  96 : [ tf.not_equal(x, y) ], weight= 44
Operation  97 : [ tf.ones(shape) ], weight= 44
Operation  98 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  99 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  100 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  101 : [ tf.transpose(a, perm) ], weight= 44
Operation  102 : [ tf.sparse.to_indicator(sp_input, vocab_size) ], weight= 44
Operation  103 : [ tf.argmin(input, axis) ], weight= 48
Operation  104 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  105 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  106 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  107 : [ tf.math.logical_not(x) ], weight= 48
Operation  108 : [ tf.math.negative(x) ], weight= 48
Operation  109 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  110 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  111 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  112 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  113 : [ tf.sign(x) ], weight= 48
Operation  114 : [ tf.unique_with_counts(x) ], weight= 48
Operation  115 : [ tf.exp(x) ], weight= 52
Operation  116 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  117 : [ tf.math.log(x) ], weight= 52
Operation  118 : [ tf.math.reciprocal(x) ], weight= 52
Operation  119 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  120 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  121 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  122 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  123 : [ tf.round(x) ], weight= 52
Operation  124 : [ tf.sort(values, axis) ], weight= 52
Operation  125 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  126 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  127 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  128 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  129 : [ tf.range(start, limit, delta) ], weight= 56
Operation  130 : [ tf.repeat(input, repeats) ], weight= 56
Operation  131 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  132 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  133 : [ tf.sqrt(x) ], weight= 56
Operation  134 : [ tf.sparse.transpose(sp_input, perm) ], weight= 56
Operation  135 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  136 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  137 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  138 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  139 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  140 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  141 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  142 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([4 5 2 7 8 6], shape=(6,), dtype=int32)

Input 'in2':
tf.Tensor(
[[0 2]
 [0 4]
 [1 1]
 [1 3]
 [2 0]
 [2 3]], shape=(6, 2), dtype=int32)

Output:
tf.Tensor(
[[0 0 4 0 5]
 [0 2 0 7 0]
 [8 0 0 6 0]], shape=(3, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 5, 6]

Description: use the output of tf.nn.top_k to make a sparse tensor

Searching...

Found solution: tf.scatter_nd(in2, in1, (3, 5))

Solution was found in 11.3 seconds:
tf.scatter_nd(in2, in1, (3, 5))
Found in  11.306060845000047 s!
[3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 11.306060845000047, 300.19206805199997, 300.228903122, 300.528663423]
Benchmark # 81  --  tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[5, 2, 8, 2, 4, 1, 1, 0, 2, 1], 3], output=[5, 2, 8, 4, 1, 1, 0, 2, 1])] description = copy all elements except at the given index constants = []
{ "id": "chatcmpl-8Pyj1aNAM9B3BigUlUzglIohI2Bv2", "object": "chat.completion", "created": 1701202319, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 83, 22, 11, 56, 59, 14, 101, 57, 58, 72, 76, 74, 79, 9]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1508, "completion_tokens": 45, "total_tokens": 1553 } }

{'id': 'chatcmpl-8Pyj1aNAM9B3BigUlUzglIohI2Bv2', 'object': 'chat.completion', 'created': 1701202319, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 83, 22, 11, 56, 59, 14, 101, 57, 58, 72, 76, 74, 79, 9]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1508, 'completion_tokens': 45, 'total_tokens': 1553}}
Altering:  [1, 83, 22, 11, 56, 59, 14, 101, 57, 58, 72, 76, 74, 79, 9]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  6 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  14 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  24 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  26 : [ tf.transpose(a) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([5 2 8 2 4 1 1 0 2 1], shape=(10,), dtype=int32)

Input 'in2':
3

Output:
tf.Tensor([5 2 8 4 1 1 0 2 1], shape=(9,), dtype=int32)

Constants: [0, 1, -1, True, False, 9, 10]

Description: copy all elements except at the given index

Searching...

Could not find solution within 300 seconds.
Found in  300.296595336 s!
[3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 11.306060845000047, 300.19206805199997, 300.228903122, 300.296595336, 300.528663423]
Benchmark # 82  --  tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[4, 6, 2, 6, 7, 3, -3]], output=[0, 0, 0, 0, 1, 0, 0])] description = create a binary vector where the max element is 1 constants = []
{ "id": "chatcmpl-8PyntM2WflP9kQlzdKhuNnRUg92DJ", "object": "chat.completion", "created": 1701202621, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[72, 15, 1, 21, 83, 62, 57, 58, 59, 101, 14, 34, 96, 97, 36]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1493, "completion_tokens": 45, "total_tokens": 1538 } }

{'id': 'chatcmpl-8PyntM2WflP9kQlzdKhuNnRUg92DJ', 'object': 'chat.completion', 'created': 1701202621, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[72, 15, 1, 21, 83, 62, 57, 58, 59, 101, 14, 34, 96, 97, 36]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1493, 'completion_tokens': 45, 'total_tokens': 1538}}
Altering:  [72, 15, 1, 21, 83, 62, 57, 58, 59, 101, 14, 34, 96, 97, 36]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.square(x) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.fill(dims, value) ], weight= 12
Operation  11 : [ tf.ones(shape) ], weight= 13
Operation  12 : [ tf.math.divide_no_nan(x, y) ], weight= 15
Operation  13 : [ tf.math.log(x) ], weight= 15
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.sqrt(x) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.matmul(a, b) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.zeros(shape) ], weight= 40
Operation  73 : [ tf.add_n(inputs) ], weight= 44
Operation  74 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  80 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  81 : [ tf.not_equal(x, y) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.exp(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([ 4  6  2  6  7  3 -3], shape=(7,), dtype=int32)

Output:
tf.Tensor([0 0 0 0 1 0 0], shape=(7,), dtype=int32)

Constants: [0, 1, -1, True, False, 7]

Description: create a binary vector where the max element is 1

Searching...

Found solution: tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)

Solution was found in 2.4 seconds:
tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)
Found in  2.38398204300006 s!
[2.38398204300006, 3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 11.306060845000047, 300.19206805199997, 300.228903122, 300.296595336, 300.528663423]
Benchmark # 83  --  tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]], [0, 1, 1, 0, 2, 0]], output=[12, 88, 77, 78, -5, 10])] description = extract elements of a tensor given row indices constants = []
{ "id": "chatcmpl-8Pynvrdq8HJ3Rm2wXRiSe7DfsOvWQ", "object": "chat.completion", "created": 1701202623, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 83, 11, 56, 1, 101, 59, 14, 16, 36, 96, 97, 42, 34, 8]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1539, "completion_tokens": 45, "total_tokens": 1584 } }

{'id': 'chatcmpl-8Pynvrdq8HJ3Rm2wXRiSe7DfsOvWQ', 'object': 'chat.completion', 'created': 1701202623, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 83, 11, 56, 1, 101, 59, 14, 16, 36, 96, 97, 42, 34, 8]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1539, 'completion_tokens': 45, 'total_tokens': 1584}}
Altering:  [22, 83, 11, 56, 1, 101, 59, 14, 16, 36, 96, 97, 42, 34, 8]

Reweighted:
Operation  0 : [ tf.gather(params, indices) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.add(x, y) ], weight= 8
Operation  4 : [ tf.divide(x, y) ], weight= 8
Operation  5 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  6 : [ tf.square(x) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.concat(values, axis) ], weight= 10
Operation  9 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  10 : [ tf.exp(x) ], weight= 15
Operation  11 : [ tf.math.divide_no_nan(x, y) ], weight= 15
Operation  12 : [ tf.math.log(x) ], weight= 15
Operation  13 : [ tf.math.reciprocal(x) ], weight= 15
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.sqrt(x) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  30 : [ tf.transpose(a) ], weight= 24
Operation  31 : [ tf.where(condition) ], weight= 24
Operation  32 : [ tf.where(condition, x, y) ], weight= 24
Operation  33 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  34 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  35 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  36 : [ tf.range(start) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.minimum(x, y) ], weight= 32
Operation  41 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingAxis1Operation ], weight= 32
Operation  44 : [ IndexingOperation ], weight= 32
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.shape(input) ], weight= 36
Operation  48 : [ tf.stack(values, axis) ], weight= 36
Operation  49 : [ SlicingAxis0BothOperation ], weight= 36
Operation  50 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis0RightOperation ], weight= 36
Operation  52 : [ SlicingAxis1BothOperation ], weight= 36
Operation  53 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  54 : [ SlicingAxis1RightOperation ], weight= 36
Operation  55 : [ TripleCreationOperation ], weight= 36
Operation  56 : [ tf.squeeze(input) ], weight= 38
Operation  57 : [ tf.abs(x) ], weight= 40
Operation  58 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  59 : [ tf.eye(num_rows) ], weight= 40
Operation  60 : [ tf.fill(dims, value) ], weight= 40
Operation  61 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  62 : [ tf.math.bincount(arr) ], weight= 40
Operation  63 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  67 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  68 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  72 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  73 : [ tf.unstack(value, axis) ], weight= 40
Operation  74 : [ tf.zeros(shape) ], weight= 40
Operation  75 : [ tf.add_n(inputs) ], weight= 44
Operation  76 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  77 : [ tf.math.ceil(x) ], weight= 44
Operation  78 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  79 : [ tf.math.floor(x) ], weight= 44
Operation  80 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  81 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  82 : [ tf.not_equal(x, y) ], weight= 44
Operation  83 : [ tf.ones(shape) ], weight= 44
Operation  84 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  85 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  86 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  87 : [ tf.transpose(a, perm) ], weight= 44
Operation  88 : [ tf.argmin(input, axis) ], weight= 48
Operation  89 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  90 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  91 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  92 : [ tf.math.logical_not(x) ], weight= 48
Operation  93 : [ tf.math.negative(x) ], weight= 48
Operation  94 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  95 : [ tf.math.top_k(input, k) ], weight= 48
Operation  96 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  97 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  98 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  99 : [ tf.sign(x) ], weight= 48
Operation  100 : [ tf.unique_with_counts(x) ], weight= 48
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[12 34 56 78 90 10]
 [99 88 77 55 44 33]
 [-1 -2 -3 -4 -5 -6]], shape=(3, 6), dtype=int32)

Input 'in2':
tf.Tensor([0 1 1 0 2 0], shape=(6,), dtype=int32)

Output:
tf.Tensor([12 88 77 78 -5 10], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 6]

Description: extract elements of a tensor given row indices

Searching...

Could not find solution within 300 seconds.
Found in  300.052284978 s!
[2.38398204300006, 3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 11.306060845000047, 300.052284978, 300.19206805199997, 300.228903122, 300.296595336, 300.528663423]
Benchmark # 84  --  tf.squeeze(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]]], output=[[9, 7, 5], [8, 4, 6], [-2, 8, 9], [14, 25, 36]])] description = sum across columns for pairs of consecutive rows constants = [2]
{ "id": "chatcmpl-8PysoEHFobN2mtLmu4xrJkIIPG9BD", "object": "chat.completion", "created": 1701202926, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[11, 79, 83, 1, 59, 14, 101, 56, 103, 9, 62, 111, 64, 104, 105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1561, "completion_tokens": 45, "total_tokens": 1606 } }

{'id': 'chatcmpl-8PysoEHFobN2mtLmu4xrJkIIPG9BD', 'object': 'chat.completion', 'created': 1701202926, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[11, 79, 83, 1, 59, 14, 101, 56, 103, 9, 62, 111, 64, 104, 105]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1561, 'completion_tokens': 45, 'total_tokens': 1606}}
Altering:  [11, 79, 83, 1, 59, 14, 101, 56, 103, 9, 62, 111, 64, 104, 105]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.tile(input, multiples) ], weight= 8
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 12
Operation  13 : [ tf.zeros(shape) ], weight= 12
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 3  5  2]
 [ 6  2  3]
 [ 8  7  1]
 [ 0 -3  5]
 [-4  7  3]
 [ 2  1  6]
 [10 20 30]
 [ 4  5  6]], shape=(8, 3), dtype=int32)

Output:
tf.Tensor(
[[ 9  7  5]
 [ 8  4  6]
 [-2  8  9]
 [14 25 36]], shape=(4, 3), dtype=int32)

Constants: [2, 0, 1, -1, True, False, 3, 4, 8]

Description: sum across columns for pairs of consecutive rows

Searching...

Could not find solution within 300 seconds.
Found in  300.52112109899986 s!
[2.38398204300006, 3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 11.306060845000047, 300.052284978, 300.19206805199997, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423]
Benchmark # 85  --  tf.where(tf.sequence_mask(in2), x=tf.roll(in1, 1, -1), y=in1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]], [1, 0, 1, 0, 1]], output=[[[34, 12], [56, 78], [54, 23], [76, 78], [24, 42]]])] description = reverse the order in the marked rows constants = []
{ "id": "chatcmpl-8Pyxg9K2K4pHVig55nralHFKxuudW", "object": "chat.completion", "created": 1701203228, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 1, 101, 59, 14, 56, 103, 80, 79, 72, 76, 74, 75, 17, 8]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1527, "completion_tokens": 45, "total_tokens": 1572 } }

{'id': 'chatcmpl-8Pyxg9K2K4pHVig55nralHFKxuudW', 'object': 'chat.completion', 'created': 1701203228, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 1, 101, 59, 14, 56, 103, 80, 79, 72, 76, 74, 75, 17, 8]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1527, 'completion_tokens': 45, 'total_tokens': 1572}}
Altering:  [83, 1, 101, 59, 14, 56, 103, 80, 79, 72, 76, 74, 75, 17, 8]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  6 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  12 : [ tf.reduce_mean(input_tensor, axis) ], weight= 12
Operation  13 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  14 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.transpose(a) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[[12 34]
  [56 78]
  [23 54]
  [76 78]
  [42 24]]], shape=(1, 5, 2), dtype=int32)

Input 'in2':
tf.Tensor([1 0 1 0 1], shape=(5,), dtype=int32)

Output:
tf.Tensor(
[[[34 12]
  [56 78]
  [54 23]
  [76 78]
  [24 42]]], shape=(1, 5, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 5]

Description: reverse the order in the marked rows

Searching...

Could not find solution within 300 seconds.
Found in  302.0517314919998 s!
[2.38398204300006, 3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 11.306060845000047, 300.052284978, 300.19206805199997, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 302.0517314919998]
Benchmark # 86  --  tf.cast(tf.where(tf.sequence_mask(in1))[:, 0], tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[3, 4, 1]], output=[0, 0, 0, 1, 1, 1, 1, 2])] description = convert segment lengths to segment ids constants = []
{ "id": "chatcmpl-8Pz2a7evOMPosafLQq2wYXmVQ7ozo", "object": "chat.completion", "created": 1701203532, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 11, 56, 59, 101, 14, 34, 43, 42, 41, 16, 36, 96, 97, 26]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1479, "completion_tokens": 45, "total_tokens": 1524 } }

{'id': 'chatcmpl-8Pz2a7evOMPosafLQq2wYXmVQ7ozo', 'object': 'chat.completion', 'created': 1701203532, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 11, 56, 59, 101, 14, 34, 43, 42, 41, 16, 36, 96, 97, 26]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1479, 'completion_tokens': 45, 'total_tokens': 1524}}
Altering:  [1, 11, 56, 59, 101, 14, 34, 43, 42, 41, 16, 36, 96, 97, 26]

Reweighted:
Operation  0 : [ tf.greater(x, y) ], weight= 7
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.add(x, y) ], weight= 8
Operation  4 : [ tf.divide(x, y) ], weight= 8
Operation  5 : [ tf.square(x) ], weight= 8
Operation  6 : [ tf.subtract(x, y) ], weight= 8
Operation  7 : [ tf.concat(values, axis) ], weight= 10
Operation  8 : [ tf.math.negative(x) ], weight= 14
Operation  9 : [ tf.exp(x) ], weight= 15
Operation  10 : [ tf.math.divide_no_nan(x, y) ], weight= 15
Operation  11 : [ tf.math.log(x) ], weight= 15
Operation  12 : [ tf.math.reciprocal(x) ], weight= 15
Operation  13 : [ tf.cast(x, dtype) ], weight= 16
Operation  14 : [ tf.sqrt(x) ], weight= 16
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ tf.math.reciprocal_no_nan(x) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  30 : [ tf.transpose(a) ], weight= 24
Operation  31 : [ tf.where(condition) ], weight= 24
Operation  32 : [ tf.where(condition, x, y) ], weight= 24
Operation  33 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  34 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  35 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  36 : [ tf.range(start) ], weight= 28
Operation  37 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  38 : [ tf.tile(input, multiples) ], weight= 28
Operation  39 : [ tf.argmax(input, axis) ], weight= 32
Operation  40 : [ tf.greater_equal(x, y) ], weight= 32
Operation  41 : [ tf.minimum(x, y) ], weight= 32
Operation  42 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  43 : [ tf.zeros_like(input) ], weight= 32
Operation  44 : [ IndexingAxis1Operation ], weight= 32
Operation  45 : [ IndexingOperation ], weight= 32
Operation  46 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  47 : [ tf.ones_like(input) ], weight= 36
Operation  48 : [ tf.shape(input) ], weight= 36
Operation  49 : [ tf.stack(values, axis) ], weight= 36
Operation  50 : [ SlicingAxis0BothOperation ], weight= 36
Operation  51 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis0RightOperation ], weight= 36
Operation  53 : [ SlicingAxis1BothOperation ], weight= 36
Operation  54 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  55 : [ SlicingAxis1RightOperation ], weight= 36
Operation  56 : [ TripleCreationOperation ], weight= 36
Operation  57 : [ tf.squeeze(input) ], weight= 38
Operation  58 : [ tf.abs(x) ], weight= 40
Operation  59 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  60 : [ tf.eye(num_rows) ], weight= 40
Operation  61 : [ tf.fill(dims, value) ], weight= 40
Operation  62 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  63 : [ tf.math.bincount(arr) ], weight= 40
Operation  64 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  65 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  66 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  67 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  68 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  69 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  71 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  73 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  74 : [ tf.unstack(value, axis) ], weight= 40
Operation  75 : [ tf.zeros(shape) ], weight= 40
Operation  76 : [ tf.add_n(inputs) ], weight= 44
Operation  77 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  78 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  79 : [ tf.math.ceil(x) ], weight= 44
Operation  80 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  81 : [ tf.math.floor(x) ], weight= 44
Operation  82 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  83 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  84 : [ tf.not_equal(x, y) ], weight= 44
Operation  85 : [ tf.ones(shape) ], weight= 44
Operation  86 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  87 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  88 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  89 : [ tf.transpose(a, perm) ], weight= 44
Operation  90 : [ tf.argmin(input, axis) ], weight= 48
Operation  91 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  92 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  93 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  94 : [ tf.math.logical_not(x) ], weight= 48
Operation  95 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  96 : [ tf.math.top_k(input, k) ], weight= 48
Operation  97 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  98 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  99 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  100 : [ tf.sign(x) ], weight= 48
Operation  101 : [ tf.unique_with_counts(x) ], weight= 48
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.sort(values, axis) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.range(start, limit, delta) ], weight= 56
Operation  114 : [ tf.repeat(input, repeats) ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  116 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([3 4 1], shape=(3,), dtype=int32)

Output:
tf.Tensor([0 0 0 1 1 1 1 2], shape=(8,), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 8]

Description: convert segment lengths to segment ids

Searching...

Found solution: tf.cast(tf.repeat(tf.where(in1), in1), tf.int32)

Solution was found in 62.7 seconds:
tf.cast(tf.repeat(tf.where(in1), in1), tf.int32)
Found in  62.68739586599986 s!
[2.38398204300006, 3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 11.306060845000047, 62.68739586599986, 300.052284978, 300.19206805199997, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 302.0517314919998]
Benchmark # 87  --  tf.reshape(tf.gather(in1, tf.cumsum(tf.reshape(tf.cast(in2, tf.int32), [-1]), exclusive=True) * tf.reshape(tf.cast(in2, tf.int32), [-1])), in2.shape)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]]], output=[[0, 1, 2, 0, 0], [3, 4, 0, 0, 0], [5, 6, 7, 8, 9], [10, 11, 12, 13, 0], [14, 0, 0, 0, 0], [15, 16, 0, 0, 0]])] description = put given values into a sequence mask constants = []
{ "id": "chatcmpl-8Pz3btsP48QsAwxnuQlAz5Top25Tf", "object": "chat.completion", "created": 1701203595, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[90, 1, 59, 14, 101, 57, 58, 56, 11, 83, 103, 105, 106, 102, 87]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1656, "completion_tokens": 45, "total_tokens": 1701 } }

{'id': 'chatcmpl-8Pz3btsP48QsAwxnuQlAz5Top25Tf', 'object': 'chat.completion', 'created': 1701203595, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[90, 1, 59, 14, 101, 57, 58, 56, 11, 83, 103, 105, 106, 102, 87]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1656, 'completion_tokens': 45, 'total_tokens': 1701}}
Altering:  [90, 1, 59, 14, 101, 57, 58, 56, 11, 83, 103, 105, 106, 102, 87]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  4 : [ tf.transpose(a) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.sequence_mask(lengths) ], weight= 9
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 13
Operation  13 : [ tf.transpose(a, perm) ], weight= 13
Operation  14 : [ tf.scatter_nd(indices, updates, shape) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16], shape=(17,), dtype=int32)

Input 'in2':
tf.Tensor(
[[ True  True  True False False]
 [ True  True False False False]
 [ True  True  True  True  True]
 [ True  True  True  True False]
 [ True False False False False]
 [ True  True False False False]], shape=(6, 5), dtype=bool)

Output:
tf.Tensor(
[[ 0  1  2  0  0]
 [ 3  4  0  0  0]
 [ 5  6  7  8  9]
 [10 11 12 13  0]
 [14  0  0  0  0]
 [15 16  0  0  0]], shape=(6, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 6, 17]

Description: put given values into a sequence mask

Searching...

Found solution: tf.tensor_scatter_nd_update(tf.cast(in2, tf.int32), tf.where(in2), in1)

Solution was found in 12.9 seconds:
tf.tensor_scatter_nd_update(tf.cast(in2, tf.int32), tf.where(in2), in1)
Found in  12.949130384 s!
[2.38398204300006, 3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 62.68739586599986, 300.052284978, 300.19206805199997, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 302.0517314919998]
Benchmark # 88  --  tf.cast(tf.argmax(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32), axis=1), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[32, 53, 45, 38, 29, 89, 64, 23], [38, 53, 89, 38, 32, 64]], output=[3, 1, 5, 3, 0, 6])] description = find the indices of all elements constants = []
{ "id": "chatcmpl-8Pz3oRvp9rTfz6MtwvWuP3nvXKndH", "object": "chat.completion", "created": 1701203608, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 101, 14, 57, 58, 26, 27, 15, 60, 72, 76, 74, 79, 83]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1506, "completion_tokens": 45, "total_tokens": 1551 } }

{'id': 'chatcmpl-8Pz3oRvp9rTfz6MtwvWuP3nvXKndH', 'object': 'chat.completion', 'created': 1701203608, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 59, 101, 14, 57, 58, 26, 27, 15, 60, 72, 76, 74, 79, 83]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1506, 'completion_tokens': 45, 'total_tokens': 1551}}
Altering:  [1, 59, 101, 14, 57, 58, 26, 27, 15, 60, 72, 76, 74, 79, 83]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.greater_equal(x, y) ], weight= 9
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  13 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  14 : [ tf.not_equal(x, y) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.matmul(a, b) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.concat(values, axis) ], weight= 36
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([32 53 45 38 29 89 64 23], shape=(8,), dtype=int32)

Input 'in2':
tf.Tensor([38 53 89 38 32 64], shape=(6,), dtype=int32)

Output:
tf.Tensor([3 1 5 3 0 6], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6, 8]

Description: find the indices of all elements

Searching...

Could not find solution within 300 seconds.
Found in  301.95197915200015 s!
[2.38398204300006, 3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 62.68739586599986, 300.052284978, 300.19206805199997, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 301.95197915200015, 302.0517314919998]
Benchmark # 89  --  tf.transpose(tf.multiply(in2, tf.transpose(in1)))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]], [2.0, 0.5, 1.0]], output=[[[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]], [[[0.4, 0.5, 0.0], [0.3, 0.2, 0.1]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]])] description = multiply tensors by scalars in a batched way constants = []
{ "id": "chatcmpl-8Pz8hXQftZrST4XuwRb523mEWKCO7", "object": "chat.completion", "created": 1701203911, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[59, 1, 14, 101, 56, 83, 105, 8, 11, 72, 76, 74, 79, 17, 98]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1656, "completion_tokens": 45, "total_tokens": 1701 } }

{'id': 'chatcmpl-8Pz8hXQftZrST4XuwRb523mEWKCO7', 'object': 'chat.completion', 'created': 1701203911, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[59, 1, 14, 101, 56, 83, 105, 8, 11, 72, 76, 74, 79, 17, 98]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1656, 'completion_tokens': 45, 'total_tokens': 1701}}
Altering:  [59, 1, 14, 101, 56, 83, 105, 8, 11, 72, 76, 74, 79, 17, 98]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.squeeze(input) ], weight= 11
Operation  12 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  13 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  14 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[[[0.1 0.2 0.3]
   [0.4 0.5 0.6]]]


 [[[0.8 1.  0. ]
   [0.6 0.4 0.2]]]


 [[[0.9 0.8 0.7]
   [0.1 0.2 0.3]]]], shape=(3, 1, 2, 3), dtype=float32)

Input 'in2':
tf.Tensor([2.  0.5 1. ], shape=(3,), dtype=float32)

Output:
tf.Tensor(
[[[[0.2 0.4 0.6]
   [0.8 1.  1.2]]]


 [[[0.4 0.5 0. ]
   [0.3 0.2 0.1]]]


 [[[0.9 0.8 0.7]
   [0.1 0.2 0.3]]]], shape=(3, 1, 2, 3), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: multiply tensors by scalars in a batched way

Searching...

Found solution: tf.transpose(tf.multiply(in2, tf.transpose(in1)))

Solution was found in 2.8 seconds:
tf.transpose(tf.multiply(in2, tf.transpose(in1)))
Found in  2.7502820309996423 s!
[2.38398204300006, 2.7502820309996423, 3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 62.68739586599986, 300.052284978, 300.19206805199997, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 301.95197915200015, 302.0517314919998]
Benchmark # 90  --  tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[5, 6, 3], output=[[0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0]])] description = create a binary matrix where a specified column is set to one constants = []
{ "id": "chatcmpl-8Pz8kCck13T4Tc4AHm9PtRokUlyqJ", "object": "chat.completion", "created": 1701203914, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 11, 59, 101, 12, 57, 58, 14, 16, 36, 61, 62, 111, 83, 104]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1552, "completion_tokens": 45, "total_tokens": 1597 } }

{'id': 'chatcmpl-8Pz8kCck13T4Tc4AHm9PtRokUlyqJ', 'object': 'chat.completion', 'created': 1701203914, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 11, 59, 101, 12, 57, 58, 14, 16, 36, 61, 62, 111, 83, 104]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1552, 'completion_tokens': 45, 'total_tokens': 1597}}
Altering:  [1, 11, 59, 101, 12, 57, 58, 14, 16, 36, 61, 62, 111, 83, 104]

Reweighted:
Operation  0 : [ tf.constant(value) ], weight= 6
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.add(x, y) ], weight= 8
Operation  4 : [ tf.divide(x, y) ], weight= 8
Operation  5 : [ tf.one_hot(indices, depth) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.tile(input, multiples) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.zeros(shape) ], weight= 12
Operation  12 : [ tf.ones(shape) ], weight= 13
Operation  13 : [ tf.exp(x) ], weight= 15
Operation  14 : [ tf.math.log(x) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.matmul(a, b) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  30 : [ tf.transpose(a) ], weight= 24
Operation  31 : [ tf.where(condition) ], weight= 24
Operation  32 : [ tf.where(condition, x, y) ], weight= 24
Operation  33 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  34 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
5

Input 'in2':
6

Input 'in3':
3

Output:
tf.Tensor(
[[0 0 0 1 0 0]
 [0 0 0 1 0 0]
 [0 0 0 1 0 0]
 [0 0 0 1 0 0]
 [0 0 0 1 0 0]], shape=(5, 6), dtype=int32)

Constants: [0, 1, -1, True, False]

Description: create a binary matrix where a specified column is set to one

Searching...

Could not find solution within 300 seconds.
Found in  300.20551648799983 s!
[2.38398204300006, 2.7502820309996423, 3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 62.68739586599986, 300.052284978, 300.19206805199997, 300.20551648799983, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 301.95197915200015, 302.0517314919998]
Benchmark # 91  --  tf.gather(in1, in2, axis=1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[5, 6, 7, 8, 9], [10, 11, 12, 13, 14]], [0, 2, 4]], output=[[5, 7, 9], [10, 12, 14]])] description =  constants = []
{ "id": "chatcmpl-8PzDbu7Z5vsiIpfEXD7xZ3uCIG0cn", "object": "chat.completion", "created": 1701204215, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 22, 11, 1, 59, 101, 14, 57, 58, 26, 27, 15, 60, 105, 106]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1500, "completion_tokens": 45, "total_tokens": 1545 } }

{'id': 'chatcmpl-8PzDbu7Z5vsiIpfEXD7xZ3uCIG0cn', 'object': 'chat.completion', 'created': 1701204215, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 22, 11, 1, 59, 101, 14, 57, 58, 26, 27, 15, 60, 105, 106]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1500, 'completion_tokens': 45, 'total_tokens': 1545}}
Altering:  [83, 22, 11, 1, 59, 101, 14, 57, 58, 26, 27, 15, 60, 105, 106]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.greater(x, y) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.greater_equal(x, y) ], weight= 9
Operation  11 : [ tf.minimum(x, y) ], weight= 9
Operation  12 : [ tf.concat(values, axis) ], weight= 10
Operation  13 : [ tf.not_equal(x, y) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.matmul(a, b) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 5  6  7  8  9]
 [10 11 12 13 14]], shape=(2, 5), dtype=int32)

Input 'in2':
tf.Tensor([0 2 4], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[ 5  7  9]
 [10 12 14]], shape=(2, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 5]

Searching...

Found solution: tf.transpose(tf.gather(tf.transpose(in1), in2))

Solution was found in 2.4 seconds:
tf.transpose(tf.gather(tf.transpose(in1), in2))
Found in  2.4389428419999604 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.1715551140000002, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 62.68739586599986, 300.052284978, 300.19206805199997, 300.20551648799983, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 301.95197915200015, 302.0517314919998]
Benchmark # 92  --  in1[:, :, 0]
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[[1, 2], [1, 2], [2, 3]], [[1.1, 4], [2, 1], [3, 6]], [[7.1, 10], [8, 11], [9, 7]]]], output=[[1, 1, 2], [1.1, 2, 3], [7.1, 8, 9]])] description =  constants = []
{ "id": "chatcmpl-8PzDdrD7pq1xGgNxDssdAnPBrG7Pr", "object": "chat.completion", "created": 1701204217, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 102, 56, 103, 15, 60, 26, 27, 57, 58, 11, 21]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1534, "completion_tokens": 45, "total_tokens": 1579 } }

{'id': 'chatcmpl-8PzDdrD7pq1xGgNxDssdAnPBrG7Pr', 'object': 'chat.completion', 'created': 1701204217, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 101, 102, 56, 103, 15, 60, 26, 27, 57, 58, 11, 21]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1534, 'completion_tokens': 45, 'total_tokens': 1579}}
Altering:  [1, 14, 59, 101, 102, 56, 103, 15, 60, 26, 27, 57, 58, 11, 21]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.greater_equal(x, y) ], weight= 9
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.fill(dims, value) ], weight= 12
Operation  13 : [ tf.not_equal(x, y) ], weight= 13
Operation  14 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[[ 1.   2. ]
  [ 1.   2. ]
  [ 2.   3. ]]

 [[ 1.1  4. ]
  [ 2.   1. ]
  [ 3.   6. ]]

 [[ 7.1 10. ]
  [ 8.  11. ]
  [ 9.   7. ]]], shape=(3, 3, 2), dtype=float32)

Output:
tf.Tensor(
[[1.  1.  2. ]
 [1.1 2.  3. ]
 [7.1 8.  9. ]], shape=(3, 3), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Searching...

Found solution: tf.tensordot(in1, tf.one_hot(0, 2), 1)

Solution was found in 6.5 seconds:
tf.tensordot(in1, tf.one_hot(0, 2), 1)
Found in  6.496961027999987 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.1715551140000002, 6.496961027999987, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 62.68739586599986, 300.052284978, 300.19206805199997, 300.20551648799983, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 301.95197915200015, 302.0517314919998]
Benchmark # 93  --  tf.transpose(tf.reshape(in1, (5, 3)))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014]], output=[[1000, 1003, 1006, 1009, 1012], [1001, 1004, 1007, 1010, 1013], [1002, 1005, 1008, 1011, 1014]])] description =  constants = [3, 5]
{ "id": "chatcmpl-8PzDkmb4mTpNvHbtPStI3dLYgxYiQ", "object": "chat.completion", "created": 1701204224, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 16, 36, 96, 97, 42, 9, 83, 11, 100, 56, 103]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1567, "completion_tokens": 45, "total_tokens": 1612 } }

{'id': 'chatcmpl-8PzDkmb4mTpNvHbtPStI3dLYgxYiQ', 'object': 'chat.completion', 'created': 1701204224, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 101, 16, 36, 96, 97, 42, 9, 83, 11, 100, 56, 103]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1567, 'completion_tokens': 45, 'total_tokens': 1612}}
Altering:  [1, 14, 59, 101, 16, 36, 96, 97, 42, 9, 83, 11, 100, 56, 103]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.square(x) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.concat(values, axis) ], weight= 10
Operation  10 : [ tf.stack(values, axis) ], weight= 10
Operation  11 : [ tf.exp(x) ], weight= 15
Operation  12 : [ tf.math.log(x) ], weight= 15
Operation  13 : [ tf.math.reciprocal(x) ], weight= 15
Operation  14 : [ tf.sqrt(x) ], weight= 16
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.minimum(x, y) ], weight= 32
Operation  40 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  41 : [ tf.zeros_like(input) ], weight= 32
Operation  42 : [ IndexingAxis1Operation ], weight= 32
Operation  43 : [ IndexingOperation ], weight= 32
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.zeros(shape) ], weight= 40
Operation  73 : [ tf.add_n(inputs) ], weight= 44
Operation  74 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  80 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  81 : [ tf.not_equal(x, y) ], weight= 44
Operation  82 : [ tf.ones(shape) ], weight= 44
Operation  83 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  84 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  85 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  86 : [ tf.transpose(a, perm) ], weight= 44
Operation  87 : [ tf.argmin(input, axis) ], weight= 48
Operation  88 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  89 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  90 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  91 : [ tf.math.logical_not(x) ], weight= 48
Operation  92 : [ tf.math.negative(x) ], weight= 48
Operation  93 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  94 : [ tf.math.top_k(input, k) ], weight= 48
Operation  95 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  96 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  97 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  98 : [ tf.sign(x) ], weight= 48
Operation  99 : [ tf.unique_with_counts(x) ], weight= 48
Operation  100 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013
 1014], shape=(15,), dtype=int32)

Output:
tf.Tensor(
[[1000 1003 1006 1009 1012]
 [1001 1004 1007 1010 1013]
 [1002 1005 1008 1011 1014]], shape=(3, 5), dtype=int32)

Constants: [3, 5, 0, 1, -1, True, False, 15]

Searching...

Found solution: tf.transpose(tf.reshape(in1, (5, 3)))

Solution was found in 16.1 seconds:
tf.transpose(tf.reshape(in1, (5, 3)))
Found in  16.132522098999743 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.1715551140000002, 6.496961027999987, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 62.68739586599986, 300.052284978, 300.19206805199997, 300.20551648799983, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 301.95197915200015, 302.0517314919998]
Benchmark # 94  --  tf.boolean_mask(in1, tf.cast(in1[:, 1], tf.bool))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[1, 2, 3, 4, 5], [9, 8, 7, 6, 5], [3, 0, 2, 5, 8], [8, 8, 6, 3, 2], [2, 0, 7, 7, 3], [9, 0, 3, 2, 7], [1, 3, 8, 9, 4]]], output=[[1, 2, 3, 4, 5], [9, 8, 7, 6, 5], [8, 8, 6, 3, 2], [1, 3, 8, 9, 4]])] description =  constants = []
{ "id": "chatcmpl-8PzE0kyualiTXQlKVISq7QEUmDJGS", "object": "chat.completion", "created": 1701204240, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 15, 60, 26, 27, 57, 58, 56, 103, 83, 105, 11]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1609, "completion_tokens": 45, "total_tokens": 1654 } }

{'id': 'chatcmpl-8PzE0kyualiTXQlKVISq7QEUmDJGS', 'object': 'chat.completion', 'created': 1701204240, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 101, 15, 60, 26, 27, 57, 58, 56, 103, 83, 105, 11]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1609, 'completion_tokens': 45, 'total_tokens': 1654}}
Altering:  [1, 14, 59, 101, 15, 60, 26, 27, 57, 58, 56, 103, 83, 105, 11]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  6 : [ tf.transpose(a) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.greater_equal(x, y) ], weight= 9
Operation  12 : [ tf.minimum(x, y) ], weight= 9
Operation  13 : [ tf.concat(values, axis) ], weight= 10
Operation  14 : [ tf.not_equal(x, y) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  37 : [ tf.zeros_like(input) ], weight= 32
Operation  38 : [ IndexingAxis1Operation ], weight= 32
Operation  39 : [ IndexingOperation ], weight= 32
Operation  40 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[1 2 3 4 5]
 [9 8 7 6 5]
 [3 0 2 5 8]
 [8 8 6 3 2]
 [2 0 7 7 3]
 [9 0 3 2 7]
 [1 3 8 9 4]], shape=(7, 5), dtype=int32)

Output:
tf.Tensor(
[[1 2 3 4 5]
 [9 8 7 6 5]
 [8 8 6 3 2]
 [1 3 8 9 4]], shape=(4, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 5, 7]

Searching...

Found solution: tf.boolean_mask(in1, tf.cast(in1[:, 1], tf.bool))

Solution was found in 180.1 seconds:
tf.boolean_mask(in1, tf.cast(in1[:, 1], tf.bool))
Found in  180.11930864000033 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.1715551140000002, 6.496961027999987, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 62.68739586599986, 180.11930864000033, 300.052284978, 300.19206805199997, 300.20551648799983, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 301.95197915200015, 302.0517314919998]
Benchmark # 95  --  tf.gather(in1, tf.argsort(in1[:, 0], stable=True))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[6, 3, 7, 8, 4], [8, 9, 4, 5, 3], [1, 5, 3, 6, 9], [2, 1, 4, 3, 2], [7, 9, 6, 2, 7], [5, 8, 0, 4, 2]]], output=[[1, 5, 3, 6, 9], [2, 1, 4, 3, 2], [5, 8, 0, 4, 2], [6, 3, 7, 8, 4], [7, 9, 6, 2, 7], [8, 9, 4, 5, 3]])] description =  constants = []
{ "id": "chatcmpl-8PzGv6JePpmhsFduiMHfjbBCNZWul", "object": "chat.completion", "created": 1701204421, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 1, 101, 59, 14, 16, 36, 57, 58, 62, 111, 9, 26, 27, 22]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1624, "completion_tokens": 45, "total_tokens": 1669 } }

{'id': 'chatcmpl-8PzGv6JePpmhsFduiMHfjbBCNZWul', 'object': 'chat.completion', 'created': 1701204421, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 1, 101, 59, 14, 16, 36, 57, 58, 62, 111, 9, 26, 27, 22]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1624, 'completion_tokens': 45, 'total_tokens': 1669}}
Altering:  [83, 1, 101, 59, 14, 16, 36, 57, 58, 62, 111, 9, 26, 27, 22]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.greater(x, y) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.greater_equal(x, y) ], weight= 9
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.zeros(shape) ], weight= 12
Operation  12 : [ tf.ones(shape) ], weight= 13
Operation  13 : [ tf.exp(x) ], weight= 15
Operation  14 : [ tf.math.log(x) ], weight= 15
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.matmul(a, b) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[6 3 7 8 4]
 [8 9 4 5 3]
 [1 5 3 6 9]
 [2 1 4 3 2]
 [7 9 6 2 7]
 [5 8 0 4 2]], shape=(6, 5), dtype=int32)

Output:
tf.Tensor(
[[1 5 3 6 9]
 [2 1 4 3 2]
 [5 8 0 4 2]
 [6 3 7 8 4]
 [7 9 6 2 7]
 [8 9 4 5 3]], shape=(6, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 6]

Searching...

Could not find solution within 300 seconds.
Found in  302.3336198100001 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.1715551140000002, 6.496961027999987, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 62.68739586599986, 180.11930864000033, 300.052284978, 300.19206805199997, 300.20551648799983, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 301.95197915200015, 302.0517314919998, 302.3336198100001]
Benchmark # 96  --  tf.reshape(in1, (2, 2))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[4, 5, 6, 7]], output=[[4, 5], [6, 7]])] description =  constants = [2]
{ "id": "chatcmpl-8PzLpxHrpjDjvtJudIFC1fV0khChe", "object": "chat.completion", "created": 1701204725, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 100, 11, 1, 14, 59, 101, 56, 103, 17, 8, 92, 62, 111, 21]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1468, "completion_tokens": 45, "total_tokens": 1513 } }

{'id': 'chatcmpl-8PzLpxHrpjDjvtJudIFC1fV0khChe', 'object': 'chat.completion', 'created': 1701204725, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 100, 11, 1, 14, 59, 101, 56, 103, 17, 8, 92, 62, 111, 21]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1468, 'completion_tokens': 45, 'total_tokens': 1513}}
Altering:  [83, 100, 11, 1, 14, 59, 101, 56, 103, 17, 8, 92, 62, 111, 21]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.concat(values, axis) ], weight= 10
Operation  9 : [ tf.shape(input) ], weight= 10
Operation  10 : [ tf.stack(values, axis) ], weight= 10
Operation  11 : [ tf.fill(dims, value) ], weight= 12
Operation  12 : [ tf.zeros(shape) ], weight= 12
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.minimum(x, y) ], weight= 32
Operation  41 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingAxis1Operation ], weight= 32
Operation  44 : [ IndexingOperation ], weight= 32
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([4 5 6 7], shape=(4,), dtype=int32)

Output:
tf.Tensor(
[[4 5]
 [6 7]], shape=(2, 2), dtype=int32)

Constants: [2, 0, 1, -1, True, False, 4]

Searching...

Found solution: tf.reshape(in1, (2, 2))

Solution was found in 3.1 seconds:
tf.reshape(in1, (2, 2))
Found in  3.094805458999872 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.094805458999872, 3.1715551140000002, 6.496961027999987, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 62.68739586599986, 180.11930864000033, 300.052284978, 300.19206805199997, 300.20551648799983, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 301.95197915200015, 302.0517314919998, 302.3336198100001]
Benchmark # 97  --  tf.gather(in1, tf.argsort(in1[:, 0], stable=True))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[8, 5, 9, 3], [3, 6, 6, 8], [1, 2, 3, 4], [7, 6, 5, 4], [4, 7, 2, 6]]], output=[[1, 2, 3, 4], [3, 6, 6, 8], [4, 7, 2, 6], [7, 6, 5, 4], [8, 5, 9, 3]])] description =  constants = []
{ "id": "chatcmpl-8PzLson7d8ViOTC0mOdxJVhrIaoQm", "object": "chat.completion", "created": 1701204728, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 15, 60, 26, 27, 57, 58, 16, 36, 96, 97, 83]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1564, "completion_tokens": 45, "total_tokens": 1609 } }

{'id': 'chatcmpl-8PzLson7d8ViOTC0mOdxJVhrIaoQm', 'object': 'chat.completion', 'created': 1701204728, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 101, 15, 60, 26, 27, 57, 58, 16, 36, 96, 97, 83]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1564, 'completion_tokens': 45, 'total_tokens': 1609}}
Altering:  [1, 14, 59, 101, 15, 60, 26, 27, 57, 58, 16, 36, 96, 97, 83]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.square(x) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.greater_equal(x, y) ], weight= 9
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.not_equal(x, y) ], weight= 13
Operation  12 : [ tf.exp(x) ], weight= 15
Operation  13 : [ tf.math.log(x) ], weight= 15
Operation  14 : [ tf.cast(x, dtype) ], weight= 16
Operation  15 : [ tf.sqrt(x) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.matmul(a, b) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.zeros(shape) ], weight= 40
Operation  73 : [ tf.add_n(inputs) ], weight= 44
Operation  74 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  80 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[8 5 9 3]
 [3 6 6 8]
 [1 2 3 4]
 [7 6 5 4]
 [4 7 2 6]], shape=(5, 4), dtype=int32)

Output:
tf.Tensor(
[[1 2 3 4]
 [3 6 6 8]
 [4 7 2 6]
 [7 6 5 4]
 [8 5 9 3]], shape=(5, 4), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 5]

Searching...

Could not find solution within 300 seconds.
Found in  312.79329991800023 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.094805458999872, 3.1715551140000002, 6.496961027999987, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 62.68739586599986, 180.11930864000033, 300.052284978, 300.19206805199997, 300.20551648799983, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 301.95197915200015, 302.0517314919998, 302.3336198100001, 312.79329991800023]
Benchmark # 98  --  tf.boolean_mask(in1, tf.greater(in1[:, 0], 1))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[5, 7], [6, 8], [-1, 9], [-2, 10], [2, 11], [1, 12], [3, -3]]], output=[[5, 7], [6, 8], [2, 11], [3, -3]])] description =  constants = [1]
{ "id": "chatcmpl-8PzQw5gEIWh1G6HFeSMyrDay6QPdv", "object": "chat.completion", "created": 1701205042, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 101, 16, 36, 96, 97, 42, 43, 34, 26, 27, 15, 60]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1512, "completion_tokens": 45, "total_tokens": 1557 } }

{'id': 'chatcmpl-8PzQw5gEIWh1G6HFeSMyrDay6QPdv', 'object': 'chat.completion', 'created': 1701205042, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 101, 16, 36, 96, 97, 42, 43, 34, 26, 27, 15, 60]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1512, 'completion_tokens': 45, 'total_tokens': 1557}}
Altering:  [1, 14, 59, 101, 16, 36, 96, 97, 42, 43, 34, 26, 27, 15, 60]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.add(x, y) ], weight= 8
Operation  4 : [ tf.divide(x, y) ], weight= 8
Operation  5 : [ tf.square(x) ], weight= 8
Operation  6 : [ tf.subtract(x, y) ], weight= 8
Operation  7 : [ tf.greater_equal(x, y) ], weight= 9
Operation  8 : [ tf.not_equal(x, y) ], weight= 13
Operation  9 : [ tf.exp(x) ], weight= 15
Operation  10 : [ tf.math.divide_no_nan(x, y) ], weight= 15
Operation  11 : [ tf.math.log(x) ], weight= 15
Operation  12 : [ tf.math.reciprocal(x) ], weight= 15
Operation  13 : [ tf.cast(x, dtype) ], weight= 16
Operation  14 : [ tf.sqrt(x) ], weight= 16
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ tf.math.reciprocal_no_nan(x) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.matmul(a, b) ], weight= 24
Operation  24 : [ tf.maximum(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  30 : [ tf.transpose(a) ], weight= 24
Operation  31 : [ tf.where(condition) ], weight= 24
Operation  32 : [ tf.where(condition, x, y) ], weight= 24
Operation  33 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  34 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  35 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  36 : [ tf.range(start) ], weight= 28
Operation  37 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  38 : [ tf.tile(input, multiples) ], weight= 28
Operation  39 : [ tf.argmax(input, axis) ], weight= 32
Operation  40 : [ tf.minimum(x, y) ], weight= 32
Operation  41 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingAxis1Operation ], weight= 32
Operation  44 : [ IndexingOperation ], weight= 32
Operation  45 : [ tf.concat(values, axis) ], weight= 36
Operation  46 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  47 : [ tf.ones_like(input) ], weight= 36
Operation  48 : [ tf.shape(input) ], weight= 36
Operation  49 : [ tf.stack(values, axis) ], weight= 36
Operation  50 : [ SlicingAxis0BothOperation ], weight= 36
Operation  51 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis0RightOperation ], weight= 36
Operation  53 : [ SlicingAxis1BothOperation ], weight= 36
Operation  54 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  55 : [ SlicingAxis1RightOperation ], weight= 36
Operation  56 : [ TripleCreationOperation ], weight= 36
Operation  57 : [ tf.squeeze(input) ], weight= 38
Operation  58 : [ tf.abs(x) ], weight= 40
Operation  59 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  60 : [ tf.eye(num_rows) ], weight= 40
Operation  61 : [ tf.fill(dims, value) ], weight= 40
Operation  62 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  63 : [ tf.math.bincount(arr) ], weight= 40
Operation  64 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  65 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  66 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  67 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  68 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  69 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  71 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  73 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  74 : [ tf.unstack(value, axis) ], weight= 40
Operation  75 : [ tf.zeros(shape) ], weight= 40
Operation  76 : [ tf.add_n(inputs) ], weight= 44
Operation  77 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  78 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  79 : [ tf.math.ceil(x) ], weight= 44
Operation  80 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  81 : [ tf.math.floor(x) ], weight= 44
Operation  82 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  83 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  84 : [ tf.ones(shape) ], weight= 44
Operation  85 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  86 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  87 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  88 : [ tf.transpose(a, perm) ], weight= 44
Operation  89 : [ tf.argmin(input, axis) ], weight= 48
Operation  90 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  91 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  92 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  93 : [ tf.math.logical_not(x) ], weight= 48
Operation  94 : [ tf.math.negative(x) ], weight= 48
Operation  95 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  96 : [ tf.math.top_k(input, k) ], weight= 48
Operation  97 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  98 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  99 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  100 : [ tf.sign(x) ], weight= 48
Operation  101 : [ tf.unique_with_counts(x) ], weight= 48
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.sort(values, axis) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.range(start, limit, delta) ], weight= 56
Operation  114 : [ tf.repeat(input, repeats) ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  116 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 5  7]
 [ 6  8]
 [-1  9]
 [-2 10]
 [ 2 11]
 [ 1 12]
 [ 3 -3]], shape=(7, 2), dtype=int32)

Output:
tf.Tensor(
[[ 5  7]
 [ 6  8]
 [ 2 11]
 [ 3 -3]], shape=(4, 2), dtype=int32)

Constants: [1, 0, -1, True, False, 2, 4, 7]

Searching...

Could not find solution within 300 seconds.
Found in  300.19661533100043 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.094805458999872, 3.1715551140000002, 6.496961027999987, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 62.68739586599986, 180.11930864000033, 300.052284978, 300.19206805199997, 300.19661533100043, 300.20551648799983, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 301.95197915200015, 302.0517314919998, 302.3336198100001, 312.79329991800023]
Benchmark # 99  --  tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[8, 5, 9, 3], [3, 6, 6, 8], [7, 9, 3, 4], [7, 6, 5, 4], [3, 7, 2, 6]]], output=[[3, 6, 6, 8], [3, 7, 2, 6], [7, 6, 5, 4], [7, 9, 3, 4], [8, 5, 9, 3]])] description =  constants = []
{ "id": "chatcmpl-8PzVp6CpV7QgOAO7tnC3fS7vWes9f", "object": "chat.completion", "created": 1701205345, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 105, 1, 59, 101, 14, 9, 56, 103, 11, 100, 102, 87, 22, 24]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1564, "completion_tokens": 45, "total_tokens": 1609 } }

{'id': 'chatcmpl-8PzVp6CpV7QgOAO7tnC3fS7vWes9f', 'object': 'chat.completion', 'created': 1701205345, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 105, 1, 59, 101, 14, 9, 56, 103, 11, 100, 102, 87, 22, 24]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1564, 'completion_tokens': 45, 'total_tokens': 1609}}
Altering:  [83, 105, 1, 59, 101, 14, 9, 56, 103, 11, 100, 102, 87, 22, 24]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.gather_nd(params, indices) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.stack(values, axis) ], weight= 10
Operation  13 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 13
Operation  14 : [ tf.scatter_nd(indices, updates, shape) ], weight= 15
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[8 5 9 3]
 [3 6 6 8]
 [7 9 3 4]
 [7 6 5 4]
 [3 7 2 6]], shape=(5, 4), dtype=int32)

Output:
tf.Tensor(
[[3 6 6 8]
 [3 7 2 6]
 [7 6 5 4]
 [7 9 3 4]
 [8 5 9 3]], shape=(5, 4), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 5]

Searching...

Could not find solution within 300 seconds.
Found in  300.9363584040002 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.094805458999872, 3.1715551140000002, 6.496961027999987, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 62.68739586599986, 180.11930864000033, 300.052284978, 300.19206805199997, 300.19661533100043, 300.20551648799983, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 300.9363584040002, 301.95197915200015, 302.0517314919998, 302.3336198100001, 312.79329991800023]
Benchmark # 100  --  tf.cast(tf.boolean_mask(in1, tf.math.logical_not(tf.math.is_nan(in1))), tf.int32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[nan, 11, 12, nan, 16, 18]], output=[11, 12, 16, 18])] description =  constants = [nan]
{ "id": "chatcmpl-8PzahUpzFYM2conKpYLxd6CiXa5Z6", "object": "chat.completion", "created": 1701205647, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[34, 9, 83, 14, 59, 101, 1, 57, 58, 80, 72, 76, 75, 74, 56]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1472, "completion_tokens": 45, "total_tokens": 1517 } }

{'id': 'chatcmpl-8PzahUpzFYM2conKpYLxd6CiXa5Z6', 'object': 'chat.completion', 'created': 1701205647, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[34, 9, 83, 14, 59, 101, 1, 57, 58, 80, 72, 76, 75, 74, 56]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1472, 'completion_tokens': 45, 'total_tokens': 1517}}
Altering:  [34, 9, 83, 14, 59, 101, 1, 57, 58, 80, 72, 76, 75, 74, 56]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.matmul(a, b) ], weight= 7
Operation  2 : [ tf.maximum(x, y) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  12 : [ tf.reduce_mean(input_tensor, axis) ], weight= 12
Operation  13 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  14 : [ tf.math.divide_no_nan(x, y) ], weight= 15
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.greater(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([nan 11. 12. nan 16. 18.], shape=(6,), dtype=float32)

Output:
tf.Tensor([11 12 16 18], shape=(4,), dtype=int32)

Constants: [nan, 0, 1, -1, True, False, 4, 6]

Searching...

Found solution: tf.cast(tf.boolean_mask(in1, tf.equal(in1, in1)), tf.int32)

Solution was found in 6.8 seconds:
tf.cast(tf.boolean_mask(in1, tf.equal(in1, in1)), tf.int32)
Found in  6.815022890000364 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.094805458999872, 3.1715551140000002, 6.496961027999987, 6.815022890000364, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 62.68739586599986, 180.11930864000033, 300.052284978, 300.19206805199997, 300.19661533100043, 300.20551648799983, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 300.9363584040002, 301.95197915200015, 302.0517314919998, 302.3336198100001, 312.79329991800023]
Benchmark # 101  --  tf.transpose(tf.concat((tf.expand_dims(tf.range(5), axis=0), in1), axis=0))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[1, 4, 2, 7, 6], [20, 10, 50, 40, 30]]], output=[[0, 1, 20], [1, 4, 10], [2, 2, 50], [3, 7, 40], [4, 6, 30]])] description =  constants = []
{ "id": "chatcmpl-8Pzaop0Qz6wVIyPonSlbHqo5vrtCu", "object": "chat.completion", "created": 1701205654, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 1, 11, 56, 59, 72, 76, 74, 79, 14, 101, 26, 27, 15, 60]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1519, "completion_tokens": 45, "total_tokens": 1564 } }

{'id': 'chatcmpl-8Pzaop0Qz6wVIyPonSlbHqo5vrtCu', 'object': 'chat.completion', 'created': 1701205654, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 1, 11, 56, 59, 72, 76, 74, 79, 14, 101, 26, 27, 15, 60]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1519, 'completion_tokens': 45, 'total_tokens': 1564}}
Altering:  [83, 1, 11, 56, 59, 72, 76, 74, 79, 14, 101, 26, 27, 15, 60]

Reweighted:
Operation  0 : [ tf.equal(x, y) ], weight= 7
Operation  1 : [ tf.greater(x, y) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.reduce_max(input_tensor) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.greater_equal(x, y) ], weight= 9
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  13 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  14 : [ tf.not_equal(x, y) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  27 : [ tf.transpose(a) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 1  4  2  7  6]
 [20 10 50 40 30]], shape=(2, 5), dtype=int32)

Output:
tf.Tensor(
[[ 0  1 20]
 [ 1  4 10]
 [ 2  2 50]
 [ 3  7 40]
 [ 4  6 30]], shape=(5, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 5]

Searching...

Could not find solution within 300 seconds.
Found in  300.6359485740004 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.094805458999872, 3.1715551140000002, 6.496961027999987, 6.815022890000364, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 62.68739586599986, 180.11930864000033, 300.052284978, 300.19206805199997, 300.19661533100043, 300.20551648799983, 300.228903122, 300.296595336, 300.52112109899986, 300.528663423, 300.6359485740004, 300.9363584040002, 301.95197915200015, 302.0517314919998, 302.3336198100001, 312.79329991800023]
Benchmark # 102  --  tf.cast(tf.divide(in1[:, :, 1], tf.reduce_sum(in1, axis=2)), tf.float32)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[[2, 8], [2, 6], [6, 2]], [[0, 2], [1, 1], [2, 0]]]], output=[[0.8, 0.75, 0.25], [1.0, 0.5, 0.0]])] description =  constants = []
{ "id": "chatcmpl-8PzfgAADB91mwX0hEZEmp4VRjSlro", "object": "chat.completion", "created": 1701205956, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 59, 74, 75, 79, 80, 83, 9, 56, 101, 15, 60, 26, 27]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1511, "completion_tokens": 45, "total_tokens": 1556 } }

{'id': 'chatcmpl-8PzfgAADB91mwX0hEZEmp4VRjSlro', 'object': 'chat.completion', 'created': 1701205956, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 59, 74, 75, 79, 80, 83, 9, 56, 101, 15, 60, 26, 27]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1511, 'completion_tokens': 45, 'total_tokens': 1556}}
Altering:  [1, 14, 59, 74, 75, 79, 80, 83, 9, 56, 101, 15, 60, 26, 27]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.equal(x, y) ], weight= 7
Operation  2 : [ tf.greater(x, y) ], weight= 7
Operation  3 : [ tf.matmul(a, b) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  6 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  7 : [ tf.add(x, y) ], weight= 8
Operation  8 : [ tf.divide(x, y) ], weight= 8
Operation  9 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  10 : [ tf.subtract(x, y) ], weight= 8
Operation  11 : [ tf.greater_equal(x, y) ], weight= 9
Operation  12 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  13 : [ tf.reduce_mean(input_tensor, axis) ], weight= 12
Operation  14 : [ tf.not_equal(x, y) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.maximum(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  26 : [ tf.transpose(a) ], weight= 24
Operation  27 : [ tf.where(condition) ], weight= 24
Operation  28 : [ tf.where(condition, x, y) ], weight= 24
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.minimum(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.concat(values, axis) ], weight= 36
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[[2 8]
  [2 6]
  [6 2]]

 [[0 2]
  [1 1]
  [2 0]]], shape=(2, 3, 2), dtype=int32)

Output:
tf.Tensor(
[[0.8  0.75 0.25]
 [1.   0.5  0.  ]], shape=(2, 3), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Searching...

Could not find solution within 300 seconds.
Found in  300.453436236 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.094805458999872, 3.1715551140000002, 6.496961027999987, 6.815022890000364, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 62.68739586599986, 180.11930864000033, 300.052284978, 300.19206805199997, 300.19661533100043, 300.20551648799983, 300.228903122, 300.296595336, 300.453436236, 300.52112109899986, 300.528663423, 300.6359485740004, 300.9363584040002, 301.95197915200015, 302.0517314919998, 302.3336198100001, 312.79329991800023]
Benchmark # 103  --  tf.boolean_mask(in1, tf.reduce_any(tf.equal(in1[:, 1], tf.expand_dims(in2, axis=1)), axis=0))
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[101, 0, 11, 0], [102, 1, 12, 4], [103, 2, 13, 2], [104, 3, 14, 8], [105, 4, 15, 4], [106, 5, 16, 5], [107, 6, 17, 4], [108, 7, 18, 7], [109, 8, 19, 7], [110, 9, 20, 4]], [4, 2, 6]], output=[[103, 2, 13, 2], [105, 4, 15, 4], [107, 6, 17, 4]])] description =  constants = []
{ "id": "chatcmpl-8PzkYTw6U2AxoPfLKqSTWg5L8Jj6v", "object": "chat.completion", "created": 1701206258, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 8, 83, 56, 59, 14, 101, 1, 57, 58, 104, 17, 11, 62, 111]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1608, "completion_tokens": 45, "total_tokens": 1653 } }

{'id': 'chatcmpl-8PzkYTw6U2AxoPfLKqSTWg5L8Jj6v', 'object': 'chat.completion', 'created': 1701206258, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 8, 83, 56, 59, 14, 101, 1, 57, 58, 104, 17, 11, 62, 111]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1608, 'completion_tokens': 45, 'total_tokens': 1653}}
Altering:  [22, 8, 83, 56, 59, 14, 101, 1, 57, 58, 104, 17, 11, 62, 111]

Reweighted:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 5
Operation  1 : [ tf.gather(params, indices) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.maximum(x, y) ], weight= 7
Operation  4 : [ tf.multiply(x, y) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.tile(input, multiples) ], weight= 8
Operation  10 : [ tf.minimum(x, y) ], weight= 9
Operation  11 : [ tf.concat(values, axis) ], weight= 10
Operation  12 : [ tf.zeros(shape) ], weight= 12
Operation  13 : [ tf.broadcast_to(input, shape) ], weight= 13
Operation  14 : [ tf.ones(shape) ], weight= 13
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.constant(value, dtype) ], weight= 24
Operation  21 : [ tf.equal(x, y) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[101   0  11   0]
 [102   1  12   4]
 [103   2  13   2]
 [104   3  14   8]
 [105   4  15   4]
 [106   5  16   5]
 [107   6  17   4]
 [108   7  18   7]
 [109   8  19   7]
 [110   9  20   4]], shape=(10, 4), dtype=int32)

Input 'in2':
tf.Tensor([4 2 6], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[103   2  13   2]
 [105   4  15   4]
 [107   6  17   4]], shape=(3, 4), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 4, 10]

Searching...

Found solution: tf.gather(in1, tf.sort(in2, axis=0))

Solution was found in 35.7 seconds:
tf.gather(in1, tf.sort(in2, axis=0))
Found in  35.679438236999886 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.094805458999872, 3.1715551140000002, 6.496961027999987, 6.815022890000364, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 35.679438236999886, 62.68739586599986, 180.11930864000033, 300.052284978, 300.19206805199997, 300.19661533100043, 300.20551648799983, 300.228903122, 300.296595336, 300.453436236, 300.52112109899986, 300.528663423, 300.6359485740004, 300.9363584040002, 301.95197915200015, 302.0517314919998, 302.3336198100001, 312.79329991800023]
Benchmark # 104  --  tf.concat((tf.cast(in1, tf.float32), tf.fill([4, 1], float("nan"))), axis=1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[1, 0, 1, 2], [1, 1, 3, 4], [2, 0, 1, 2], [2, 1, 3, 4]]], output=[[1, 0, 1, 2, nan], [1, 1, 3, 4, nan], [2, 0, 1, 2, nan], [2, 1, 3, 4, nan]])] description =  constants = [nan]
{ "id": "chatcmpl-8Pzl86DuDiY3iYOLcCoPJspnNinkB", "object": "chat.completion", "created": 1701206294, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 14, 101, 56, 103, 11, 100, 83, 105, 106, 9, 13, 62, 111]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1550, "completion_tokens": 45, "total_tokens": 1595 } }

{'id': 'chatcmpl-8Pzl86DuDiY3iYOLcCoPJspnNinkB', 'object': 'chat.completion', 'created': 1701206294, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 59, 14, 101, 56, 103, 11, 100, 83, 105, 106, 9, 13, 62, 111]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1550, 'completion_tokens': 45, 'total_tokens': 1595}}
Altering:  [1, 59, 14, 101, 56, 103, 11, 100, 83, 105, 106, 9, 13, 62, 111]

Reweighted:
Operation  0 : [ tf.cast(x, dtype) ], weight= 4
Operation  1 : [ tf.constant(value, dtype) ], weight= 7
Operation  2 : [ tf.matmul(a, b) ], weight= 7
Operation  3 : [ tf.multiply(x, y) ], weight= 7
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  5 : [ tf.transpose(a) ], weight= 7
Operation  6 : [ tf.add(x, y) ], weight= 8
Operation  7 : [ tf.divide(x, y) ], weight= 8
Operation  8 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  9 : [ tf.subtract(x, y) ], weight= 8
Operation  10 : [ tf.concat(values, axis) ], weight= 10
Operation  11 : [ tf.stack(values, axis) ], weight= 10
Operation  12 : [ tf.zeros(shape) ], weight= 12
Operation  13 : [ tf.ones(shape) ], weight= 13
Operation  14 : [ tf.transpose(a, perm) ], weight= 13
Operation  15 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  16 : [ PairCreationOperation ], weight= 20
Operation  17 : [ SingletonTupleCreationOperation ], weight= 20
Operation  18 : [ tf.constant(value) ], weight= 23
Operation  19 : [ tf.squeeze(input, axis) ], weight= 23
Operation  20 : [ tf.equal(x, y) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  28 : [ tf.where(condition) ], weight= 24
Operation  29 : [ tf.where(condition, x, y) ], weight= 24
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.bincount(arr) ], weight= 40
Operation  60 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[1 0 1 2]
 [1 1 3 4]
 [2 0 1 2]
 [2 1 3 4]], shape=(4, 4), dtype=int32)

Output:
tf.Tensor(
[[ 1.  0.  1.  2. nan]
 [ 1.  1.  3.  4. nan]
 [ 2.  0.  1.  2. nan]
 [ 2.  1.  3.  4. nan]], shape=(4, 5), dtype=float32)

Constants: [nan, 0, 1, -1, True, False, 4, 5]

Searching...

Could not find solution within 300 seconds.
Found in  300.2388355009998 s!
[2.38398204300006, 2.4389428419999604, 2.7502820309996423, 3.055485259999955, 3.094805458999872, 3.1715551140000002, 6.496961027999987, 6.815022890000364, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 35.679438236999886, 62.68739586599986, 180.11930864000033, 300.052284978, 300.19206805199997, 300.19661533100043, 300.20551648799983, 300.228903122, 300.2388355009998, 300.296595336, 300.453436236, 300.52112109899986, 300.528663423, 300.6359485740004, 300.9363584040002, 301.95197915200015, 302.0517314919998, 302.3336198100001, 312.79329991800023]
Benchmark # 105  --  tf.cumsum(in1)
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[1, 1, 2, 1, 3, 2]], output=[1, 2, 4, 5, 8, 10])] description =  constants = []
{ "id": "chatcmpl-8Pzq06jpB1XIAD8oxvJ5PY9YfOUaE", "object": "chat.completion", "created": 1701206596, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 101, 14, 57, 58, 73, 74, 76, 77, 79, 80, 32, 33, 83]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1477, "completion_tokens": 45, "total_tokens": 1522 } }

{'id': 'chatcmpl-8Pzq06jpB1XIAD8oxvJ5PY9YfOUaE', 'object': 'chat.completion', 'created': 1701206596, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 59, 101, 14, 57, 58, 73, 74, 76, 77, 79, 80, 32, 33, 83]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1477, 'completion_tokens': 45, 'total_tokens': 1522}}
Altering:  [1, 59, 101, 14, 57, 58, 73, 74, 76, 77, 79, 80, 32, 33, 83]

Reweighted:
Operation  0 : [ tf.maximum(x, y) ], weight= 7
Operation  1 : [ tf.multiply(x, y) ], weight= 7
Operation  2 : [ tf.reduce_max(input_tensor, axis) ], weight= 7
Operation  3 : [ tf.reduce_sum(input_tensor) ], weight= 7
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 7
Operation  5 : [ tf.add(x, y) ], weight= 8
Operation  6 : [ tf.divide(x, y) ], weight= 8
Operation  7 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  8 : [ tf.subtract(x, y) ], weight= 8
Operation  9 : [ tf.minimum(x, y) ], weight= 9
Operation  10 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  11 : [ tf.reduce_min(input_tensor) ], weight= 12
Operation  12 : [ tf.reduce_min(input_tensor, axis) ], weight= 12
Operation  13 : [ tf.math.cumsum(x, axis) ], weight= 13
Operation  14 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 14
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.matmul(a, b) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.range(start) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.fill(dims, value) ], weight= 40
Operation  60 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  61 : [ tf.math.bincount(arr) ], weight= 40
Operation  62 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([1 1 2 1 3 2], shape=(6,), dtype=int32)

Output:
tf.Tensor([ 1  2  4  5  8 10], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6]

Searching...

Found solution: tf.math.cumsum(in1, axis=0)

Solution was found in 2.7 seconds:
tf.math.cumsum(in1, axis=0)
Found in  2.6572796959999323 s!
[2.38398204300006, 2.4389428419999604, 2.6572796959999323, 2.7502820309996423, 3.055485259999955, 3.094805458999872, 3.1715551140000002, 6.496961027999987, 6.815022890000364, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 35.679438236999886, 62.68739586599986, 180.11930864000033, 300.052284978, 300.19206805199997, 300.19661533100043, 300.20551648799983, 300.228903122, 300.2388355009998, 300.296595336, 300.453436236, 300.52112109899986, 300.528663423, 300.6359485740004, 300.9363584040002, 301.95197915200015, 302.0517314919998, 302.3336198100001, 312.79329991800023]
Benchmark # 106  --  tf.reduce_mean(tf.cast(in1, tf.float32), axis=0)[1:]
Normal
Operation  0 : [ tf.abs(x) ], weight= 40
Operation  1 : [ tf.add(x, y) ], weight= 28
Operation  2 : [ tf.add_n(inputs) ], weight= 44
Operation  3 : [ tf.argmax(input, axis) ], weight= 32
Operation  4 : [ tf.argmin(input, axis) ], weight= 48
Operation  5 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  6 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  8 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  9 : [ tf.cast(x, dtype) ], weight= 16
Operation  10 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  11 : [ tf.concat(values, axis) ], weight= 36
Operation  12 : [ tf.constant(value) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.divide(x, y) ], weight= 28
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.exp(x) ], weight= 52
Operation  17 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  18 : [ tf.eye(num_rows) ], weight= 40
Operation  19 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  20 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  21 : [ tf.fill(dims, value) ], weight= 40
Operation  22 : [ tf.gather(params, indices) ], weight= 24
Operation  23 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  26 : [ tf.greater(x, y) ], weight= 24
Operation  27 : [ tf.greater_equal(x, y) ], weight= 32
Operation  28 : [ tf.math.bincount(arr) ], weight= 40
Operation  29 : [ tf.math.ceil(x) ], weight= 44
Operation  30 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  31 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  32 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  33 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  34 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  35 : [ tf.math.floor(x) ], weight= 44
Operation  36 : [ tf.math.log(x) ], weight= 52
Operation  37 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  38 : [ tf.math.logical_not(x) ], weight= 48
Operation  39 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  40 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  41 : [ tf.math.negative(x) ], weight= 48
Operation  42 : [ tf.math.reciprocal(x) ], weight= 52
Operation  43 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  44 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  45 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  46 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  47 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  48 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  49 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  50 : [ tf.math.top_k(input, k) ], weight= 48
Operation  51 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  52 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  53 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  54 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  55 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  56 : [ tf.matmul(a, b) ], weight= 24
Operation  57 : [ tf.maximum(x, y) ], weight= 24
Operation  58 : [ tf.minimum(x, y) ], weight= 32
Operation  59 : [ tf.multiply(x, y) ], weight= 24
Operation  60 : [ tf.not_equal(x, y) ], weight= 44
Operation  61 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  62 : [ tf.ones(shape) ], weight= 44
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  66 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  67 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  68 : [ tf.range(start) ], weight= 28
Operation  69 : [ tf.range(start, limit, delta) ], weight= 56
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  72 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  73 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  74 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  76 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  78 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  79 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  80 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  81 : [ tf.repeat(input, repeats) ], weight= 56
Operation  82 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  83 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  84 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  85 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  86 : [ tf.round(x) ], weight= 52
Operation  87 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  88 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  90 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  91 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  92 : [ tf.shape(input) ], weight= 36
Operation  93 : [ tf.sign(x) ], weight= 48
Operation  94 : [ tf.sort(values, axis) ], weight= 52
Operation  95 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Operation  96 : [ tf.sqrt(x) ], weight= 56
Operation  97 : [ tf.square(x) ], weight= 28
Operation  98 : [ tf.squeeze(input) ], weight= 38
Operation  99 : [ tf.squeeze(input, axis) ], weight= 23
Operation  100 : [ tf.stack(values, axis) ], weight= 36
Operation  101 : [ tf.subtract(x, y) ], weight= 28
Operation  102 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  103 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  104 : [ tf.tile(input, multiples) ], weight= 28
Operation  105 : [ tf.transpose(a) ], weight= 24
Operation  106 : [ tf.transpose(a, perm) ], weight= 44
Operation  107 : [ tf.unique_with_counts(x) ], weight= 48
Operation  108 : [ tf.unstack(value, axis) ], weight= 40
Operation  109 : [ tf.where(condition) ], weight= 24
Operation  110 : [ tf.where(condition, x, y) ], weight= 24
Operation  111 : [ tf.zeros(shape) ], weight= 40
Operation  112 : [ tf.zeros_like(input) ], weight= 32
Operation  113 : [ IndexingAxis1Operation ], weight= 32
Operation  114 : [ IndexingOperation ], weight= 32
Operation  115 : [ PairCreationOperation ], weight= 20
Operation  116 : [ SingletonTupleCreationOperation ], weight= 20
Operation  117 : [ SlicingAxis0BothOperation ], weight= 36
Operation  118 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  119 : [ SlicingAxis0RightOperation ], weight= 36
Operation  120 : [ SlicingAxis1BothOperation ], weight= 36
Operation  121 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  122 : [ SlicingAxis1RightOperation ], weight= 36
Operation  123 : [ TripleCreationOperation ], weight= 36
Sorted
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.constant(value) ], weight= 23
Operation  5 : [ tf.squeeze(input, axis) ], weight= 23
Operation  6 : [ tf.constant(value, dtype) ], weight= 24
Operation  7 : [ tf.equal(x, y) ], weight= 24
Operation  8 : [ tf.gather(params, indices) ], weight= 24
Operation  9 : [ tf.greater(x, y) ], weight= 24
Operation  10 : [ tf.matmul(a, b) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.ones_like(input) ], weight= 36
Operation  41 : [ tf.shape(input) ], weight= 36
Operation  42 : [ tf.stack(values, axis) ], weight= 36
Operation  43 : [ SlicingAxis0BothOperation ], weight= 36
Operation  44 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  45 : [ SlicingAxis0RightOperation ], weight= 36
Operation  46 : [ SlicingAxis1BothOperation ], weight= 36
Operation  47 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis1RightOperation ], weight= 36
Operation  49 : [ TripleCreationOperation ], weight= 36
Operation  50 : [ tf.squeeze(input) ], weight= 38
Operation  51 : [ tf.abs(x) ], weight= 40
Operation  52 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  53 : [ tf.eye(num_rows) ], weight= 40
Operation  54 : [ tf.fill(dims, value) ], weight= 40
Operation  55 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
examples = [Example(inputs=[[[0, 6, 0], [3, 101, 14], [0, 91, 6], [5, 15, 0]]], output=[53.25, 5.0])] description =  constants = []
{ "id": "chatcmpl-8Pzq3UwCLhqATmp2wqFm7xUZ45HFJ", "object": "chat.completion", "created": 1701206599, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[74, 1, 59, 57, 58, 101, 14, 56, 83, 103, 11, 100, 42, 36, 16]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1489, "completion_tokens": 45, "total_tokens": 1534 } }

{'id': 'chatcmpl-8Pzq3UwCLhqATmp2wqFm7xUZ45HFJ', 'object': 'chat.completion', 'created': 1701206599, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[74, 1, 59, 57, 58, 101, 14, 56, 83, 103, 11, 100, 42, 36, 16]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1489, 'completion_tokens': 45, 'total_tokens': 1534}}
Altering:  [74, 1, 59, 57, 58, 101, 14, 56, 83, 103, 11, 100, 42, 36, 16]

Reweighted:
Operation  0 : [ tf.matmul(a, b) ], weight= 7
Operation  1 : [ tf.maximum(x, y) ], weight= 7
Operation  2 : [ tf.multiply(x, y) ], weight= 7
Operation  3 : [ tf.tensordot(a, b, axes) ], weight= 7
Operation  4 : [ tf.add(x, y) ], weight= 8
Operation  5 : [ tf.divide(x, y) ], weight= 8
Operation  6 : [ tf.reshape(tensor, shape) ], weight= 8
Operation  7 : [ tf.subtract(x, y) ], weight= 8
Operation  8 : [ tf.minimum(x, y) ], weight= 9
Operation  9 : [ tf.concat(values, axis) ], weight= 10
Operation  10 : [ tf.stack(values, axis) ], weight= 10
Operation  11 : [ tf.reduce_mean(input_tensor) ], weight= 12
Operation  12 : [ tf.exp(x) ], weight= 15
Operation  13 : [ tf.math.log(x) ], weight= 15
Operation  14 : [ tf.math.reciprocal(x) ], weight= 15
Operation  15 : [ tf.cast(x, dtype) ], weight= 16
Operation  16 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  17 : [ PairCreationOperation ], weight= 20
Operation  18 : [ SingletonTupleCreationOperation ], weight= 20
Operation  19 : [ tf.constant(value) ], weight= 23
Operation  20 : [ tf.squeeze(input, axis) ], weight= 23
Operation  21 : [ tf.constant(value, dtype) ], weight= 24
Operation  22 : [ tf.equal(x, y) ], weight= 24
Operation  23 : [ tf.gather(params, indices) ], weight= 24
Operation  24 : [ tf.greater(x, y) ], weight= 24
Operation  25 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  28 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  29 : [ tf.transpose(a) ], weight= 24
Operation  30 : [ tf.where(condition) ], weight= 24
Operation  31 : [ tf.where(condition, x, y) ], weight= 24
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  34 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  35 : [ tf.range(start) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  41 : [ tf.zeros_like(input) ], weight= 32
Operation  42 : [ IndexingAxis1Operation ], weight= 32
Operation  43 : [ IndexingOperation ], weight= 32
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[  0   6   0]
 [  3 101  14]
 [  0  91   6]
 [  5  15   0]], shape=(4, 3), dtype=int32)

Output:
tf.Tensor([53.25  5.  ], shape=(2,), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3, 4]

Searching...

Could not find solution within 300 seconds.
Found in  300.06494317599936 s!
[2.38398204300006, 2.4389428419999604, 2.6572796959999323, 2.7502820309996423, 3.055485259999955, 3.094805458999872, 3.1715551140000002, 6.496961027999987, 6.815022890000364, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 35.679438236999886, 62.68739586599986, 180.11930864000033, 300.052284978, 300.06494317599936, 300.19206805199997, 300.19661533100043, 300.20551648799983, 300.228903122, 300.2388355009998, 300.296595336, 300.453436236, 300.52112109899986, 300.528663423, 300.6359485740004, 300.9363584040002, 301.95197915200015, 302.0517314919998, 302.3336198100001, 312.79329991800023]
[2.38398204300006, 2.4389428419999604, 2.6572796959999323, 2.7502820309996423, 3.055485259999955, 3.094805458999872, 3.1715551140000002, 6.496961027999987, 6.815022890000364, 10.006027430000017, 11.169672976000015, 11.306060845000047, 12.949130384, 16.132522098999743, 35.679438236999886, 62.68739586599986, 180.11930864000033, 300.052284978, 300.06494317599936, 300.19206805199997, 300.19661533100043, 300.20551648799983, 300.228903122, 300.2388355009998, 300.296595336, 300.453436236, 300.52112109899986, 300.528663423, 300.6359485740004, 300.9363584040002, 301.95197915200015, 302.0517314919998, 302.3336198100001, 312.79329991800023]
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 visualize_replication.py 
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 test_openai.py 
{ "id": "chatcmpl-8Q1lDQXip11bQYPh5lf42VN71HbnC", "object": "chat.completion", "created": 1701213987, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[72, 77, 101, 105, 3, 4, 73, 78, 57, 58]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 856, "completion_tokens": 30, "total_tokens": 886 } }

content_string:  [72, 77, 101, 105, 3, 4, 73, 78, 57, 58]
[72, 77, 101, 105, 3, 4, 73, 78, 57, 58]
iterating!  72
iterating!  77
iterating!  101
iterating!  105
iterating!  3
iterating!  4
iterating!  73
iterating!  78
iterating!  57
iterating!  58
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 test_openai.py
{ "id": "chatcmpl-8Q1niBCHBSuKtpfXzHyPKRRNwFHDN", "object": "chat.completion", "created": 1701214142, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "Based on the problem description, we need to find the maximum and minimum values of tensors, perform subtraction, and transpose tensors. 

The 'maximum' and 'minimum' operations will be used to find the maximum and minimum values of tensors. The 'subtract' operation will be used to subtract these values. The 'transpose' operation will be used to transpose the tensors for comparison.

Additionally, we may need to reshape tensors to ensure that they are compatible for subtraction, and 'reshape' operation will be used for this. 

The 'argmax' and 'argmin' may be useful to find the indices of the maximum and minimum values respectively. We may also need 'gather' operation to collect specific tensor slices based on the indices we find.

The 'reduce_max' and 'reduce_min' operations can also be useful as they compute the maximum and minimum of elements across dimensions of a tensor. 

Here are the ten most important functions:

[73, 77, 101, 105, 83, 3, 4, 23, 72, 76] 

Justification:

- 73: 'reduce_max': Computes the maximum of elements across dimensions of a tensor.

- 77: 'reduce_min': Computes the minimum of elements across dimensions of a tensor.

- 101: 'subtract': Subtracts tensors element-wise.

- 105: 'transpose': Transposes a tensor.

- 83: 'reshape': Reshapes a tensor.

- 3: 'argmax': Returns the index with the largest value across axes of a tensor.

- 4: 'argmin': Returns the index with the smallest value across axes of a tensor.

- 23: 'gather': Gathers slices from params according to indices.

- 72: 'reduce_max': Computes the maximum of elements across dimensions of a tensor.

- 76: 'reduce_min': Computes the minimum of elements across dimensions of a tensor." }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 857, "completion_tokens": 395, "total_tokens": 1252 } }

Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/test_openai.py", line 23, in <module>
    main()
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/test_openai.py", line 9, in main
    data = json.loads(response.stdout)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 353, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Invalid control character at: line 1 column 336 (char 335)
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % code .
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 benchmarks.py           
Benchmark # 73  --  tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)
input and output examples = [Example(inputs=[[[0.3, 0.1, 0.4], [0.1, 0.5, 0.9], [0.2, 0.6, 0.5], [0.3, 0.5, 0.8], [0.9, 0.7, 0.9]], [[0.3, 0.2, 0.3], [0.8, 0.4, 0.6], [0.2, 0.6, 0.4], [0.3, 0.3, 0.8]]], output=[0.02, 0.19, 0.01, 0.04])] natural language description = find the minimum distance between two sets of points
{ "id": "chatcmpl-8Q1xeksS7G6vqRQIfUJDjAtY5yUBu", "object": "chat.completion", "created": 1701214758, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[0, 1, 12, 56, 57, 58, 59, 75, 77, 97]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 903, "completion_tokens": 30, "total_tokens": 933 } }

{'id': 'chatcmpl-8Q1xeksS7G6vqRQIfUJDjAtY5yUBu', 'object': 'chat.completion', 'created': 1701214758, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[0, 1, 12, 56, 57, 58, 59, 75, 77, 97]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 903, 'completion_tokens': 30, 'total_tokens': 933}}
Altering:  [0, 1, 12, 56, 57, 58, 59, 75, 77, 97]
Input 'in1':
tf.Tensor(
[[0.3 0.1 0.4]
 [0.1 0.5 0.9]
 [0.2 0.6 0.5]
 [0.3 0.5 0.8]
 [0.9 0.7 0.9]], shape=(5, 3), dtype=float32)

Input 'in2':
tf.Tensor(
[[0.3 0.2 0.3]
 [0.8 0.4 0.6]
 [0.2 0.6 0.4]
 [0.3 0.3 0.8]], shape=(4, 3), dtype=float32)

Output:
tf.Tensor([0.02 0.19 0.01 0.04], shape=(4,), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4, 5]

Description: find the minimum distance between two sets of points

Searching...

^CTraceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 68, in <module>
    app.run(main)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 308, in run
    _run_main(main, args)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 254, in _run_main
    sys.exit(main(argv))
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 60, in main
    time = run_tf_coder(bm.examples[0].inputs, bm.examples[0].output, bm.constants, bm.description, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 40, in run_tf_coder
    result = colab_interface.run_value_search_from_colab(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/colab_interface.py", line 105, in run_value_search_from_colab
    return value_search.run_value_search_from_example(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 703, in run_value_search_from_example
    return run_value_search(benchmark, settings, **kwargs)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 644, in run_value_search
    solutions, value_set, values_by_weight, statistics = _find_solutions(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 383, in _find_solutions
    for value in operation.enumerate_values_with_weight(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/operation_base.py", line 279, in enumerate_values_with_weight
    results.extend(self._enumerate_values(arg_options, end_time, settings,
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/operation_base.py", line 187, in _enumerate_values
    for i, arg_values in enumerate(itertools.product(*arg_options)):
KeyboardInterrupt

carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 benchmarks.py
Benchmark # 0  --  tf.add(in1, in2)
input and output examples = [Example(inputs=[[10], [20]], output=[30])] natural language description = Add elementwise
{ "id": "chatcmpl-8Q1yl54pPoSS1NNccqOvFywF3XLMh", "object": "chat.completion", "created": 1701214827, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 2]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 749, "completion_tokens": 6, "total_tokens": 755 } }

{'id': 'chatcmpl-8Q1yl54pPoSS1NNccqOvFywF3XLMh', 'object': 'chat.completion', 'created': 1701214827, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 2]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 749, 'completion_tokens': 6, 'total_tokens': 755}}
Altering:  [1, 2]
Input 'in1':
tf.Tensor([10], shape=(1,), dtype=int32)

Input 'in2':
tf.Tensor([20], shape=(1,), dtype=int32)

Output:
tf.Tensor([30], shape=(1,), dtype=int32)

Constants: [0, 1, -1, True, False]

Description: Add elementwise

Searching...

Found solution: tf.add(in1, in2)

Solution was found in 0.9 seconds:
tf.add(in1, in2)
Found in  0.9020112910000009 s!
[0.9020112910000009]
Benchmark # 1  --  tf.cast(in1, tf.bool)
input and output examples = [Example(inputs=[[1, 0, 1, 1, 0]], output=[True, False, True, True, False])] natural language description = cast a tensor
{ "id": "chatcmpl-8Q1ymGsVdUDGuETW6IQcXNzBmkPRn", "object": "chat.completion", "created": 1701214828, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[9, 7, 83, 92, 110, 23, 24, 102, 22, 39]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 766, "completion_tokens": 30, "total_tokens": 796 } }

{'id': 'chatcmpl-8Q1ymGsVdUDGuETW6IQcXNzBmkPRn', 'object': 'chat.completion', 'created': 1701214828, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[9, 7, 83, 92, 110, 23, 24, 102, 22, 39]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 766, 'completion_tokens': 30, 'total_tokens': 796}}
Altering:  [9, 7, 83, 92, 110, 23, 24, 102, 22, 39]
Input 'in1':
tf.Tensor([1 0 1 1 0], shape=(5,), dtype=int32)

Output:
tf.Tensor([ True False  True  True False], shape=(5,), dtype=bool)

Constants: [0, 1, -1, True, False, 5]

Description: cast a tensor

Searching...

Found solution: tf.cast(in1, tf.bool)

Solution was found in 1.7 seconds:
tf.cast(in1, tf.bool)
Found in  1.6846378799999986 s!
[0.9020112910000009, 1.6846378799999986]
Benchmark # 2  --  tf.add(in1, tf.expand_dims(in2, 1))
input and output examples = [Example(inputs=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [1000, 2000, 3000, 4000, 5000]], output=[[1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099], [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099], [3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099], [4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045, 4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4095, 4096, 4097, 4098, 4099], [5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059, 5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5069, 5070, 5071, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 5093, 5094, 5095, 5096, 5097, 5098, 5099]])] natural language description = Add two tensors
{ "id": "chatcmpl-8Q1ynZ9PPeqF0Fjwhmesiy78mWAEu", "object": "chat.completion", "created": 1701214829, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 12, 68, 81, 83, 100, 101, 102, 104, 105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 3061, "completion_tokens": 30, "total_tokens": 3091 } }

{'id': 'chatcmpl-8Q1ynZ9PPeqF0Fjwhmesiy78mWAEu', 'object': 'chat.completion', 'created': 1701214829, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 12, 68, 81, 83, 100, 101, 102, 104, 105]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 3061, 'completion_tokens': 30, 'total_tokens': 3091}}
Altering:  [1, 12, 68, 81, 83, 100, 101, 102, 104, 105]
Input 'in1':
tf.Tensor(
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
 96 97 98 99], shape=(100,), dtype=int32)

Input 'in2':
tf.Tensor([1000 2000 3000 4000 5000], shape=(5,), dtype=int32)

Output:
tf.Tensor(
[[1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013
  1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027
  1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041
  1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055
  1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069
  1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083
  1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097
  1098 1099]
 [2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013
  2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027
  2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041
  2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055
  2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069
  2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083
  2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097
  2098 2099]
 [3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013
  3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027
  3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041
  3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055
  3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069
  3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083
  3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097
  3098 3099]
 [4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013
  4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027
  4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 4041
  4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055
  4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069
  4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083
  4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097
  4098 4099]
 [5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5010 5011 5012 5013
  5014 5015 5016 5017 5018 5019 5020 5021 5022 5023 5024 5025 5026 5027
  5028 5029 5030 5031 5032 5033 5034 5035 5036 5037 5038 5039 5040 5041
  5042 5043 5044 5045 5046 5047 5048 5049 5050 5051 5052 5053 5054 5055
  5056 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 5067 5068 5069
  5070 5071 5072 5073 5074 5075 5076 5077 5078 5079 5080 5081 5082 5083
  5084 5085 5086 5087 5088 5089 5090 5091 5092 5093 5094 5095 5096 5097
  5098 5099]], shape=(5, 100), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 100]

Description: Add two tensors

Searching...

Found solution: tf.add(in1, tf.expand_dims(in2, 1))

Solution was found in 3.4 seconds:
tf.add(in1, tf.expand_dims(in2, 1))
Found in  3.379084123000002 s!
[0.9020112910000009, 1.6846378799999986, 3.379084123000002]
Benchmark # 3  --  tf.add(in1, tf.expand_dims(in2, 1))
input and output examples = [Example(inputs=[[3, 4, 5], [10, 20, 30]], output=[[13, 14, 15], [23, 24, 25], [33, 34, 35]])] natural language description = Add two tensors with broadcasting
{ "id": "chatcmpl-8Q1yr7g2Oa4GPhz05L9hmNzzXQVeR", "object": "chat.completion", "created": 1701214833, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 2, 8, 9, 12, 22, 23, 24, 25, 102]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 788, "completion_tokens": 30, "total_tokens": 818 } }

{'id': 'chatcmpl-8Q1yr7g2Oa4GPhz05L9hmNzzXQVeR', 'object': 'chat.completion', 'created': 1701214833, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 2, 8, 9, 12, 22, 23, 24, 25, 102]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 788, 'completion_tokens': 30, 'total_tokens': 818}}
Altering:  [1, 2, 8, 9, 12, 22, 23, 24, 25, 102]
Input 'in1':
tf.Tensor([3 4 5], shape=(3,), dtype=int32)

Input 'in2':
tf.Tensor([10 20 30], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[13 14 15]
 [23 24 25]
 [33 34 35]], shape=(3, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3]

Description: Add two tensors with broadcasting

Searching...

Found solution: tf.add(in1, tf.expand_dims(in2, 1))

Solution was found in 2.6 seconds:
tf.add(in1, tf.expand_dims(in2, 1))
Found in  2.5573499690000006 s!
[0.9020112910000009, 1.6846378799999986, 2.5573499690000006, 3.379084123000002]
Benchmark # 4  --  tf.cast(in1, tf.float32)
input and output examples = [Example(inputs=[[12, 34, 56]], output=[12.0, 34.0, 56.0])] natural language description = Cast an int tensor into a float tensor
{ "id": "chatcmpl-8Q1ytJr0F6tHBUn0toYV1titnzHyn", "object": "chat.completion", "created": 1701214835, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[9]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 769, "completion_tokens": 3, "total_tokens": 772 } }

{'id': 'chatcmpl-8Q1ytJr0F6tHBUn0toYV1titnzHyn', 'object': 'chat.completion', 'created': 1701214835, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[9]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 769, 'completion_tokens': 3, 'total_tokens': 772}}
Altering:  [9]
Input 'in1':
tf.Tensor([12 34 56], shape=(3,), dtype=int32)

Output:
tf.Tensor([12. 34. 56.], shape=(3,), dtype=float32)

Constants: [0, 1, -1, True, False, 3]

Description: Cast an int tensor into a float tensor

Searching...

Found solution: tf.cast(in1, tf.float32)

Solution was found in 0.7 seconds:
tf.cast(in1, tf.float32)
Found in  0.6966237609999979 s!
[0.6966237609999979, 0.9020112910000009, 1.6846378799999986, 2.5573499690000006, 3.379084123000002]
Benchmark # 5  --  in1[in2]
input and output examples = [Example(inputs=[[12, 34, 56, 78], -2], output=56)] natural language description = Index into a tensor
{ "id": "chatcmpl-8Q1yuaB1dE072gvuS4pboqh0uQrlL", "object": "chat.completion", "created": 1701214836, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 23, 24, 25, 87, 102, 113, 114, 120, 121]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 759, "completion_tokens": 30, "total_tokens": 789 } }

{'id': 'chatcmpl-8Q1yuaB1dE072gvuS4pboqh0uQrlL', 'object': 'chat.completion', 'created': 1701214836, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 23, 24, 25, 87, 102, 113, 114, 120, 121]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 759, 'completion_tokens': 30, 'total_tokens': 789}}
Altering:  [22, 23, 24, 25, 87, 102, 113, 114, 120, 121]
Input 'in1':
tf.Tensor([12 34 56 78], shape=(4,), dtype=int32)

Input 'in2':
-2

Output:
tf.Tensor(56, shape=(), dtype=int32)

Constants: [0, 1, -1, True, False, 4]

Description: Index into a tensor

Searching...

Found solution: in1[in2]

Solution was found in 1.7 seconds:
in1[in2]
Found in  1.724330263999999 s!
[0.6966237609999979, 0.9020112910000009, 1.6846378799999986, 1.724330263999999, 2.5573499690000006, 3.379084123000002]
Benchmark # 6  --  tf.constant(10)
input and output examples = [Example(inputs={'ones': [1, 2, 3, 4, 5], 'tens': [10, 20, 30, 40, 50], 'hundreds': [100, 200, 300]}, output=10)] natural language description = find the right constant
{ "id": "chatcmpl-8Q1ywwtXLhUv60XREYXMwZI69nqAg", "object": "chat.completion", "created": 1701214838, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 2, 12, 13, 14, 57, 58, 59, 101, 105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 794, "completion_tokens": 30, "total_tokens": 824 } }

{'id': 'chatcmpl-8Q1ywwtXLhUv60XREYXMwZI69nqAg', 'object': 'chat.completion', 'created': 1701214838, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 2, 12, 13, 14, 57, 58, 59, 101, 105]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 794, 'completion_tokens': 30, 'total_tokens': 824}}
Altering:  [1, 2, 12, 13, 14, 57, 58, 59, 101, 105]
Input 'ones':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Input 'hundreds':
tf.Tensor([100 200 300], shape=(3,), dtype=int32)

Output:
tf.Tensor(10, shape=(), dtype=int32)

Constants: [1, 10, 100, 0, -1, True, False, 3, 5]

Description: find the right constant

Searching...

Found solution: tf.cast(tf.reduce_sum(tf.divide(tf.tensordot(ones, tens, 1), hundreds)), tf.int32)

Solution was found in 47.4 seconds:
tf.cast(tf.reduce_sum(tf.divide(tf.tensordot(ones, tens, 1), hundreds)), tf.int32)
Found in  47.442387862 s!
[0.6966237609999979, 0.9020112910000009, 1.6846378799999986, 1.724330263999999, 2.5573499690000006, 3.379084123000002, 47.442387862]
Benchmark # 7  --  tens
input and output examples = [Example(inputs={'ones': [1, 2, 3, 4, 5], 'tens': [10, 20, 30, 40, 50], 'hundreds': [100, 200, 300]}, output=[10, 20, 30, 40, 50])] natural language description = find the right input variable
{ "id": "chatcmpl-8Q1zhsCyOYnw9qned7RTNDdj0pwxj", "object": "chat.completion", "created": 1701214885, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[7, 22, 23, 24, 25, 87, 102, 113, 114, 115]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 807, "completion_tokens": 30, "total_tokens": 837 } }

{'id': 'chatcmpl-8Q1zhsCyOYnw9qned7RTNDdj0pwxj', 'object': 'chat.completion', 'created': 1701214885, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[7, 22, 23, 24, 25, 87, 102, 113, 114, 115]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 807, 'completion_tokens': 30, 'total_tokens': 837}}
Altering:  [7, 22, 23, 24, 25, 87, 102, 113, 114, 115]
Input 'ones':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Input 'hundreds':
tf.Tensor([100 200 300], shape=(3,), dtype=int32)

Output:
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Constants: [999, 0, 1, -1, True, False, 3, 5]

Description: find the right input variable

Searching...

WARNING: The output is the same as the input or constant `tens`. Check that your input-output example is correct.

Could not find solution within 300 seconds.
Found in  300.08408803000003 s!
[0.6966237609999979, 0.9020112910000009, 1.6846378799999986, 1.724330263999999, 2.5573499690000006, 3.379084123000002, 47.442387862, 300.08408803000003]
Benchmark # 8  --  tens
input and output examples = [Example(inputs={'tens': [10, 20, 30, 40, 50]}, output=[10, 20, 30, 40, 50])] natural language description = find the right input variable
{ "id": "chatcmpl-8Q24YV2chvTgdCPhBbwdGBmRYX6Kw", "object": "chat.completion", "created": 1701215186, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "The given task does not require any specific TensorFlow operations considering the input provided. The operation is simply accessing the values in the input dictionary and returning them. Therefore, none of the TensorFlow operations listed are considered important for this task." }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 776, "completion_tokens": 45, "total_tokens": 821 } }

{'id': 'chatcmpl-8Q24YV2chvTgdCPhBbwdGBmRYX6Kw', 'object': 'chat.completion', 'created': 1701215186, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': 'The given task does not require any specific TensorFlow operations considering the input provided. The operation is simply accessing the values in the input dictionary and returning them. Therefore, none of the TensorFlow operations listed are considered important for this task.'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 776, 'completion_tokens': 45, 'total_tokens': 821}}
Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 68, in <module>
    app.run(main)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 308, in run
    _run_main(main, args)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 254, in _run_main
    sys.exit(main(argv))
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 60, in main
    time = run_tf_coder(bm.examples[0].inputs, bm.examples[0].output, bm.constants, bm.description, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 40, in run_tf_coder
    result = colab_interface.run_value_search_from_colab(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/colab_interface.py", line 105, in run_value_search_from_colab
    return value_search.run_value_search_from_example(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 703, in run_value_search_from_example
    return run_value_search(benchmark, settings, **kwargs)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 642, in run_value_search
    operations = get_reweighted_operations_gpt(benchmark, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 600, in get_reweighted_operations_gpt
    functions = json.loads(content_string)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 355, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 benchmarks.py
Benchmark # 0  --  tf.add(in1, in2)
input and output examples = [Example(inputs=[[10], [20]], output=[30])] natural language description = Add elementwise
{ "id": "chatcmpl-8Q2DKNC4HpW0VwpBAsn2Eo4EwYGSL", "object": "chat.completion", "created": 1701215730, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1: add]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 864, "completion_tokens": 5, "total_tokens": 869 } }

{'id': 'chatcmpl-8Q2DKNC4HpW0VwpBAsn2Eo4EwYGSL', 'object': 'chat.completion', 'created': 1701215730, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1: add]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 864, 'completion_tokens': 5, 'total_tokens': 869}}
Traceback (most recent call last):
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 68, in <module>
    app.run(main)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 308, in run
    _run_main(main, args)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/absl/app.py", line 254, in _run_main
    sys.exit(main(argv))
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 60, in main
    time = run_tf_coder(bm.examples[0].inputs, bm.examples[0].output, bm.constants, bm.description, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/benchmarks.py", line 40, in run_tf_coder
    result = colab_interface.run_value_search_from_colab(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/colab_interface.py", line 105, in run_value_search_from_colab
    return value_search.run_value_search_from_example(
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 703, in run_value_search_from_example
    return run_value_search(benchmark, settings, **kwargs)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 642, in run_value_search
    operations = get_reweighted_operations_gpt(benchmark, settings)
  File "/Users/carson/Desktop/498/final-project/tensorflow-coder-IntPrSys/tf_coder/value_search/value_search.py", line 600, in get_reweighted_operations_gpt
    functions = json.loads(content_string)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/__init__.py", line 346, in loads
    return _default_decoder.decode(s)
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 337, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/json/decoder.py", line 353, in raw_decode
    obj, end = self.scan_once(s, idx)
json.decoder.JSONDecodeError: Expecting ',' delimiter: line 1 column 3 (char 2)
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % python3 benchmarks.py
Benchmark # 0  --  tf.add(in1, in2)
input and output examples = [Example(inputs=[[10], [20]], output=[30])] natural language description = Add elementwise
{ "id": "chatcmpl-8Q2FVsWyZE10Ap92iOuj2NYw5vEqm", "object": "chat.completion", "created": 1701215865, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 873, "completion_tokens": 3, "total_tokens": 876 } }

{'id': 'chatcmpl-8Q2FVsWyZE10Ap92iOuj2NYw5vEqm', 'object': 'chat.completion', 'created': 1701215865, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 873, 'completion_tokens': 3, 'total_tokens': 876}}
Altering:  [1]
Input 'in1':
tf.Tensor([10], shape=(1,), dtype=int32)

Input 'in2':
tf.Tensor([20], shape=(1,), dtype=int32)

Output:
tf.Tensor([30], shape=(1,), dtype=int32)

Constants: [0, 1, -1, True, False]

Description: Add elementwise

Searching...

Found solution: tf.add(in1, in2)

Solution was found in 0.9 seconds:
tf.add(in1, in2)
Found in  0.858646147 s!
[0.858646147]
Benchmark # 1  --  tf.cast(in1, tf.bool)
input and output examples = [Example(inputs=[[1, 0, 1, 1, 0]], output=[True, False, True, True, False])] natural language description = cast a tensor
{ "id": "chatcmpl-8Q2FWDwHW7ijqpRKuk6yubwELfTuU", "object": "chat.completion", "created": 1701215866, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[9, 15, 37, 38, 39, 40, 70, 71, 92, 109]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 890, "completion_tokens": 30, "total_tokens": 920 } }

{'id': 'chatcmpl-8Q2FWDwHW7ijqpRKuk6yubwELfTuU', 'object': 'chat.completion', 'created': 1701215866, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[9, 15, 37, 38, 39, 40, 70, 71, 92, 109]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 890, 'completion_tokens': 30, 'total_tokens': 920}}
Altering:  [9, 15, 37, 38, 39, 40, 70, 71, 92, 109]
Input 'in1':
tf.Tensor([1 0 1 1 0], shape=(5,), dtype=int32)

Output:
tf.Tensor([ True False  True  True False], shape=(5,), dtype=bool)

Constants: [0, 1, -1, True, False, 5]

Description: cast a tensor

Searching...

Found solution: tf.cast(in1, tf.bool)

Solution was found in 1.8 seconds:
tf.cast(in1, tf.bool)
Found in  1.7556903019999996 s!
[0.858646147, 1.7556903019999996]
Benchmark # 2  --  tf.add(in1, tf.expand_dims(in2, 1))
input and output examples = [Example(inputs=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], [1000, 2000, 3000, 4000, 5000]], output=[[1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099], [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043, 2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096, 2097, 2098, 2099], [3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3060, 3061, 3062, 3063, 3064, 3065, 3066, 3067, 3068, 3069, 3070, 3071, 3072, 3073, 3074, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082, 3083, 3084, 3085, 3086, 3087, 3088, 3089, 3090, 3091, 3092, 3093, 3094, 3095, 3096, 3097, 3098, 3099], [4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019, 4020, 4021, 4022, 4023, 4024, 4025, 4026, 4027, 4028, 4029, 4030, 4031, 4032, 4033, 4034, 4035, 4036, 4037, 4038, 4039, 4040, 4041, 4042, 4043, 4044, 4045, 4046, 4047, 4048, 4049, 4050, 4051, 4052, 4053, 4054, 4055, 4056, 4057, 4058, 4059, 4060, 4061, 4062, 4063, 4064, 4065, 4066, 4067, 4068, 4069, 4070, 4071, 4072, 4073, 4074, 4075, 4076, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4086, 4087, 4088, 4089, 4090, 4091, 4092, 4093, 4094, 4095, 4096, 4097, 4098, 4099], [5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007, 5008, 5009, 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 5019, 5020, 5021, 5022, 5023, 5024, 5025, 5026, 5027, 5028, 5029, 5030, 5031, 5032, 5033, 5034, 5035, 5036, 5037, 5038, 5039, 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5049, 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059, 5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5069, 5070, 5071, 5072, 5073, 5074, 5075, 5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 5093, 5094, 5095, 5096, 5097, 5098, 5099]])] natural language description = Add two tensors
{ "id": "chatcmpl-8Q2FYkMKzC4fy3OSt39UB3WQQlSAR", "object": "chat.completion", "created": 1701215868, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 12, 83, 21, 11, 104, 81, 68, 79, 62]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 3185, "completion_tokens": 30, "total_tokens": 3215 } }

{'id': 'chatcmpl-8Q2FYkMKzC4fy3OSt39UB3WQQlSAR', 'object': 'chat.completion', 'created': 1701215868, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 12, 83, 21, 11, 104, 81, 68, 79, 62]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 3185, 'completion_tokens': 30, 'total_tokens': 3215}}
Altering:  [1, 12, 83, 21, 11, 104, 81, 68, 79, 62]
Input 'in1':
tf.Tensor(
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
 96 97 98 99], shape=(100,), dtype=int32)

Input 'in2':
tf.Tensor([1000 2000 3000 4000 5000], shape=(5,), dtype=int32)

Output:
tf.Tensor(
[[1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013
  1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027
  1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041
  1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055
  1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069
  1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083
  1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097
  1098 1099]
 [2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013
  2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027
  2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041
  2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055
  2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069
  2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083
  2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097
  2098 2099]
 [3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013
  3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027
  3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041
  3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055
  3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069
  3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083
  3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097
  3098 3099]
 [4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013
  4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027
  4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 4041
  4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055
  4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069
  4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083
  4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097
  4098 4099]
 [5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5010 5011 5012 5013
  5014 5015 5016 5017 5018 5019 5020 5021 5022 5023 5024 5025 5026 5027
  5028 5029 5030 5031 5032 5033 5034 5035 5036 5037 5038 5039 5040 5041
  5042 5043 5044 5045 5046 5047 5048 5049 5050 5051 5052 5053 5054 5055
  5056 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 5067 5068 5069
  5070 5071 5072 5073 5074 5075 5076 5077 5078 5079 5080 5081 5082 5083
  5084 5085 5086 5087 5088 5089 5090 5091 5092 5093 5094 5095 5096 5097
  5098 5099]], shape=(5, 100), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 100]

Description: Add two tensors

Searching...

Found solution: tf.add(in1, tf.expand_dims(in2, 1))

Solution was found in 2.4 seconds:
tf.add(in1, tf.expand_dims(in2, 1))
Found in  2.3805071789999985 s!
[0.858646147, 1.7556903019999996, 2.3805071789999985]
Benchmark # 3  --  tf.add(in1, tf.expand_dims(in2, 1))
input and output examples = [Example(inputs=[[3, 4, 5], [10, 20, 30]], output=[[13, 14, 15], [23, 24, 25], [33, 34, 35]])] natural language description = Add two tensors with broadcasting
{ "id": "chatcmpl-8Q2Fa8HBcL6kN6jvykEomd2TrvJSQ", "object": "chat.completion", "created": 1701215870, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 8]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 912, "completion_tokens": 6, "total_tokens": 918 } }

{'id': 'chatcmpl-8Q2Fa8HBcL6kN6jvykEomd2TrvJSQ', 'object': 'chat.completion', 'created': 1701215870, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 8]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 912, 'completion_tokens': 6, 'total_tokens': 918}}
Altering:  [1, 8]
Input 'in1':
tf.Tensor([3 4 5], shape=(3,), dtype=int32)

Input 'in2':
tf.Tensor([10 20 30], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[13 14 15]
 [23 24 25]
 [33 34 35]], shape=(3, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3]

Description: Add two tensors with broadcasting

Searching...

Found solution: tf.add(in1, tf.expand_dims(in2, 1))

Solution was found in 1.1 seconds:
tf.add(in1, tf.expand_dims(in2, 1))
Found in  1.0633178140000012 s!
[0.858646147, 1.0633178140000012, 1.7556903019999996, 2.3805071789999985]
Benchmark # 4  --  tf.cast(in1, tf.float32)
input and output examples = [Example(inputs=[[12, 34, 56]], output=[12.0, 34.0, 56.0])] natural language description = Cast an int tensor into a float tensor
{ "id": "chatcmpl-8Q2FbSlPB3KC2JoJqdeemjTgFkWyP", "object": "chat.completion", "created": 1701215871, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[9]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 893, "completion_tokens": 3, "total_tokens": 896 } }

{'id': 'chatcmpl-8Q2FbSlPB3KC2JoJqdeemjTgFkWyP', 'object': 'chat.completion', 'created': 1701215871, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[9]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 893, 'completion_tokens': 3, 'total_tokens': 896}}
Altering:  [9]
Input 'in1':
tf.Tensor([12 34 56], shape=(3,), dtype=int32)

Output:
tf.Tensor([12. 34. 56.], shape=(3,), dtype=float32)

Constants: [0, 1, -1, True, False, 3]

Description: Cast an int tensor into a float tensor

Searching...

Found solution: tf.cast(in1, tf.float32)

Solution was found in 0.8 seconds:
tf.cast(in1, tf.float32)
Found in  0.7820480090000004 s!
[0.7820480090000004, 0.858646147, 1.0633178140000012, 1.7556903019999996, 2.3805071789999985]
Benchmark # 5  --  in1[in2]
input and output examples = [Example(inputs=[[12, 34, 56, 78], -2], output=56)] natural language description = Index into a tensor
{ "id": "chatcmpl-8Q2FccFVfHiUm1qWuBD3LT424czde", "object": "chat.completion", "created": 1701215872, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 24, 25, 113, 114, 117, 118, 119, 120, 121]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 883, "completion_tokens": 30, "total_tokens": 913 } }

{'id': 'chatcmpl-8Q2FccFVfHiUm1qWuBD3LT424czde', 'object': 'chat.completion', 'created': 1701215872, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 24, 25, 113, 114, 117, 118, 119, 120, 121]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 883, 'completion_tokens': 30, 'total_tokens': 913}}
Altering:  [22, 24, 25, 113, 114, 117, 118, 119, 120, 121]
Input 'in1':
tf.Tensor([12 34 56 78], shape=(4,), dtype=int32)

Input 'in2':
-2

Output:
tf.Tensor(56, shape=(), dtype=int32)

Constants: [0, 1, -1, True, False, 4]

Description: Index into a tensor

Searching...

Found solution: in1[in2]

Solution was found in 2.7 seconds:
in1[in2]
Found in  2.7470914409999985 s!
[0.7820480090000004, 0.858646147, 1.0633178140000012, 1.7556903019999996, 2.3805071789999985, 2.7470914409999985]
Benchmark # 6  --  tf.constant(10)
input and output examples = [Example(inputs={'ones': [1, 2, 3, 4, 5], 'tens': [10, 20, 30, 40, 50], 'hundreds': [100, 200, 300]}, output=10)] natural language description = find the right constant
{ "id": "chatcmpl-8Q2Ffk1LV2g1ndRSkzEb7sPFXVzhh", "object": "chat.completion", "created": 1701215875, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[12, 1, 14, 101, 74, 76, 72, 78, 79, 59]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 918, "completion_tokens": 30, "total_tokens": 948 } }

{'id': 'chatcmpl-8Q2Ffk1LV2g1ndRSkzEb7sPFXVzhh', 'object': 'chat.completion', 'created': 1701215875, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[12, 1, 14, 101, 74, 76, 72, 78, 79, 59]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 918, 'completion_tokens': 30, 'total_tokens': 948}}
Altering:  [12, 1, 14, 101, 74, 76, 72, 78, 79, 59]
Input 'ones':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Input 'hundreds':
tf.Tensor([100 200 300], shape=(3,), dtype=int32)

Output:
tf.Tensor(10, shape=(), dtype=int32)

Constants: [1, 10, 100, 0, -1, True, False, 3, 5]

Description: find the right constant

Searching...

Found solution: tf.cast(tf.reduce_sum(tf.divide(tf.reduce_sum(tf.multiply(ones, tens)), hundreds)), tf.int32)

Solution was found in 9.1 seconds:
tf.cast(tf.reduce_sum(tf.divide(tf.reduce_sum(tf.multiply(ones, tens)), hundreds)), tf.int32)
Found in  9.142389382000001 s!
[0.7820480090000004, 0.858646147, 1.0633178140000012, 1.7556903019999996, 2.3805071789999985, 2.7470914409999985, 9.142389382000001]
Benchmark # 7  --  tens
input and output examples = [Example(inputs={'ones': [1, 2, 3, 4, 5], 'tens': [10, 20, 30, 40, 50], 'hundreds': [100, 200, 300]}, output=[10, 20, 30, 40, 50])] natural language description = find the right input variable
{ "id": "chatcmpl-8Q2Fob2lU6NG9lFrDmw48CfdN007N", "object": "chat.completion", "created": 1701215884, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[113, 114, 115, 116, 117, 118, 119, 120, 121, 122]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 931, "completion_tokens": 30, "total_tokens": 961 } }

{'id': 'chatcmpl-8Q2Fob2lU6NG9lFrDmw48CfdN007N', 'object': 'chat.completion', 'created': 1701215884, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[113, 114, 115, 116, 117, 118, 119, 120, 121, 122]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 931, 'completion_tokens': 30, 'total_tokens': 961}}
Altering:  [113, 114, 115, 116, 117, 118, 119, 120, 121, 122]
Input 'ones':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Input 'hundreds':
tf.Tensor([100 200 300], shape=(3,), dtype=int32)

Output:
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Constants: [999, 0, 1, -1, True, False, 3, 5]

Description: find the right input variable

Searching...

WARNING: The output is the same as the input or constant `tens`. Check that your input-output example is correct.

Could not find solution within 300 seconds.
Found in  300.304388078 s!
[0.7820480090000004, 0.858646147, 1.0633178140000012, 1.7556903019999996, 2.3805071789999985, 2.7470914409999985, 9.142389382000001, 300.304388078]
Benchmark # 8  --  tens
input and output examples = [Example(inputs={'tens': [10, 20, 30, 40, 50]}, output=[10, 20, 30, 40, 50])] natural language description = find the right input variable
{ "id": "chatcmpl-8Q2KfT56ga7ODS5aW5W4Nel2xIka8", "object": "chat.completion", "created": 1701216185, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[12, 22, 83, 92, 100, 113, 114, 117, 118, 119]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 900, "completion_tokens": 30, "total_tokens": 930 } }

{'id': 'chatcmpl-8Q2KfT56ga7ODS5aW5W4Nel2xIka8', 'object': 'chat.completion', 'created': 1701216185, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[12, 22, 83, 92, 100, 113, 114, 117, 118, 119]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 900, 'completion_tokens': 30, 'total_tokens': 930}}
Altering:  [12, 22, 83, 92, 100, 113, 114, 117, 118, 119]
Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Output:
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Constants: [999, 0, 1, -1, True, False, 5]

Description: find the right input variable

Searching...

WARNING: The output is the same as the input or constant `tens`. Check that your input-output example is correct.

Found solution: tens

Solution was found in 2.1 seconds:
tens
Found in  2.1074303350000037 s!
[0.7820480090000004, 0.858646147, 1.0633178140000012, 1.7556903019999996, 2.1074303350000037, 2.3805071789999985, 2.7470914409999985, 9.142389382000001, 300.304388078]
Benchmark # 9  --  in1[:, 1:in2]
input and output examples = [Example(inputs=[[[12, 34, 56, 78], [-1, -2, -3, -4]], -1], output=[[34, 56], [-2, -3]])] natural language description = Slice a tensor
{ "id": "chatcmpl-8Q2KhpK6j9JLTBF8hZOsysu3O2zUV", "object": "chat.completion", "created": 1701216187, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[113, 114, 117, 118, 119, 120, 121, 122, 83, 98]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 905, "completion_tokens": 30, "total_tokens": 935 } }

{'id': 'chatcmpl-8Q2KhpK6j9JLTBF8hZOsysu3O2zUV', 'object': 'chat.completion', 'created': 1701216187, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[113, 114, 117, 118, 119, 120, 121, 122, 83, 98]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 905, 'completion_tokens': 30, 'total_tokens': 935}}
Altering:  [113, 114, 117, 118, 119, 120, 121, 122, 83, 98]
Input 'in1':
tf.Tensor(
[[12 34 56 78]
 [-1 -2 -3 -4]], shape=(2, 4), dtype=int32)

Input 'in2':
-1

Output:
tf.Tensor(
[[34 56]
 [-2 -3]], shape=(2, 2), dtype=int32)

Constants: [0, 1, True, False, 2, 4]

Description: Slice a tensor

Searching...

Found solution: in1[:, 1:in2]

Solution was found in 2.3 seconds:
in1[:, 1:in2]
Found in  2.278909717000033 s!
[0.7820480090000004, 0.858646147, 1.0633178140000012, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.7470914409999985, 9.142389382000001, 300.304388078]
Benchmark # 10  --  tf.sparse.add(in1, tf.sparse.from_dense(in2))
input and output examples = [Example(inputs=[<tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x7fa9202cd940>, [[-3, 0], [-5, 0]]], output=<tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x7fa9202cd970>)] natural language description = Add sparse tensor with dense tensor
{ "id": "chatcmpl-8Q2KjBXlJ0fs3S7mnhhxtN0gzufI2", "object": "chat.completion", "created": 1701216189, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 9, 83, 92, 104, 102, 87, 79, 80, 57]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 925, "completion_tokens": 30, "total_tokens": 955 } }

{'id': 'chatcmpl-8Q2KjBXlJ0fs3S7mnhhxtN0gzufI2', 'object': 'chat.completion', 'created': 1701216189, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 9, 83, 92, 104, 102, 87, 79, 80, 57]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 925, 'completion_tokens': 30, 'total_tokens': 955}}
Altering:  [1, 9, 83, 92, 104, 102, 87, 79, 80, 57]
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]], shape=(2, 2), dtype=int64), values=tf.Tensor([12 34], shape=(2,), dtype=int32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Input 'in2':
tf.Tensor(
[[-3  0]
 [-5  0]], shape=(2, 2), dtype=int32)

Output:
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]
 [1 0]], shape=(3, 2), dtype=int64), values=tf.Tensor([ 9 34 -5], shape=(3,), dtype=int32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Constants: [0, 1, -1, True, False, 2]

Description: Add sparse tensor with dense tensor

Searching...

Found solution: tf.sparse.add(in1, tf.sparse.from_dense(in2))

Solution was found in 3.5 seconds:
tf.sparse.add(in1, tf.sparse.from_dense(in2))
Found in  3.496535494999989 s!
[0.7820480090000004, 0.858646147, 1.0633178140000012, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.7470914409999985, 3.496535494999989, 9.142389382000001, 300.304388078]
Benchmark # 11  --  tf.sparse.reduce_sum(in1, axis=1, output_is_sparse=True)
input and output examples = [Example(inputs=[<tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x7fa920530d00>], output=<tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x7fa920530fd0>)] natural language description = Reduce sum on a sparse tensor
{ "id": "chatcmpl-8Q2KnfQIbOpa3dDhIaziAoU5B2JVc", "object": "chat.completion", "created": 1701216193, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[79, 80]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 912, "completion_tokens": 6, "total_tokens": 918 } }

{'id': 'chatcmpl-8Q2KnfQIbOpa3dDhIaziAoU5B2JVc', 'object': 'chat.completion', 'created': 1701216193, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[79, 80]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 912, 'completion_tokens': 6, 'total_tokens': 918}}
Altering:  [79, 80]
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]
 [1 1]], shape=(3, 2), dtype=int64), values=tf.Tensor([12 34 56], shape=(3,), dtype=int32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Output:
SparseTensor(indices=tf.Tensor(
[[0]
 [1]], shape=(2, 1), dtype=int64), values=tf.Tensor([46 56], shape=(2,), dtype=int32), dense_shape=tf.Tensor([2], shape=(1,), dtype=int64))

Constants: [0, 1, -1, True, False, 2]

Description: Reduce sum on a sparse tensor

Searching...

Found solution: tf.sparse.reduce_sum(in1, axis=1, output_is_sparse=True)

Solution was found in 1.2 seconds:
tf.sparse.reduce_sum(in1, axis=1, output_is_sparse=True)
Found in  1.1688059109999926 s!
[0.7820480090000004, 0.858646147, 1.0633178140000012, 1.1688059109999926, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.7470914409999985, 3.496535494999989, 9.142389382000001, 300.304388078]
Benchmark # 12  --  tf.add(in1, tf.constant(100))
input and output examples = [Example(inputs=[[1, 2, 3]], output=[101, 102, 103])] natural language description = Add 100 to every element
{ "id": "chatcmpl-8Q2KocO13Qd72KTzR3FnR3RUWV9f3", "object": "chat.completion", "created": 1701216194, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 12]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 885, "completion_tokens": 6, "total_tokens": 891 } }

{'id': 'chatcmpl-8Q2KocO13Qd72KTzR3FnR3RUWV9f3', 'object': 'chat.completion', 'created': 1701216194, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 12]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 885, 'completion_tokens': 6, 'total_tokens': 891}}
Altering:  [1, 12]
Input 'in1':
tf.Tensor([1 2 3], shape=(3,), dtype=int32)

Output:
tf.Tensor([101 102 103], shape=(3,), dtype=int32)

Constants: [100, 0, 1, -1, True, False, 3]

Description: Add 100 to every element

Searching...

Found solution: tf.add(in1, tf.constant(100))

Solution was found in 1.0 seconds:
tf.add(in1, tf.constant(100))
Found in  1.0285496200000352 s!
[0.7820480090000004, 0.858646147, 1.0285496200000352, 1.0633178140000012, 1.1688059109999926, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.7470914409999985, 3.496535494999989, 9.142389382000001, 300.304388078]
Benchmark # 13  --  tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)
input and output examples = [Example(inputs=[[40, 20, 60, 50, 10, 20, 50, 50]], output=[2, 3, 6, 7, 0, 1, 5, 4])] natural language description = Indices sorted in reverse order
{ "id": "chatcmpl-8Q2KppOYK4hSmFZEQXP5Yz2jZHzSx", "object": "chat.completion", "created": 1701216195, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[5, 84, 94]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 914, "completion_tokens": 9, "total_tokens": 923 } }

{'id': 'chatcmpl-8Q2KppOYK4hSmFZEQXP5Yz2jZHzSx', 'object': 'chat.completion', 'created': 1701216195, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[5, 84, 94]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 914, 'completion_tokens': 9, 'total_tokens': 923}}
Altering:  [5, 84, 94]
Input 'in1':
tf.Tensor([40 20 60 50 10 20 50 50], shape=(8,), dtype=int32)

Output:
tf.Tensor([2 3 6 7 0 1 5 4], shape=(8,), dtype=int32)

Constants: [0, 1, -1, True, False, 8]

Description: Indices sorted in reverse order

Searching...

Found solution: tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)

Solution was found in 1.7 seconds:
tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)
Found in  1.6750647539999477 s!
[0.7820480090000004, 0.858646147, 1.0285496200000352, 1.0633178140000012, 1.1688059109999926, 1.6750647539999477, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.7470914409999985, 3.496535494999989, 9.142389382000001, 300.304388078]
Benchmark # 14  --  tf.multiply(in1, tf.eye(5))
input and output examples = [Example(inputs=[<tf.Tensor: shape=(), dtype=float32, numpy=7.0>], output=[[7.0, 0.0, 0.0, 0.0, 0.0], [0.0, 7.0, 0.0, 0.0, 0.0], [0.0, 0.0, 7.0, 0.0, 0.0], [0.0, 0.0, 0.0, 7.0, 0.0], [0.0, 0.0, 0.0, 0.0, 7.0]])] natural language description = Multiply with the identity matrix
{ "id": "chatcmpl-8Q2KrNc1KpVfj7fytCbIS5RCBE8Tf", "object": "chat.completion", "created": 1701216197, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[18, 59, 56]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1011, "completion_tokens": 9, "total_tokens": 1020 } }

{'id': 'chatcmpl-8Q2KrNc1KpVfj7fytCbIS5RCBE8Tf', 'object': 'chat.completion', 'created': 1701216197, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[18, 59, 56]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1011, 'completion_tokens': 9, 'total_tokens': 1020}}
Altering:  [18, 59, 56]
Input 'in1':
tf.Tensor(7.0, shape=(), dtype=float32)

Output:
tf.Tensor(
[[7. 0. 0. 0. 0.]
 [0. 7. 0. 0. 0.]
 [0. 0. 7. 0. 0.]
 [0. 0. 0. 7. 0.]
 [0. 0. 0. 0. 7.]], shape=(5, 5), dtype=float32)

Constants: [0, 1, -1, True, False, 5]

Description: Multiply with the identity matrix

Searching...

Found solution: tf.multiply(in1, tf.eye(5))

Solution was found in 1.4 seconds:
tf.multiply(in1, tf.eye(5))
Found in  1.420897540999988 s!
[0.7820480090000004, 0.858646147, 1.0285496200000352, 1.0633178140000012, 1.1688059109999926, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.7470914409999985, 3.496535494999989, 9.142389382000001, 300.304388078]
Benchmark # 15  --  tf.zeros((2, 3, 4, 5))
input and output examples = [Example(inputs=[], output=<tf.Tensor: shape=(2, 3, 4, 5), dtype=float32, numpy=
array([[[[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]]],


       [[[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]]]], dtype=float32)>)] natural language description = Construct a 4D zeros tensor
{ "id": "chatcmpl-8Q2KsitKXWwjqiSk6tixixWMOWBIe", "object": "chat.completion", "created": 1701216198, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[111]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1314, "completion_tokens": 3, "total_tokens": 1317 } }

{'id': 'chatcmpl-8Q2KsitKXWwjqiSk6tixixWMOWBIe', 'object': 'chat.completion', 'created': 1701216198, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[111]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1314, 'completion_tokens': 3, 'total_tokens': 1317}}
Altering:  [111]
Output:
tf.Tensor(
[[[[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]]


 [[[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]]], shape=(2, 3, 4, 5), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3, 4, 5]

Description: Construct a 4D zeros tensor

Searching...

Found solution: tf.zeros((2, 3, 4, 5))

Solution was found in 1.0 seconds:
tf.zeros((2, 3, 4, 5))
Found in  0.983545644000003 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.1688059109999926, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.7470914409999985, 3.496535494999989, 9.142389382000001, 300.304388078]
Benchmark # 16  --  tf.add(in2, tf.constant(in1))
input and output examples = [Example(inputs=[123, <tf.Tensor: shape=(), dtype=int32, numpy=45>], output=<tf.Tensor: shape=(), dtype=int32, numpy=168>)] natural language description = Add primitive int and scalar int tensor
{ "id": "chatcmpl-8Q2KtYMGGz93mmFHEw39psamp6Z3L", "object": "chat.completion", "created": 1701216199, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 903, "completion_tokens": 3, "total_tokens": 906 } }

{'id': 'chatcmpl-8Q2KtYMGGz93mmFHEw39psamp6Z3L', 'object': 'chat.completion', 'created': 1701216199, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 903, 'completion_tokens': 3, 'total_tokens': 906}}
Altering:  [1]
Input 'in1':
123

Input 'in2':
tf.Tensor(45, shape=(), dtype=int32)

Output:
tf.Tensor(168, shape=(), dtype=int32)

Constants: [0, 1, -1, True, False]

Description: Add primitive int and scalar int tensor

Searching...

Found solution: tf.add(in2, tf.constant(in1))

Solution was found in 1.2 seconds:
tf.add(in2, tf.constant(in1))
Found in  1.2016386040000384 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.1688059109999926, 1.2016386040000384, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.7470914409999985, 3.496535494999989, 9.142389382000001, 300.304388078]
Benchmark # 17  --  tf.add(tensor_x, tf.expand_dims(tensor_y, 1))
input and output examples = [Example(inputs={'tensor_x': [3, 4, 5], 'tensor_y': [10, 20, 30]}, output=[[13, 14, 15], [23, 24, 25], [33, 34, 35]])] natural language description = Add two tensors with broadcasting
{ "id": "chatcmpl-8Q2KupdARVTj2xhPJRpRxtDG1CuVm", "object": "chat.completion", "created": 1701216200, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 8, 17]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 920, "completion_tokens": 9, "total_tokens": 929 } }

{'id': 'chatcmpl-8Q2KupdARVTj2xhPJRpRxtDG1CuVm', 'object': 'chat.completion', 'created': 1701216200, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 8, 17]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 920, 'completion_tokens': 9, 'total_tokens': 929}}
Altering:  [1, 8, 17]
Input 'tensor_x':
tf.Tensor([3 4 5], shape=(3,), dtype=int32)

Input 'tensor_y':
tf.Tensor([10 20 30], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[13 14 15]
 [23 24 25]
 [33 34 35]], shape=(3, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3]

Description: Add two tensors with broadcasting

Searching...

Found solution: tf.add(tensor_x, tf.expand_dims(tensor_y, 1))

Solution was found in 1.1 seconds:
tf.add(tensor_x, tf.expand_dims(tensor_y, 1))
Found in  1.14804132200004 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.2016386040000384, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.7470914409999985, 3.496535494999989, 9.142389382000001, 300.304388078]
Benchmark # 18  --  tf.gather(params, indices, axis=axis, batch_dims=batch_dims)
input and output examples = [Example(inputs={'params': [[[11, 22, 33], [44, 55, 66]]], 'indices': [[2, 1]], 'axis': 2, 'batch_dims': 1}, output=[[[33, 22], [66, 55]]])] natural language description = Use tf.gather
{ "id": "chatcmpl-8Q2KvdjPxxNH1Wmxjy3vOTnBb2lJ3", "object": "chat.completion", "created": 1701216201, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 23, 24, 25, 105, 106, 83, 114, 117, 120]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 923, "completion_tokens": 30, "total_tokens": 953 } }

{'id': 'chatcmpl-8Q2KvdjPxxNH1Wmxjy3vOTnBb2lJ3', 'object': 'chat.completion', 'created': 1701216201, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 23, 24, 25, 105, 106, 83, 114, 117, 120]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 923, 'completion_tokens': 30, 'total_tokens': 953}}
Altering:  [22, 23, 24, 25, 105, 106, 83, 114, 117, 120]
Input 'params':
tf.Tensor(
[[[11 22 33]
  [44 55 66]]], shape=(1, 2, 3), dtype=int32)

Input 'indices':
tf.Tensor([[2 1]], shape=(1, 2), dtype=int32)

Input 'axis':
2

Input 'batch_dims':
1

Output:
tf.Tensor(
[[[33 22]
  [66 55]]], shape=(1, 2, 2), dtype=int32)

Constants: [0, -1, True, False, 3]

Description: Use tf.gather

Searching...

Found solution: tf.gather(params, indices, axis=axis, batch_dims=batch_dims)

Solution was found in 2.5 seconds:
tf.gather(params, indices, axis=axis, batch_dims=batch_dims)
Found in  2.5386926510000194 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.2016386040000384, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.5386926510000194, 2.7470914409999985, 3.496535494999989, 9.142389382000001, 300.304388078]
Benchmark # 19  --  tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)
input and output examples = [Example(inputs=[[0, 0, 0, 1, 3, 3]], output=[[0, 0], [0, 1], [0, 2], [1, 0], [3, 0], [3, 1]])] natural language description = Convert index tensor into pairs for SparseTensor indexing
{ "id": "chatcmpl-8Q2KyaXo8KXQTTD4C6oyaMuEKpkA2", "object": "chat.completion", "created": 1701216204, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 24, 87, 102, 114, 115, 116, 117, 122, 123]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 925, "completion_tokens": 30, "total_tokens": 955 } }

{'id': 'chatcmpl-8Q2KyaXo8KXQTTD4C6oyaMuEKpkA2', 'object': 'chat.completion', 'created': 1701216204, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 24, 87, 102, 114, 115, 116, 117, 122, 123]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 925, 'completion_tokens': 30, 'total_tokens': 955}}
Altering:  [83, 24, 87, 102, 114, 115, 116, 117, 122, 123]
Input 'in1':
tf.Tensor([0 0 0 1 3 3], shape=(6,), dtype=int32)

Output:
tf.Tensor(
[[0 0]
 [0 1]
 [0 2]
 [1 0]
 [3 0]
 [3 1]], shape=(6, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 6]

Description: Convert index tensor into pairs for SparseTensor indexing

Searching...

Found solution: tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)

Solution was found in 23.0 seconds:
tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)
Found in  22.977158417999988 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.2016386040000384, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.5386926510000194, 2.7470914409999985, 3.496535494999989, 9.142389382000001, 22.977158417999988, 300.304388078]
Benchmark # 20  --  tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))
input and output examples = [Example(inputs=[[[0.0, 1.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [1.0, 1.0, 1.0, 1.0]]], output=[[0.0, 1.0, 0.0, 0.0], [0.0, 0.5, 0.5, 0.0], [0.25, 0.25, 0.25, 0.25]])] natural language description = Divide each row by the sum of that row
{ "id": "chatcmpl-8Q2LLb23igUsEeLO07gjjQfGzqttd", "object": "chat.completion", "created": 1701216227, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[14, 79, 83, 9, 34]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 993, "completion_tokens": 15, "total_tokens": 1008 } }

{'id': 'chatcmpl-8Q2LLb23igUsEeLO07gjjQfGzqttd', 'object': 'chat.completion', 'created': 1701216227, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[14, 79, 83, 9, 34]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 993, 'completion_tokens': 15, 'total_tokens': 1008}}
Altering:  [14, 79, 83, 9, 34]
Input 'in1':
tf.Tensor(
[[0. 1. 0. 0.]
 [0. 1. 1. 0.]
 [1. 1. 1. 1.]], shape=(3, 4), dtype=float32)

Output:
tf.Tensor(
[[0.   1.   0.   0.  ]
 [0.   0.5  0.5  0.  ]
 [0.25 0.25 0.25 0.25]], shape=(3, 4), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4]

Description: Divide each row by the sum of that row

Searching...

Found solution: tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))

Solution was found in 7.1 seconds:
tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))
Found in  7.075291531999994 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.2016386040000384, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.5386926510000194, 2.7470914409999985, 3.496535494999989, 7.075291531999994, 9.142389382000001, 22.977158417999988, 300.304388078]
Benchmark # 21  --  tf.sparse.slice(in1, tf.zeros(3, dtype=tf.int64), tf.concat([[1], in1.dense_shape[1:]], 0))
input and output examples = [Example(inputs=[<tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x7fa920657340>], output=<tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x7fa9206574c0>)] natural language description = Slice the first dimension of a SparseTensor
{ "id": "chatcmpl-8Q2LSqgUt1R8ROOw0MqoE0Z9JK8I4", "object": "chat.completion", "created": 1701216234, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[117, 118, 119, 120, 121, 122, 113, 114, 22, 24]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 914, "completion_tokens": 30, "total_tokens": 944 } }

{'id': 'chatcmpl-8Q2LSqgUt1R8ROOw0MqoE0Z9JK8I4', 'object': 'chat.completion', 'created': 1701216234, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[117, 118, 119, 120, 121, 122, 113, 114, 22, 24]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 914, 'completion_tokens': 30, 'total_tokens': 944}}
Altering:  [117, 118, 119, 120, 121, 122, 113, 114, 22, 24]
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0 0]
 [0 1 1]
 [1 1 1]
 [1 1 2]], shape=(4, 3), dtype=int64), values=tf.Tensor([1. 1. 1. 1.], shape=(4,), dtype=float32), dense_shape=tf.Tensor([  2   2 800], shape=(3,), dtype=int64))

Output:
SparseTensor(indices=tf.Tensor(
[[0 0 0]
 [0 1 1]], shape=(2, 3), dtype=int64), values=tf.Tensor([1. 1.], shape=(2,), dtype=float32), dense_shape=tf.Tensor([  1   2 800], shape=(3,), dtype=int64))

Constants: [0, 1, -1, True, False, 2, 800]

Description: Slice the first dimension of a SparseTensor

Searching...

Found solution: tf.sparse.split(sp_input=in1, num_split=2, axis=0)[0]

Solution was found in 33.3 seconds:
tf.sparse.split(sp_input=in1, num_split=2, axis=0)[0]
Found in  33.29574627599999 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.2016386040000384, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.5386926510000194, 2.7470914409999985, 3.496535494999989, 7.075291531999994, 9.142389382000001, 22.977158417999988, 33.29574627599999, 300.304388078]
Benchmark # 22  --  tf.reshape(in1, shape=(4, 3, 2))
input and output examples = [Example(inputs=[[111, 112, 121, 122, 131, 132, 211, 212, 221, 222, 231, 232, 311, 312, 321, 322, 331, 332, 411, 412, 421, 422, 431, 432]], output=[[[111, 112], [121, 122], [131, 132]], [[211, 212], [221, 222], [231, 232]], [[311, 312], [321, 322], [331, 332]], [[411, 412], [421, 422], [431, 432]]])] natural language description = Reshape a flat array into a rank 3 tensor
{ "id": "chatcmpl-8Q2M0eu1u3YpxerdgQqnwlEis7KNK", "object": "chat.completion", "created": 1701216268, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 92]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1018, "completion_tokens": 6, "total_tokens": 1024 } }

{'id': 'chatcmpl-8Q2M0eu1u3YpxerdgQqnwlEis7KNK', 'object': 'chat.completion', 'created': 1701216268, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 92]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1018, 'completion_tokens': 6, 'total_tokens': 1024}}
Altering:  [83, 92]
Input 'in1':
tf.Tensor(
[111 112 121 122 131 132 211 212 221 222 231 232 311 312 321 322 331 332
 411 412 421 422 431 432], shape=(24,), dtype=int32)

Output:
tf.Tensor(
[[[111 112]
  [121 122]
  [131 132]]

 [[211 212]
  [221 222]
  [231 232]]

 [[311 312]
  [321 322]
  [331 332]]

 [[411 412]
  [421 422]
  [431 432]]], shape=(4, 3, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 4, 24]

Description: Reshape a flat array into a rank 3 tensor

Searching...

Found solution: tf.reshape(in1, (4, 3, 2))

Solution was found in 1.2 seconds:
tf.reshape(in1, (4, 3, 2))
Found in  1.1755344320000063 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.5386926510000194, 2.7470914409999985, 3.496535494999989, 7.075291531999994, 9.142389382000001, 22.977158417999988, 33.29574627599999, 300.304388078]
Benchmark # 23  --  tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))
input and output examples = [Example(inputs=[[[1, 2, 3, 4], [5, 6, 7, 8]]], output=[[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], [[5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8], [5, 6, 7, 8]]])] natural language description = Repeat each input entry 6 times
{ "id": "chatcmpl-8Q2M1qWLbkRr16eYaGeBbCIhJM8Cp", "object": "chat.completion", "created": 1701216269, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[81, 104]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1040, "completion_tokens": 6, "total_tokens": 1046 } }

{'id': 'chatcmpl-8Q2M1qWLbkRr16eYaGeBbCIhJM8Cp', 'object': 'chat.completion', 'created': 1701216269, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[81, 104]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1040, 'completion_tokens': 6, 'total_tokens': 1046}}
Altering:  [81, 104]
Input 'in1':
tf.Tensor(
[[1 2 3 4]
 [5 6 7 8]], shape=(2, 4), dtype=int32)

Output:
tf.Tensor(
[[[1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]]

 [[5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]]], shape=(2, 6, 4), dtype=int32)

Constants: [6, 0, 1, -1, True, False, 2, 4]

Description: Repeat each input entry 6 times

Searching...

Found solution: tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)

Solution was found in 18.7 seconds:
tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)
Found in  18.72501255100002 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.5386926510000194, 2.7470914409999985, 3.496535494999989, 7.075291531999994, 9.142389382000001, 18.72501255100002, 22.977158417999988, 33.29574627599999, 300.304388078]
Benchmark # 24  --  tf.math.segment_max(in2, in1)
input and output examples = [Example(inputs=[[0, 1, 1, 2, 3, 3, 3, 3], [1, 3, 4, 5, 10, 8, 9, 4]], output=[1, 4, 5, 10])] natural language description = Take the max from each group of elements
{ "id": "chatcmpl-8Q2MJLFDT6mVvDVP1O1fh3021Dpj7", "object": "chat.completion", "created": 1701216287, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[44, 51, 72, 73, 57, 114, 83, 11, 92, 100]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 929, "completion_tokens": 30, "total_tokens": 959 } }

{'id': 'chatcmpl-8Q2MJLFDT6mVvDVP1O1fh3021Dpj7', 'object': 'chat.completion', 'created': 1701216287, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[44, 51, 72, 73, 57, 114, 83, 11, 92, 100]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 929, 'completion_tokens': 30, 'total_tokens': 959}}
Altering:  [44, 51, 72, 73, 57, 114, 83, 11, 92, 100]
Input 'in1':
tf.Tensor([0 1 1 2 3 3 3 3], shape=(8,), dtype=int32)

Input 'in2':
tf.Tensor([ 1  3  4  5 10  8  9  4], shape=(8,), dtype=int32)

Output:
tf.Tensor([ 1  4  5 10], shape=(4,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 8]

Description: Take the max from each group of elements

Searching...

Found solution: tf.math.segment_max(in2, in1)

Solution was found in 1.8 seconds:
tf.math.segment_max(in2, in1)
Found in  1.8101698539999802 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.5386926510000194, 2.7470914409999985, 3.496535494999989, 7.075291531999994, 9.142389382000001, 18.72501255100002, 22.977158417999988, 33.29574627599999, 300.304388078]
Benchmark # 25  --  tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)
input and output examples = [Example(inputs=[[0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 4, 5, 5], [4, 1, 8, 2, 5, 7, 9, 3, 7, 3, 1, 42, 1, 2, 4, 0]], output=[2, 3, 1, 0, 1, 0])] natural language description = Take the argmax of each group of elements
{ "id": "chatcmpl-8Q2MLsuXADB4jbZ8DbfuO3pHYLxiW", "object": "chat.completion", "created": 1701216289, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[3, 44, 51, 72, 107, 113, 114, 115, 116, 123]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 984, "completion_tokens": 30, "total_tokens": 1014 } }

{'id': 'chatcmpl-8Q2MLsuXADB4jbZ8DbfuO3pHYLxiW', 'object': 'chat.completion', 'created': 1701216289, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[3, 44, 51, 72, 107, 113, 114, 115, 116, 123]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 984, 'completion_tokens': 30, 'total_tokens': 1014}}
Altering:  [3, 44, 51, 72, 107, 113, 114, 115, 116, 123]
Input 'in1':
tf.Tensor([0 0 0 1 1 1 1 2 2 2 2 3 4 4 5 5], shape=(16,), dtype=int32)

Input 'in2':
tf.Tensor([ 4  1  8  2  5  7  9  3  7  3  1 42  1  2  4  0], shape=(16,), dtype=int32)

Output:
tf.Tensor([2 3 1 0 1 0], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6, 16]

Description: Take the argmax of each group of elements

Searching...

Could not find solution within 300 seconds.
Found in  300.25574915600004 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.5386926510000194, 2.7470914409999985, 3.496535494999989, 7.075291531999994, 9.142389382000001, 18.72501255100002, 22.977158417999988, 33.29574627599999, 300.25574915600004, 300.304388078]
Benchmark # 26  --  tf.cast(tf.greater(tf.expand_dims(in1, 1), tf.range(5)), tf.int32)
input and output examples = [Example(inputs=[[3, 4, 2, 1]], output=[[1, 1, 1, 0, 0], [1, 1, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 0, 0, 0]])] natural language description = create a mask for sequences of the given lengths
{ "id": "chatcmpl-8Q2RD0TuoxkgLz1eTKycdM2BMBoK5", "object": "chat.completion", "created": 1701216591, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[90, 9, 83, 68, 21, 1, 92, 11, 15, 7]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 943, "completion_tokens": 30, "total_tokens": 973 } }

{'id': 'chatcmpl-8Q2RD0TuoxkgLz1eTKycdM2BMBoK5', 'object': 'chat.completion', 'created': 1701216591, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[90, 9, 83, 68, 21, 1, 92, 11, 15, 7]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 943, 'completion_tokens': 30, 'total_tokens': 973}}
Altering:  [90, 9, 83, 68, 21, 1, 92, 11, 15, 7]
Input 'in1':
tf.Tensor([3 4 2 1], shape=(4,), dtype=int32)

Output:
tf.Tensor(
[[1 1 1 0 0]
 [1 1 1 1 0]
 [1 1 0 0 0]
 [1 0 0 0 0]], shape=(4, 5), dtype=int32)

Constants: [5, 0, 1, -1, True, False, 4]

Description: create a mask for sequences of the given lengths

Searching...

Found solution: tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)

Solution was found in 2.7 seconds:
tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)
Found in  2.708273998999971 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1074303350000037, 2.278909717000033, 2.3805071789999985, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.496535494999989, 7.075291531999994, 9.142389382000001, 18.72501255100002, 22.977158417999988, 33.29574627599999, 300.25574915600004, 300.304388078]
Benchmark # 27  --  tf.gather(in2, tf.argsort(in1, stable=True))
input and output examples = [Example(inputs=[[1, 1, 1, 0, 0, 2], [10, 20, 30, 14, 15, 26]], output=[14, 15, 10, 20, 30, 26])] natural language description = sort the segments
{ "id": "chatcmpl-8Q2RFH0iATDxcmi7PL9TlB3b5WAY9", "object": "chat.completion", "created": 1701216593, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[94, 5, 22, 11, 83, 9, 105, 72, 76, 74]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 918, "completion_tokens": 30, "total_tokens": 948 } }

{'id': 'chatcmpl-8Q2RFH0iATDxcmi7PL9TlB3b5WAY9', 'object': 'chat.completion', 'created': 1701216593, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[94, 5, 22, 11, 83, 9, 105, 72, 76, 74]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 918, 'completion_tokens': 30, 'total_tokens': 948}}
Altering:  [94, 5, 22, 11, 83, 9, 105, 72, 76, 74]
Input 'in1':
tf.Tensor([1 1 1 0 0 2], shape=(6,), dtype=int32)

Input 'in2':
tf.Tensor([10 20 30 14 15 26], shape=(6,), dtype=int32)

Output:
tf.Tensor([14 15 10 20 30 26], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6]

Description: sort the segments

Searching...

Found solution: tf.gather(in2, tf.argsort(in1, axis=0, stable=True))

Solution was found in 2.3 seconds:
tf.gather(in2, tf.argsort(in1, axis=0, stable=True))
Found in  2.3255279049999444 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1074303350000037, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.496535494999989, 7.075291531999994, 9.142389382000001, 18.72501255100002, 22.977158417999988, 33.29574627599999, 300.25574915600004, 300.304388078]
Benchmark # 28  --  tf.boolean_mask(in1, tf.cast(in2, tf.bool))
input and output examples = [Example(inputs=[[10, 20, 0, 40, 0, 30], [1, 1, 0, 1, 0, 1]], output=[10, 20, 40, 30])] natural language description = gather the marked elements
{ "id": "chatcmpl-8Q2RIOohwbWlvg3CckW5NcKONtOKe", "object": "chat.completion", "created": 1701216596, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[7, 9, 15, 22, 109]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 913, "completion_tokens": 15, "total_tokens": 928 } }

{'id': 'chatcmpl-8Q2RIOohwbWlvg3CckW5NcKONtOKe', 'object': 'chat.completion', 'created': 1701216596, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[7, 9, 15, 22, 109]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 913, 'completion_tokens': 15, 'total_tokens': 928}}
Altering:  [7, 9, 15, 22, 109]
Input 'in1':
tf.Tensor([10 20  0 40  0 30], shape=(6,), dtype=int32)

Input 'in2':
tf.Tensor([1 1 0 1 0 1], shape=(6,), dtype=int32)

Output:
tf.Tensor([10 20 40 30], shape=(4,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 6]

Description: gather the marked elements

Searching...

Found solution: tf.boolean_mask(in1, tf.cast(in2, tf.bool))

Solution was found in 1.6 seconds:
tf.boolean_mask(in1, tf.cast(in2, tf.bool))
Found in  1.6293981840000242 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1074303350000037, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.496535494999989, 7.075291531999994, 9.142389382000001, 18.72501255100002, 22.977158417999988, 33.29574627599999, 300.25574915600004, 300.304388078]
Benchmark # 29  --  tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)
input and output examples = [Example(inputs=[[[1.0, 0.3, -4.2, 0.0, 2.1, 0.4], [-0.1, 0.0, 1.4, -1.0, 0.4, 0.0], [0.1, 0.0, 0.7, -0.3, 0.5, -0.1], [1.4, 2.5, 0.3, 0.01, 0.0, 1.2]]], output=[4, 2, 3, 5])] natural language description = count the number of elements greater than 0 in each row
{ "id": "chatcmpl-8Q2RJML3DZlgLHRBKOVLTgGtiW198", "object": "chat.completion", "created": 1701216597, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[26, 30, 70, 79, 92, 9, 83, 3, 74, 72]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1007, "completion_tokens": 30, "total_tokens": 1037 } }

{'id': 'chatcmpl-8Q2RJML3DZlgLHRBKOVLTgGtiW198', 'object': 'chat.completion', 'created': 1701216597, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[26, 30, 70, 79, 92, 9, 83, 3, 74, 72]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1007, 'completion_tokens': 30, 'total_tokens': 1037}}
Altering:  [26, 30, 70, 79, 92, 9, 83, 3, 74, 72]
Input 'in1':
tf.Tensor(
[[ 1.    0.3  -4.2   0.    2.1   0.4 ]
 [-0.1   0.    1.4  -1.    0.4   0.  ]
 [ 0.1   0.    0.7  -0.3   0.5  -0.1 ]
 [ 1.4   2.5   0.3   0.01  0.    1.2 ]], shape=(4, 6), dtype=float32)

Output:
tf.Tensor([4 2 3 5], shape=(4,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 6]

Description: count the number of elements greater than 0 in each row

Searching...

Found solution: tf.reduce_sum(tf.cast(tf.greater(in1, tf.cast(0, tf.float32)), tf.int32), axis=1)

Solution was found in 12.8 seconds:
tf.reduce_sum(tf.cast(tf.greater(in1, tf.cast(0, tf.float32)), tf.int32), axis=1)
Found in  12.755258200000071 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1074303350000037, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.496535494999989, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.977158417999988, 33.29574627599999, 300.25574915600004, 300.304388078]
Benchmark # 30  --  tf.cast(tf.logical_and(0 <= in1, in1 <= 1), tf.int32)
input and output examples = [Example(inputs=[[[1.0, 0.3, -4.2, 0.0, 2.1], [-0.1, 0.0, 1.4, -1.0, 0.4], [0.1, 0.0, 0.7, -0.3, 0.5], [1.4, 2.5, 0.3, -0.1, 0.0]]], output=[[1, 1, 0, 1, 0], [0, 1, 0, 0, 1], [1, 1, 1, 0, 1], [0, 0, 1, 0, 1]])] natural language description = identify elements between 0 and 1
{ "id": "chatcmpl-8Q2RW3iaQyv7GsRZYLLuKQx09W4Vg", "object": "chat.completion", "created": 1701216610, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[10, 15, 26, 27, 37, 39, 60, 70, 71, 109]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1032, "completion_tokens": 30, "total_tokens": 1062 } }

{'id': 'chatcmpl-8Q2RW3iaQyv7GsRZYLLuKQx09W4Vg', 'object': 'chat.completion', 'created': 1701216610, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[10, 15, 26, 27, 37, 39, 60, 70, 71, 109]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1032, 'completion_tokens': 30, 'total_tokens': 1062}}
Altering:  [10, 15, 26, 27, 37, 39, 60, 70, 71, 109]
Input 'in1':
tf.Tensor(
[[ 1.   0.3 -4.2  0.   2.1]
 [-0.1  0.   1.4 -1.   0.4]
 [ 0.1  0.   0.7 -0.3  0.5]
 [ 1.4  2.5  0.3 -0.1  0. ]], shape=(4, 5), dtype=float32)

Output:
tf.Tensor(
[[1 1 0 1 0]
 [0 1 0 0 1]
 [1 1 1 0 1]
 [0 0 1 0 1]], shape=(4, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 5]

Description: identify elements between 0 and 1

Searching...

Found solution: tf.cast(tf.greater_equal(in1, tf.square(in1)), tf.int32)

Solution was found in 2.5 seconds:
tf.cast(tf.greater_equal(in1, tf.square(in1)), tf.int32)
Found in  2.462231541000051 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1074303350000037, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.496535494999989, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.977158417999988, 33.29574627599999, 300.25574915600004, 300.304388078]
Benchmark # 31  --  tf.concat([in1, in2], axis=1)
input and output examples = [Example(inputs=[[[1, 2], [10, 20]], [[3, 4, 5], [30, 40, 50]]], output=[[1, 2, 3, 4, 5], [10, 20, 30, 40, 50]])] natural language description = Concatenate batches of sequences
{ "id": "chatcmpl-8Q2RZDDrXBvzZy4mh4cg6MwdycRWu", "object": "chat.completion", "created": 1701216613, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[11, 83, 100, 108, 98, 92, 9, 17, 104, 105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 929, "completion_tokens": 30, "total_tokens": 959 } }

{'id': 'chatcmpl-8Q2RZDDrXBvzZy4mh4cg6MwdycRWu', 'object': 'chat.completion', 'created': 1701216613, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[11, 83, 100, 108, 98, 92, 9, 17, 104, 105]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 929, 'completion_tokens': 30, 'total_tokens': 959}}
Altering:  [11, 83, 100, 108, 98, 92, 9, 17, 104, 105]
Input 'in1':
tf.Tensor(
[[ 1  2]
 [10 20]], shape=(2, 2), dtype=int32)

Input 'in2':
tf.Tensor(
[[ 3  4  5]
 [30 40 50]], shape=(2, 3), dtype=int32)

Output:
tf.Tensor(
[[ 1  2  3  4  5]
 [10 20 30 40 50]], shape=(2, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 5]

Description: Concatenate batches of sequences

Searching...

Found solution: tf.concat((in1, in2), 1)

Solution was found in 3.2 seconds:
tf.concat((in1, in2), 1)
Found in  3.244153067999946 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1074303350000037, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.977158417999988, 33.29574627599999, 300.25574915600004, 300.304388078]
Benchmark # 32  --  tf.roll(in1, 1, 1)
input and output examples = [Example(inputs=[[[1, 3, 2, 0, 0], [4, 6, 5, 0, 0], [8, 7, 9, 0, 0]]], output=[[0, 1, 3, 2, 0], [0, 4, 6, 5, 0], [0, 8, 7, 9, 0]])] natural language description = circular buffer
{ "id": "chatcmpl-8Q2RcyDxRZQOrIltRCF8pultXvr8A", "object": "chat.completion", "created": 1701216616, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[85, 11, 92, 83, 9, 100, 108, 64, 22, 24]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 956, "completion_tokens": 30, "total_tokens": 986 } }

{'id': 'chatcmpl-8Q2RcyDxRZQOrIltRCF8pultXvr8A', 'object': 'chat.completion', 'created': 1701216616, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[85, 11, 92, 83, 9, 100, 108, 64, 22, 24]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 956, 'completion_tokens': 30, 'total_tokens': 986}}
Altering:  [85, 11, 92, 83, 9, 100, 108, 64, 22, 24]
Input 'in1':
tf.Tensor(
[[1 3 2 0 0]
 [4 6 5 0 0]
 [8 7 9 0 0]], shape=(3, 5), dtype=int32)

Output:
tf.Tensor(
[[0 1 3 2 0]
 [0 4 6 5 0]
 [0 8 7 9 0]], shape=(3, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 5]

Description: circular buffer

Searching...

Found solution: tf.roll(in1, 1, 1)

Solution was found in 2.1 seconds:
tf.roll(in1, 1, 1)
Found in  2.1064035509999712 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1064035509999712, 2.1074303350000037, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.977158417999988, 33.29574627599999, 300.25574915600004, 300.304388078]
Benchmark # 33  --  tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')
input and output examples = [Example(inputs=[[[1, 3, 5, 7], [2, 4, 6, 8]]], output=[[1, 3, 5, 7, 0], [2, 4, 6, 8, 0]])] natural language description = pad a zero column
{ "id": "chatcmpl-8Q2Re3nwr5MtE1ePgNEGp43sLCrOZ", "object": "chat.completion", "created": 1701216618, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[12, 64, 83, 100, 111]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 922, "completion_tokens": 15, "total_tokens": 937 } }

{'id': 'chatcmpl-8Q2Re3nwr5MtE1ePgNEGp43sLCrOZ', 'object': 'chat.completion', 'created': 1701216618, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[12, 64, 83, 100, 111]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 922, 'completion_tokens': 15, 'total_tokens': 937}}
Altering:  [12, 64, 83, 100, 111]
Input 'in1':
tf.Tensor(
[[1 3 5 7]
 [2 4 6 8]], shape=(2, 4), dtype=int32)

Output:
tf.Tensor(
[[1 3 5 7 0]
 [2 4 6 8 0]], shape=(2, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 4, 5]

Description: pad a zero column

Searching...

Found solution: tf.pad(in1, ((0, 0), (0, 1)), mode='CONSTANT')

Solution was found in 64.0 seconds:
tf.pad(in1, ((0, 0), (0, 1)), mode='CONSTANT')
Found in  63.98630920000005 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1064035509999712, 2.1074303350000037, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.977158417999988, 33.29574627599999, 63.98630920000005, 300.25574915600004, 300.304388078]
Benchmark # 34  --  tf.gather(in1, tf.where(tf.sequence_mask(in2))[:, 0])
input and output examples = [Example(inputs=[[1, 2, 0, 3], [2, 1, 2, 3]], output=[1, 1, 2, 0, 0, 3, 3, 3])] natural language description = replicate elements a given number of times
{ "id": "chatcmpl-8Q2SgRch2LRnFM3U3KXGkznDQwlON", "object": "chat.completion", "created": 1701216682, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[81, 11, 83, 92, 104, 100, 22, 108, 9, 79]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 916, "completion_tokens": 30, "total_tokens": 946 } }

{'id': 'chatcmpl-8Q2SgRch2LRnFM3U3KXGkznDQwlON', 'object': 'chat.completion', 'created': 1701216682, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[81, 11, 83, 92, 104, 100, 22, 108, 9, 79]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 916, 'completion_tokens': 30, 'total_tokens': 946}}
Altering:  [81, 11, 83, 92, 104, 100, 22, 108, 9, 79]
Input 'in1':
tf.Tensor([1 2 0 3], shape=(4,), dtype=int32)

Input 'in2':
tf.Tensor([2 1 2 3], shape=(4,), dtype=int32)

Output:
tf.Tensor([1 1 2 0 0 3 3 3], shape=(8,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 8]

Description: replicate elements a given number of times

Searching...

Found solution: tf.repeat(in1, in2)

Solution was found in 2.3 seconds:
tf.repeat(in1, in2)
Found in  2.275041723999948 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.977158417999988, 33.29574627599999, 63.98630920000005, 300.25574915600004, 300.304388078]
Benchmark # 35  --  tf.where(in1, in2, tf.multiply(in2, -10))
input and output examples = [Example(inputs=[[True, False, False, True, False], [1, 2, 3, 4, 5]], output=[1, -20, -30, 4, -50])] natural language description = use bool tensor as condition
{ "id": "chatcmpl-8Q2Sil5xW0brij0IofSwaaGTTVjZs", "object": "chat.completion", "created": 1701216684, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[7, 9, 41, 109, 102, 22, 14, 1, 15, 60]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 907, "completion_tokens": 30, "total_tokens": 937 } }

{'id': 'chatcmpl-8Q2Sil5xW0brij0IofSwaaGTTVjZs', 'object': 'chat.completion', 'created': 1701216684, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[7, 9, 41, 109, 102, 22, 14, 1, 15, 60]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 907, 'completion_tokens': 30, 'total_tokens': 937}}
Altering:  [7, 9, 41, 109, 102, 22, 14, 1, 15, 60]
Input 'in1':
tf.Tensor([ True False False  True False], shape=(5,), dtype=bool)

Input 'in2':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Output:
tf.Tensor([  1 -20 -30   4 -50], shape=(5,), dtype=int32)

Constants: [-10, 0, 1, -1, True, False, 5]

Description: use bool tensor as condition

Searching...

Found solution: tf.where(in1, x=in2, y=tf.multiply(in2, tf.cast(-10, tf.int32)))

Solution was found in 22.6 seconds:
tf.where(in1, x=in2, y=tf.multiply(in2, tf.cast(-10, tf.int32)))
Found in  22.61620381800003 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 63.98630920000005, 300.25574915600004, 300.304388078]
Benchmark # 36  --  tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)
input and output examples = [Example(inputs=[[5, 7, -12, 10, 20], [1, 2, 3, 1, 2]], output=[15, 27, -12, 15, 27])] natural language description = sum of elements in the first tensor but partitioned by the second tensor
{ "id": "chatcmpl-8Q2T5NLHwbV3t8TMDRniL8PNMx1YB", "object": "chat.completion", "created": 1701216707, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[48, 55, 79, 80, 1, 2, 22, 24, 15, 60]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 920, "completion_tokens": 30, "total_tokens": 950 } }

{'id': 'chatcmpl-8Q2T5NLHwbV3t8TMDRniL8PNMx1YB', 'object': 'chat.completion', 'created': 1701216707, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[48, 55, 79, 80, 1, 2, 22, 24, 15, 60]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 920, 'completion_tokens': 30, 'total_tokens': 950}}
Altering:  [48, 55, 79, 80, 1, 2, 22, 24, 15, 60]
Input 'in1':
tf.Tensor([  5   7 -12  10  20], shape=(5,), dtype=int32)

Input 'in2':
tf.Tensor([1 2 3 1 2], shape=(5,), dtype=int32)

Output:
tf.Tensor([ 15  27 -12  15  27], shape=(5,), dtype=int32)

Constants: [0, 1, -1, True, False, 5]

Description: sum of elements in the first tensor but partitioned by the second tensor

Searching...

Found solution: tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_sum(in1)), in2)

Solution was found in 5.0 seconds:
tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_sum(in1)), in2)
Found in  4.982907891999957 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 63.98630920000005, 300.25574915600004, 300.304388078]
Benchmark # 37  --  tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)
input and output examples = [Example(inputs=[[[11, 12, 13], [30, 20, 10], [77, 88, 99]], [[2, 0, 1], [1, 0, 2], [0, 2, 1]]], output=[[12, 13, 11], [20, 30, 10], [77, 99, 88]])] natural language description = scatter a 2-D tensor with indices
{ "id": "chatcmpl-8Q2TAgaKXpcS8o5FhjKJG7rg8mF3a", "object": "chat.completion", "created": 1701216712, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 23, 24, 25, 87, 102, 105, 83, 9, 113]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 953, "completion_tokens": 30, "total_tokens": 983 } }

{'id': 'chatcmpl-8Q2TAgaKXpcS8o5FhjKJG7rg8mF3a', 'object': 'chat.completion', 'created': 1701216712, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 23, 24, 25, 87, 102, 105, 83, 9, 113]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 953, 'completion_tokens': 30, 'total_tokens': 983}}
Altering:  [22, 23, 24, 25, 87, 102, 105, 83, 9, 113]
Input 'in1':
tf.Tensor(
[[11 12 13]
 [30 20 10]
 [77 88 99]], shape=(3, 3), dtype=int32)

Input 'in2':
tf.Tensor(
[[2 0 1]
 [1 0 2]
 [0 2 1]], shape=(3, 3), dtype=int32)

Output:
tf.Tensor(
[[12 13 11]
 [20 30 10]
 [77 99 88]], shape=(3, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3]

Description: scatter a 2-D tensor with indices

Searching...

Found solution: tf.gather(in1, tf.argsort(in2, axis=1, stable=True), axis=1, batch_dims=1)

Solution was found in 74.0 seconds:
tf.gather(in1, tf.argsort(in2, axis=1, stable=True), axis=1, batch_dims=1)
Found in  74.01229951899995 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 63.98630920000005, 74.01229951899995, 300.25574915600004, 300.304388078]
Benchmark # 38  --  tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)
input and output examples = [Example(inputs=[[10, 7, 4, 3, 2, 8]], output=[5, 3, 2, 1, 0, 4])] natural language description = sort a tensor and return sorted index in original order
{ "id": "chatcmpl-8Q2UMMAc6nAAuOoyPp1RNozPrPel1", "object": "chat.completion", "created": 1701216786, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[5, 22]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 907, "completion_tokens": 6, "total_tokens": 913 } }

{'id': 'chatcmpl-8Q2UMMAc6nAAuOoyPp1RNozPrPel1', 'object': 'chat.completion', 'created': 1701216786, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[5, 22]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 907, 'completion_tokens': 6, 'total_tokens': 913}}
Altering:  [5, 22]
Input 'in1':
tf.Tensor([10  7  4  3  2  8], shape=(6,), dtype=int32)

Output:
tf.Tensor([5 3 2 1 0 4], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6]

Description: sort a tensor and return sorted index in original order

Searching...

Found solution: tf.argsort(tf.argsort(in1, axis=0, stable=True), axis=0, stable=True)

Solution was found in 1.6 seconds:
tf.argsort(tf.argsort(in1, axis=0, stable=True), axis=0, stable=True)
Found in  1.5682393339999408 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 63.98630920000005, 74.01229951899995, 300.25574915600004, 300.304388078]
Benchmark # 39  --  tf.tensor_scatter_nd_update(tensor, indices, tf.reshape(updates, (-1,)))
input and output examples = [Example(inputs={'tensor': [[1, 2, 3, 4, 5], [4, 5, 6, 7, 8], [7, 8, 9, 10, 11]], 'indices': [[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]], 'updates': [[0, -2], [-1, -3], [-2, -4]]}, output=[[0, 2, -2, 4, 5], [4, -1, 6, -3, 8], [7, 8, -2, 10, -4]])] natural language description = update a tensor at the given indices
{ "id": "chatcmpl-8Q2UOFFY8r0emnPwuqTgla8mYNyKu", "object": "chat.completion", "created": 1701216788, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[102]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1023, "completion_tokens": 3, "total_tokens": 1026 } }

{'id': 'chatcmpl-8Q2UOFFY8r0emnPwuqTgla8mYNyKu', 'object': 'chat.completion', 'created': 1701216788, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[102]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1023, 'completion_tokens': 3, 'total_tokens': 1026}}
Altering:  [102]
Input 'tensor':
tf.Tensor(
[[ 1  2  3  4  5]
 [ 4  5  6  7  8]
 [ 7  8  9 10 11]], shape=(3, 5), dtype=int32)

Input 'indices':
tf.Tensor(
[[0 0]
 [0 2]
 [1 1]
 [1 3]
 [2 2]
 [2 4]], shape=(6, 2), dtype=int32)

Input 'updates':
tf.Tensor(
[[ 0 -2]
 [-1 -3]
 [-2 -4]], shape=(3, 2), dtype=int32)

Output:
tf.Tensor(
[[ 0  2 -2  4  5]
 [ 4 -1  6 -3  8]
 [ 7  8 -2 10 -4]], shape=(3, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 5, 6]

Description: update a tensor at the given indices

Searching...

Found solution: tf.tensor_scatter_nd_update(tensor, indices, tf.repeat(updates, 1))

Solution was found in 61.3 seconds:
tf.tensor_scatter_nd_update(tensor, indices, tf.repeat(updates, 1))
Found in  61.33049229400001 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 300.25574915600004, 300.304388078]
Benchmark # 40  --  tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, tf.reduce_max(in1) + 1), axis=1)), tf.int32)
input and output examples = [Example(inputs=[[[0, 2], [1, 3], [2, 4]]], output=[[0, 0], [0, 2], [1, 1], [1, 3], [2, 2], [2, 4]])] natural language description = pair with row index
{ "id": "chatcmpl-8Q2VNJnilriKzAHDdcrXxREoprGQR", "object": "chat.completion", "created": 1701216849, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 24, 83, 100, 102, 113, 114, 115, 120, 121]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 922, "completion_tokens": 30, "total_tokens": 952 } }

{'id': 'chatcmpl-8Q2VNJnilriKzAHDdcrXxREoprGQR', 'object': 'chat.completion', 'created': 1701216849, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 24, 83, 100, 102, 113, 114, 115, 120, 121]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 922, 'completion_tokens': 30, 'total_tokens': 952}}
Altering:  [22, 24, 83, 100, 102, 113, 114, 115, 120, 121]
Input 'in1':
tf.Tensor(
[[0 2]
 [1 3]
 [2 4]], shape=(3, 2), dtype=int32)

Output:
tf.Tensor(
[[0 0]
 [0 2]
 [1 1]
 [1 3]
 [2 2]
 [2 4]], shape=(6, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 6]

Description: pair with row index

Searching...

Found solution: tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, 6), axis=1)), tf.int32)

Solution was found in 75.5 seconds:
tf.cast(tf.where(tf.reduce_max(tf.one_hot(in1, 6), axis=1)), tf.int32)
Found in  75.47025165600007 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 300.25574915600004, 300.304388078]
Benchmark # 41  --  tf.transpose(tf.cast((in1, in1), tf.float32))
input and output examples = [Example(inputs=[[[5.0, 2.0], [1.0, 3.0], [0.0, -1.0]]], output=[[[5.0, 5.0], [1.0, 1.0], [0.0, 0.0]], [[2.0, 2.0], [3.0, 3.0], [-1.0, -1.0]]])] natural language description = reshape by separating and duplicating columns
{ "id": "chatcmpl-8Q2WbZtQpomJkjEZj2GqDXtLccZOx", "object": "chat.completion", "created": 1701216925, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 100, 108]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 962, "completion_tokens": 9, "total_tokens": 971 } }

{'id': 'chatcmpl-8Q2WbZtQpomJkjEZj2GqDXtLccZOx', 'object': 'chat.completion', 'created': 1701216925, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 100, 108]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 962, 'completion_tokens': 9, 'total_tokens': 971}}
Altering:  [83, 100, 108]
Input 'in1':
tf.Tensor(
[[ 5.  2.]
 [ 1.  3.]
 [ 0. -1.]], shape=(3, 2), dtype=float32)

Output:
tf.Tensor(
[[[ 5.  5.]
  [ 1.  1.]
  [ 0.  0.]]

 [[ 2.  2.]
  [ 3.  3.]
  [-1. -1.]]], shape=(2, 3, 2), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: reshape by separating and duplicating columns

Searching...

Found solution: tf.transpose(tf.cast((in1, in1), tf.float32))

Solution was found in 4.9 seconds:
tf.transpose(tf.cast((in1, in1), tf.float32))
Found in  4.941556551999838 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 300.25574915600004, 300.304388078]
Benchmark # 42  --  tf.minimum(in1, tf.constant(1))
input and output examples = [Example(inputs=[[5, 1, 0, 3, 0, -1, 2, -10, 2]], output=[1, 1, 0, 1, 0, -1, 1, -10, 1])] natural language description = clip values that are greater than 1
{ "id": "chatcmpl-8Q2WgnMNbltWiVuVEBHgbXlKL79NA", "object": "chat.completion", "created": 1701216930, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[10]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 923, "completion_tokens": 3, "total_tokens": 926 } }

{'id': 'chatcmpl-8Q2WgnMNbltWiVuVEBHgbXlKL79NA', 'object': 'chat.completion', 'created': 1701216930, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[10]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 923, 'completion_tokens': 3, 'total_tokens': 926}}
Altering:  [10]
Input 'in1':
tf.Tensor([  5   1   0   3   0  -1   2 -10   2], shape=(9,), dtype=int32)

Output:
tf.Tensor([  1   1   0   1   0  -1   1 -10   1], shape=(9,), dtype=int32)

Constants: [1, 0, -1, True, False, 9]

Description: clip values that are greater than 1

Searching...

Found solution: tf.minimum(in1, tf.constant(1))

Solution was found in 2.0 seconds:
tf.minimum(in1, tf.constant(1))
Found in  1.9804573659998823 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 1.9804573659998823, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 300.25574915600004, 300.304388078]
Benchmark # 43  --  tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0) * in2 + (1 - tf.reduce_sum(tf.one_hot(tf.range(3, 5), depth=in1.shape[1], dtype=tf.int32), axis=0)) * in1
input and output examples = [Example(inputs=[[[11, 22, 33, 44, 55, 66, 77], [70, 60, 50, 40, 30, 20, 10]], [[-9, -8, -7, -6, -5, -4, -3], [11, 12, 13, 14, 15, 16, 17]]], output=[[11, 22, 33, -6, -5, 66, 77], [70, 60, 50, 14, 15, 20, 10]])] natural language description = replace certain columns with columns from the other tensor
{ "id": "chatcmpl-8Q2WiO9m5V9zp1mpSGthFVqaR8H4f", "object": "chat.completion", "created": 1701216932, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[7, 22, 102, 113, 114, 117, 120, 121, 122, 123]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1000, "completion_tokens": 30, "total_tokens": 1030 } }

{'id': 'chatcmpl-8Q2WiO9m5V9zp1mpSGthFVqaR8H4f', 'object': 'chat.completion', 'created': 1701216932, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[7, 22, 102, 113, 114, 117, 120, 121, 122, 123]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1000, 'completion_tokens': 30, 'total_tokens': 1030}}
Altering:  [7, 22, 102, 113, 114, 117, 120, 121, 122, 123]
Input 'in1':
tf.Tensor(
[[11 22 33 44 55 66 77]
 [70 60 50 40 30 20 10]], shape=(2, 7), dtype=int32)

Input 'in2':
tf.Tensor(
[[-9 -8 -7 -6 -5 -4 -3]
 [11 12 13 14 15 16 17]], shape=(2, 7), dtype=int32)

Output:
tf.Tensor(
[[11 22 33 -6 -5 66 77]
 [70 60 50 14 15 20 10]], shape=(2, 7), dtype=int32)

Constants: [3, 4, 5, 0, 1, -1, True, False, 2, 7]

Description: replace certain columns with columns from the other tensor

Searching...

Could not find solution within 300 seconds.
Found in  300.3578979440001 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 1.9804573659998823, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 44  --  tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))
input and output examples = [Example(inputs=[[[12, 23, 34, 45], [66, 77, 88, 99]], [[0, 1], [0, 1], [1, 0], [0, 0]], [[2, 1], [1, 2], [0, 2], [0, 0]]], output=[[34, 77], [23, 88], [66, 34], [12, 12]])] natural language description = index into the tensor
{ "id": "chatcmpl-8Q2bZv6ScdNqVY2cCBvs3y9x1jPQb", "object": "chat.completion", "created": 1701217233, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 23, 24, 25, 83, 105, 113, 114, 120, 122]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 964, "completion_tokens": 30, "total_tokens": 994 } }

{'id': 'chatcmpl-8Q2bZv6ScdNqVY2cCBvs3y9x1jPQb', 'object': 'chat.completion', 'created': 1701217233, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 23, 24, 25, 83, 105, 113, 114, 120, 122]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 964, 'completion_tokens': 30, 'total_tokens': 994}}
Altering:  [22, 23, 24, 25, 83, 105, 113, 114, 120, 122]
Input 'in1':
tf.Tensor(
[[12 23 34 45]
 [66 77 88 99]], shape=(2, 4), dtype=int32)

Input 'in2':
tf.Tensor(
[[0 1]
 [0 1]
 [1 0]
 [0 0]], shape=(4, 2), dtype=int32)

Input 'in3':
tf.Tensor(
[[2 1]
 [1 2]
 [0 2]
 [0 0]], shape=(4, 2), dtype=int32)

Output:
tf.Tensor(
[[34 77]
 [23 88]
 [66 34]
 [12 12]], shape=(4, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 4]

Description: index into the tensor

Searching...

Found solution: tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))

Solution was found in 108.9 seconds:
tf.gather_nd(in1, tf.stack((in2, in3), axis=-1))
Found in  108.89333510799997 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.8101698539999802, 1.9804573659998823, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 45  --  tf.tensordot(in1, in2, 1)
input and output examples = [Example(inputs=[[[4, 3, 1], [6, 5, 2]], [[[5, 5]], [[1, 5]], [[6, 0]]]], output=[[[29, 35]], [[47, 55]]])] natural language description = tensor multiplication like np.tensordot
{ "id": "chatcmpl-8Q2dKMPXo26uLQJAS5u8scpMG8RKk", "object": "chat.completion", "created": 1701217342, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[103, 56, 59, 105, 83, 1, 14, 9, 8, 22]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 921, "completion_tokens": 30, "total_tokens": 951 } }

{'id': 'chatcmpl-8Q2dKMPXo26uLQJAS5u8scpMG8RKk', 'object': 'chat.completion', 'created': 1701217342, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[103, 56, 59, 105, 83, 1, 14, 9, 8, 22]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 921, 'completion_tokens': 30, 'total_tokens': 951}}
Altering:  [103, 56, 59, 105, 83, 1, 14, 9, 8, 22]
Input 'in1':
tf.Tensor(
[[4 3 1]
 [6 5 2]], shape=(2, 3), dtype=int32)

Input 'in2':
tf.Tensor(
[[[5 5]]

 [[1 5]]

 [[6 0]]], shape=(3, 1, 2), dtype=int32)

Output:
tf.Tensor(
[[[29 35]]

 [[47 55]]], shape=(2, 1, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: tensor multiplication like np.tensordot

Searching...

Found solution: tf.tensordot(in1, in2, 1)

Solution was found in 1.8 seconds:
tf.tensordot(in1, in2, 1)
Found in  1.7754674200000409 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 46  --  tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)
input and output examples = [Example(inputs=[[3, 5, 0, 2, 3, 3, 0]], output=[[1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0], [1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], [1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]])] natural language description = binary tensor from vector indicating if elements are equal
{ "id": "chatcmpl-8Q2dM5EZchTyHb7eMk8OGBrB78HsW", "object": "chat.completion", "created": 1701217344, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[15, 9, 61, 83, 92, 98, 12, 8, 21, 104]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1137, "completion_tokens": 30, "total_tokens": 1167 } }

{'id': 'chatcmpl-8Q2dM5EZchTyHb7eMk8OGBrB78HsW', 'object': 'chat.completion', 'created': 1701217344, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[15, 9, 61, 83, 92, 98, 12, 8, 21, 104]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1137, 'completion_tokens': 30, 'total_tokens': 1167}}
Altering:  [15, 9, 61, 83, 92, 98, 12, 8, 21, 104]
Input 'in1':
tf.Tensor([3 5 0 2 3 3 0], shape=(7,), dtype=int32)

Output:
tf.Tensor(
[[1. 0. 0. 0. 1. 1. 0.]
 [0. 1. 0. 0. 0. 0. 0.]
 [0. 0. 1. 0. 0. 0. 1.]
 [0. 0. 0. 1. 0. 0. 0.]
 [1. 0. 0. 0. 1. 1. 0.]
 [1. 0. 0. 0. 1. 1. 0.]
 [0. 0. 1. 0. 0. 0. 1.]], shape=(7, 7), dtype=float32)

Constants: [0, 1, -1, True, False, 7]

Description: binary tensor from vector indicating if elements are equal

Searching...

Found solution: tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)

Solution was found in 2.1 seconds:
tf.cast(tf.equal(in1, tf.expand_dims(in1, 1)), tf.float32)
Found in  2.0916166800000155 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.496535494999989, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 47  --  tf.cast(tf.unstack(in1, axis=1), tf.int32)
input and output examples = [Example(inputs=[[[[8, 4, 6], [2, 12, 3]], [[11, 12, 5], [9, 12, 12]], [[9, 2, 13], [7, 0, 7]], [[2, 10, 5], [7, 1, 2]]]], output=[[[8, 4, 6], [11, 12, 5], [9, 2, 13], [2, 10, 5]], [[2, 12, 3], [9, 12, 12], [7, 0, 7], [7, 1, 2]]])] natural language description = swap the first two dimensions of the tensor
{ "id": "chatcmpl-8Q2dOrg0D6hfPi2sNkn2803AgSlt2", "object": "chat.completion", "created": 1701217346, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1018, "completion_tokens": 3, "total_tokens": 1021 } }

{'id': 'chatcmpl-8Q2dOrg0D6hfPi2sNkn2803AgSlt2', 'object': 'chat.completion', 'created': 1701217346, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[105]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1018, 'completion_tokens': 3, 'total_tokens': 1021}}
Altering:  [105]
Input 'in1':
tf.Tensor(
[[[ 8  4  6]
  [ 2 12  3]]

 [[11 12  5]
  [ 9 12 12]]

 [[ 9  2 13]
  [ 7  0  7]]

 [[ 2 10  5]
  [ 7  1  2]]], shape=(4, 2, 3), dtype=int32)

Output:
tf.Tensor(
[[[ 8  4  6]
  [11 12  5]
  [ 9  2 13]
  [ 2 10  5]]

 [[ 2 12  3]
  [ 9 12 12]
  [ 7  0  7]
  [ 7  1  2]]], shape=(2, 4, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 4]

Description: swap the first two dimensions of the tensor

Searching...

Found solution: tf.cast(tf.unstack(in1, axis=1), tf.int32)

Solution was found in 3.5 seconds:
tf.cast(tf.unstack(in1, axis=1), tf.int32)
Found in  3.4684446769999795 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 48  --  tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))
input and output examples = [Example(inputs=[[-1, 0, -3, 2, 1, 3, 5, -1, -9, 2, 10], [12, 3, 45, 6, 7, 8, 9, 87, 65, 4, 32]], output=[6, 8, 9, 4, 32])] natural language description = select the values in the second tensor where the first tensor is greater than 1
{ "id": "chatcmpl-8Q2dSyP1UQ4Svma4R9OtdyOm1HC6B", "object": "chat.completion", "created": 1701217350, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[26, 7, 109]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 959, "completion_tokens": 9, "total_tokens": 968 } }

{'id': 'chatcmpl-8Q2dSyP1UQ4Svma4R9OtdyOm1HC6B', 'object': 'chat.completion', 'created': 1701217350, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[26, 7, 109]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 959, 'completion_tokens': 9, 'total_tokens': 968}}
Altering:  [26, 7, 109]
Input 'in1':
tf.Tensor([-1  0 -3  2  1  3  5 -1 -9  2 10], shape=(11,), dtype=int32)

Input 'in2':
tf.Tensor([12  3 45  6  7  8  9 87 65  4 32], shape=(11,), dtype=int32)

Output:
tf.Tensor([ 6  8  9  4 32], shape=(5,), dtype=int32)

Constants: [1, 0, -1, True, False, 5, 11]

Description: select the values in the second tensor where the first tensor is greater than 1

Searching...

Found solution: tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))

Solution was found in 2.1 seconds:
tf.boolean_mask(in2, tf.greater(in1, tf.constant(1)))
Found in  2.1309787860000142 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 49  --  tf.unique_with_counts(in1)[1]
input and output examples = [Example(inputs=[[37, 42, 42, 37, 28, 15, 42, 15]], output=[0, 1, 1, 0, 2, 3, 1, 3])] natural language description = group items by value and get the group indices
{ "id": "chatcmpl-8Q2dUK8EZhZYUXQ6dSiVuKUYTyJAW", "object": "chat.completion", "created": 1701217352, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[107, 22, 15, 83, 24, 9, 11, 68, 94, 81]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 918, "completion_tokens": 30, "total_tokens": 948 } }

{'id': 'chatcmpl-8Q2dUK8EZhZYUXQ6dSiVuKUYTyJAW', 'object': 'chat.completion', 'created': 1701217352, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[107, 22, 15, 83, 24, 9, 11, 68, 94, 81]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 918, 'completion_tokens': 30, 'total_tokens': 948}}
Altering:  [107, 22, 15, 83, 24, 9, 11, 68, 94, 81]
Input 'in1':
tf.Tensor([37 42 42 37 28 15 42 15], shape=(8,), dtype=int32)

Output:
tf.Tensor([0 1 1 0 2 3 1 3], shape=(8,), dtype=int32)

Constants: [0, 1, -1, True, False, 8]

Description: group items by value and get the group indices

Searching...

Found solution: tf.unique_with_counts(in1)[1]

Solution was found in 3.2 seconds:
tf.unique_with_counts(in1)[1]
Found in  3.183302112999854 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 50  --  tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))
input and output examples = [Example(inputs=[[[15, 10], [20, -5]], [[2, 3, 1], [-2, 5, 0]]], output=[[[30, 45, 15], [20, 30, 10]], [[-40, 100, 0], [10, -25, 0]]])] natural language description = perform matrix multiplication
{ "id": "chatcmpl-8Q2dXj1BXLFFnESlPADYmUtTZ1336", "object": "chat.completion", "created": 1701217355, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[56]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 935, "completion_tokens": 3, "total_tokens": 938 } }

{'id': 'chatcmpl-8Q2dXj1BXLFFnESlPADYmUtTZ1336', 'object': 'chat.completion', 'created': 1701217355, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[56]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 935, 'completion_tokens': 3, 'total_tokens': 938}}
Altering:  [56]
Input 'in1':
tf.Tensor(
[[15 10]
 [20 -5]], shape=(2, 2), dtype=int32)

Input 'in2':
tf.Tensor(
[[ 2  3  1]
 [-2  5  0]], shape=(2, 3), dtype=int32)

Output:
tf.Tensor(
[[[ 30  45  15]
  [ 20  30  10]]

 [[-40 100   0]
  [ 10 -25   0]]], shape=(2, 2, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: perform matrix multiplication

Searching...

Found solution: tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))

Solution was found in 4.7 seconds:
tf.matmul(tf.expand_dims(in1, -1), tf.expand_dims(in2, 1))
Found in  4.679113113000085 s!
[0.7820480090000004, 0.858646147, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 51  --  tf.math.bincount(in1)
input and output examples = [Example(inputs=[[4, 0, 1, 1, 0, 4, 0, 0, 3, 4, 1]], output=[4, 3, 0, 1, 3])] natural language description = count the number of occurences of each distinct number
{ "id": "chatcmpl-8Q2dc5mTjczfJtkQGwflvyXdskE9q", "object": "chat.completion", "created": 1701217360, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[28, 72, 107]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 920, "completion_tokens": 9, "total_tokens": 929 } }

{'id': 'chatcmpl-8Q2dc5mTjczfJtkQGwflvyXdskE9q', 'object': 'chat.completion', 'created': 1701217360, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[28, 72, 107]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 920, 'completion_tokens': 9, 'total_tokens': 929}}
Altering:  [28, 72, 107]
Input 'in1':
tf.Tensor([4 0 1 1 0 4 0 0 3 4 1], shape=(11,), dtype=int32)

Output:
tf.Tensor([4 3 0 1 3], shape=(5,), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 11]

Description: count the number of occurences of each distinct number

Searching...

Found solution: tf.math.bincount(in1)

Solution was found in 1.0 seconds:
tf.math.bincount(in1)
Found in  0.9504489089999879 s!
[0.7820480090000004, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 52  --  tf.gather(in1, (0, 2), axis=1, batch_dims=0)
input and output examples = [Example(inputs=[[[12, 34, 56], [33, 22, 11]]], output=[[12, 56], [33, 11]])] natural language description = remove a column from the tensor
{ "id": "chatcmpl-8Q2ddljNFoY4C99qq3HS8AqU9wSgr", "object": "chat.completion", "created": 1701217361, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 98, 105, 113, 114, 117, 120, 121, 122, 123]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 900, "completion_tokens": 30, "total_tokens": 930 } }

{'id': 'chatcmpl-8Q2ddljNFoY4C99qq3HS8AqU9wSgr', 'object': 'chat.completion', 'created': 1701217361, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 98, 105, 113, 114, 117, 120, 121, 122, 123]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 900, 'completion_tokens': 30, 'total_tokens': 930}}
Altering:  [83, 98, 105, 113, 114, 117, 120, 121, 122, 123]
Input 'in1':
tf.Tensor(
[[12 34 56]
 [33 22 11]], shape=(2, 3), dtype=int32)

Output:
tf.Tensor(
[[12 56]
 [33 11]], shape=(2, 2), dtype=int32)

Constants: [0, 1, 2, -1, True, False, 3]

Description: remove a column from the tensor

Searching...

Found solution: tf.transpose(tf.gather(tf.transpose(in1), (0, 2)))

Solution was found in 13.0 seconds:
tf.transpose(tf.gather(tf.transpose(in1), (0, 2)))
Found in  12.977774331000091 s!
[0.7820480090000004, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 53  --  tf.tensordot(in1, in2, (1, 1))
input and output examples = [Example(inputs=[[[3, 5], [10, 2]], [[[1, 0], [5, 4]], [[3, 10], [2, -2]]]], output=[[[28, 20], [19, 20]], [[20, 8], [34, 96]]])] natural language description = multiply vectors by tensor
{ "id": "chatcmpl-8Q2dq8Ej69UQeYarHDnbE1J7UKNuC", "object": "chat.completion", "created": 1701217374, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[56, 59, 83, 12, 9, 104, 8, 102, 103, 22]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 929, "completion_tokens": 30, "total_tokens": 959 } }

{'id': 'chatcmpl-8Q2dq8Ej69UQeYarHDnbE1J7UKNuC', 'object': 'chat.completion', 'created': 1701217374, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[56, 59, 83, 12, 9, 104, 8, 102, 103, 22]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 929, 'completion_tokens': 30, 'total_tokens': 959}}
Altering:  [56, 59, 83, 12, 9, 104, 8, 102, 103, 22]
Input 'in1':
tf.Tensor(
[[ 3  5]
 [10  2]], shape=(2, 2), dtype=int32)

Input 'in2':
tf.Tensor(
[[[ 1  0]
  [ 5  4]]

 [[ 3 10]
  [ 2 -2]]], shape=(2, 2, 2), dtype=int32)

Output:
tf.Tensor(
[[[28 20]
  [19 20]]

 [[20  8]
  [34 96]]], shape=(2, 2, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2]

Description: multiply vectors by tensor

Searching...

Found solution: tf.tensordot(in1, in2, (1, 1))

Solution was found in 4.3 seconds:
tf.tensordot(in1, in2, (1, 1))
Found in  4.343933309000022 s!
[0.7820480090000004, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 54  --  tf.reduce_any(in1, axis=-1)
input and output examples = [Example(inputs=[[[[False, False, True], [False, False, False], [True, False, True], [False, True, False], [False, False, False], [True, True, True], [True, True, False]]]], output=[[True, False, True, True, False, True, True]])] natural language description = choose True if any value in a row is True, False otherwise
{ "id": "chatcmpl-8Q2duhtLDXNPumblOHPH3jr73cEHg", "object": "chat.completion", "created": 1701217378, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[70]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 942, "completion_tokens": 3, "total_tokens": 945 } }

{'id': 'chatcmpl-8Q2duhtLDXNPumblOHPH3jr73cEHg', 'object': 'chat.completion', 'created': 1701217378, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[70]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 942, 'completion_tokens': 3, 'total_tokens': 945}}
Altering:  [70]
Input 'in1':
tf.Tensor(
[[[False False  True]
  [False False False]
  [ True False  True]
  [False  True False]
  [False False False]
  [ True  True  True]
  [ True  True False]]], shape=(1, 7, 3), dtype=bool)

Output:
tf.Tensor([[ True False  True  True False  True  True]], shape=(1, 7), dtype=bool)

Constants: [0, 1, -1, True, False, 2, 3, 7]

Description: choose True if any value in a row is True, False otherwise

Searching...

Found solution: tf.reduce_any(in1, axis=-1)

Solution was found in 0.8 seconds:
tf.reduce_any(in1, axis=-1)
Found in  0.7925840069999595 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 18.72501255100002, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 55  --  tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))
input and output examples = [Example(inputs=[[3, 1, 2, 0, 1, -1, 10, 1, -10]], output=[3, 0, 2, 0, 0, -1, 10, 0, -10])] natural language description = set all instances of 1 to 0
{ "id": "chatcmpl-8Q2dvCbpWU3JHniWpxDWbDYSbZx3h", "object": "chat.completion", "created": 1701217379, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[15, 102]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 924, "completion_tokens": 6, "total_tokens": 930 } }

{'id': 'chatcmpl-8Q2dvCbpWU3JHniWpxDWbDYSbZx3h', 'object': 'chat.completion', 'created': 1701217379, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[15, 102]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 924, 'completion_tokens': 6, 'total_tokens': 930}}
Altering:  [15, 102]
Input 'in1':
tf.Tensor([  3   1   2   0   1  -1  10   1 -10], shape=(9,), dtype=int32)

Output:
tf.Tensor([  3   0   2   0   0  -1  10   0 -10], shape=(9,), dtype=int32)

Constants: [0, 1, -1, True, False, 9]

Description: set all instances of 1 to 0

Searching...

Found solution: tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))

Solution was found in 22.0 seconds:
tf.subtract(in1, tf.cast(tf.equal(in1, tf.constant(1)), tf.int32))
Found in  22.038889645999916 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 56  --  tf.multiply(in1, tf.expand_dims(in2, 1))
input and output examples = [Example(inputs=[[[2, 5], [3, 0], [8, -7]], [4, 10, -6]], output=[[8, 20], [30, 0], [-48, 42]])] natural language description = multiply tensors across the first axis
{ "id": "chatcmpl-8Q2eHjUUrv5OeRhH29GnbPpsOBN6T", "object": "chat.completion", "created": 1701217401, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[59]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 914, "completion_tokens": 3, "total_tokens": 917 } }

{'id': 'chatcmpl-8Q2eHjUUrv5OeRhH29GnbPpsOBN6T', 'object': 'chat.completion', 'created': 1701217401, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[59]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 914, 'completion_tokens': 3, 'total_tokens': 917}}
Altering:  [59]
Input 'in1':
tf.Tensor(
[[ 2  5]
 [ 3  0]
 [ 8 -7]], shape=(3, 2), dtype=int32)

Input 'in2':
tf.Tensor([ 4 10 -6], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[  8  20]
 [ 30   0]
 [-48  42]], shape=(3, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: multiply tensors across the first axis

Searching...

Found solution: tf.multiply(in1, tf.expand_dims(in2, 1))

Solution was found in 1.1 seconds:
tf.multiply(in1, tf.expand_dims(in2, 1))
Found in  1.0834865589999936 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 57  --  tf.stack((in1, in1), axis=1)
input and output examples = [Example(inputs=[[17, -32, 99]], output=[[17, 17], [-32, -32], [99, 99]])] natural language description = duplicate each element of a tensor
{ "id": "chatcmpl-8Q2eI6dtyk5qyZXk6nZ2bOjU2JP3u", "object": "chat.completion", "created": 1701217402, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[81, 83, 8, 100, 11, 92, 12, 9, 104, 108]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 895, "completion_tokens": 30, "total_tokens": 925 } }

{'id': 'chatcmpl-8Q2eI6dtyk5qyZXk6nZ2bOjU2JP3u', 'object': 'chat.completion', 'created': 1701217402, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[81, 83, 8, 100, 11, 92, 12, 9, 104, 108]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 895, 'completion_tokens': 30, 'total_tokens': 925}}
Altering:  [81, 83, 8, 100, 11, 92, 12, 9, 104, 108]
Input 'in1':
tf.Tensor([ 17 -32  99], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[ 17  17]
 [-32 -32]
 [ 99  99]], shape=(3, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: duplicate each element of a tensor

Searching...

Found solution: tf.stack((in1, in1), axis=1)

Solution was found in 2.2 seconds:
tf.stack((in1, in1), axis=1)
Found in  2.2323741820000578 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 58  --  tf.add(in3, tf.matmul(in1, in2))
input and output examples = [Example(inputs=[[[[1, 1, 1], [1, 0, 1]], [[1, 2, 3], [4, 5, 6]]], [[1, 1, 1, 1], [1, 2, 3, 4], [5, 6, 7, 8]], [100, 200, 300, 400]], output=[[[107, 209, 311, 413], [106, 207, 308, 409]], [[118, 223, 328, 433], [139, 250, 361, 472]]])] natural language description = multiply 3D tensor and 2D tensor and add another tensor
{ "id": "chatcmpl-8Q2eKtV3ohvdbCX083GFAmc9iWjby", "object": "chat.completion", "created": 1701217404, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 56, 83, 92, 103, 105, 8, 9, 17]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1012, "completion_tokens": 30, "total_tokens": 1042 } }

{'id': 'chatcmpl-8Q2eKtV3ohvdbCX083GFAmc9iWjby', 'object': 'chat.completion', 'created': 1701217404, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 59, 56, 83, 92, 103, 105, 8, 9, 17]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1012, 'completion_tokens': 30, 'total_tokens': 1042}}
Altering:  [1, 59, 56, 83, 92, 103, 105, 8, 9, 17]
Input 'in1':
tf.Tensor(
[[[1 1 1]
  [1 0 1]]

 [[1 2 3]
  [4 5 6]]], shape=(2, 2, 3), dtype=int32)

Input 'in2':
tf.Tensor(
[[1 1 1 1]
 [1 2 3 4]
 [5 6 7 8]], shape=(3, 4), dtype=int32)

Input 'in3':
tf.Tensor([100 200 300 400], shape=(4,), dtype=int32)

Output:
tf.Tensor(
[[[107 209 311 413]
  [106 207 308 409]]

 [[118 223 328 433]
  [139 250 361 472]]], shape=(2, 2, 4), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 4]

Description: multiply 3D tensor and 2D tensor and add another tensor

Searching...

Found solution: tf.add(in3, tf.matmul(in1, in2))

Solution was found in 3.2 seconds:
tf.add(in3, tf.matmul(in1, in2))
Found in  3.2084404459999405 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 59  --  tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))
input and output examples = [Example(inputs=[[[3, 1, 2], [1, 0, 4], [1, 2, 3], [0, 5, 1], [1, 1, 2], [2, 3, 1], [2, 1, 0]]], output=[[0, 5, 1], [1, 0, 4], [1, 1, 2], [1, 2, 3], [2, 1, 0], [2, 3, 1], [3, 1, 2]])] natural language description = sort a tensor considering the first column, breaking ties using the second column
{ "id": "chatcmpl-8Q2eNS6wPmHBeWcBn0bBIpGMqog8G", "object": "chat.completion", "created": 1701217407, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[5, 22, 105, 83, 12, 94, 9, 92, 24, 113]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1004, "completion_tokens": 30, "total_tokens": 1034 } }

{'id': 'chatcmpl-8Q2eNS6wPmHBeWcBn0bBIpGMqog8G', 'object': 'chat.completion', 'created': 1701217407, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[5, 22, 105, 83, 12, 94, 9, 92, 24, 113]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1004, 'completion_tokens': 30, 'total_tokens': 1034}}
Altering:  [5, 22, 105, 83, 12, 94, 9, 92, 24, 113]
Input 'in1':
tf.Tensor(
[[3 1 2]
 [1 0 4]
 [1 2 3]
 [0 5 1]
 [1 1 2]
 [2 3 1]
 [2 1 0]], shape=(7, 3), dtype=int32)

Output:
tf.Tensor(
[[0 5 1]
 [1 0 4]
 [1 1 2]
 [1 2 3]
 [2 1 0]
 [2 3 1]
 [3 1 2]], shape=(7, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 7]

Description: sort a tensor considering the first column, breaking ties using the second column

Searching...

Could not find solution within 300 seconds.
Found in  300.13927618899993 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 60  --  tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)
input and output examples = [Example(inputs=[[[0.7, 0.2, 0.1], [0.4, 0.5, 0.1], [0.4, 0.4, 0.2], [0.3, 0.4, 0.3], [0.0, 0.0, 1.0]]], output=[[1, 0, 0], [0, 1, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1]])] natural language description = compute argmax in each tensor and set it to 1
{ "id": "chatcmpl-8Q2jF60xYqlmwyFib0FLxusY1kaiV", "object": "chat.completion", "created": 1701217709, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[3, 9, 61]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 996, "completion_tokens": 9, "total_tokens": 1005 } }

{'id': 'chatcmpl-8Q2jF60xYqlmwyFib0FLxusY1kaiV', 'object': 'chat.completion', 'created': 1701217709, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[3, 9, 61]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 996, 'completion_tokens': 9, 'total_tokens': 1005}}
Altering:  [3, 9, 61]
Input 'in1':
tf.Tensor(
[[0.7 0.2 0.1]
 [0.4 0.5 0.1]
 [0.4 0.4 0.2]
 [0.3 0.4 0.3]
 [0.  0.  1. ]], shape=(5, 3), dtype=float32)

Output:
tf.Tensor(
[[1 0 0]
 [0 1 0]
 [1 0 0]
 [0 1 0]
 [0 0 1]], shape=(5, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 5]

Description: compute argmax in each tensor and set it to 1

Searching...

Found solution: tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)

Solution was found in 2.4 seconds:
tf.cast(tf.one_hot(tf.argmax(in1, axis=1), 3), tf.int32)
Found in  2.398083329999963 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 61  --  tf.gather(in2, in1, axis=1, batch_dims=1)
input and output examples = [Example(inputs=[[[2], [0], [1], [0]], [[0.2, 0.5, 0.3], [0.1, 0.3, 0.6], [0.1, 0.6, 0.3], [0.7, 0.0, 0.3]]], output=[[0.3], [0.1], [0.6], [0.7]])] natural language description = gather elements in a tensor along axis 1
{ "id": "chatcmpl-8Q2jHO5nUIvWNnrN3P8AFkn2DhCo0", "object": "chat.completion", "created": 1701217711, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 24, 3, 83, 105, 9, 113, 120, 121, 122]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 965, "completion_tokens": 30, "total_tokens": 995 } }

{'id': 'chatcmpl-8Q2jHO5nUIvWNnrN3P8AFkn2DhCo0', 'object': 'chat.completion', 'created': 1701217711, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 24, 3, 83, 105, 9, 113, 120, 121, 122]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 965, 'completion_tokens': 30, 'total_tokens': 995}}
Altering:  [22, 24, 3, 83, 105, 9, 113, 120, 121, 122]
Input 'in1':
tf.Tensor(
[[2]
 [0]
 [1]
 [0]], shape=(4, 1), dtype=int32)

Input 'in2':
tf.Tensor(
[[0.2 0.5 0.3]
 [0.1 0.3 0.6]
 [0.1 0.6 0.3]
 [0.7 0.  0.3]], shape=(4, 3), dtype=float32)

Output:
tf.Tensor(
[[0.3]
 [0.1]
 [0.6]
 [0.7]], shape=(4, 1), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4]

Description: gather elements in a tensor along axis 1

Searching...

Found solution: tf.gather(in2, in1, axis=1, batch_dims=1)

Solution was found in 4.2 seconds:
tf.gather(in2, in1, axis=1, batch_dims=1)
Found in  4.184564288000047 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 62  --  tf.tensordot(tf.cast(in1, tf.float32), in2, 1)
input and output examples = [Example(inputs=[[3, 1, 10], [[0.6, 0.4], [0.5, 1.0], [3.0, 4.0]]], output=[32.3, 42.2])] natural language description = multiply a vector with a matrix without reshaping the vector
{ "id": "chatcmpl-8Q2jLJZ6Map7ITedDmZxmDMzGEGBq", "object": "chat.completion", "created": 1701217715, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[56, 59, 12, 83, 8, 92, 9, 22, 24, 102]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 922, "completion_tokens": 30, "total_tokens": 952 } }

{'id': 'chatcmpl-8Q2jLJZ6Map7ITedDmZxmDMzGEGBq', 'object': 'chat.completion', 'created': 1701217715, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[56, 59, 12, 83, 8, 92, 9, 22, 24, 102]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 922, 'completion_tokens': 30, 'total_tokens': 952}}
Altering:  [56, 59, 12, 83, 8, 92, 9, 22, 24, 102]
Input 'in1':
tf.Tensor([ 3  1 10], shape=(3,), dtype=int32)

Input 'in2':
tf.Tensor(
[[0.6 0.4]
 [0.5 1. ]
 [3.  4. ]], shape=(3, 2), dtype=float32)

Output:
tf.Tensor([32.3 42.2], shape=(2,), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: multiply a vector with a matrix without reshaping the vector

Searching...

Found solution: tf.tensordot(tf.cast(in1, tf.float32), in2, 1)

Solution was found in 2.8 seconds:
tf.tensordot(tf.cast(in1, tf.float32), in2, 1)
Found in  2.778141201999915 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 63  --  tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)
input and output examples = [Example(inputs=[[[0, 5, 2], [3, 1, 4], [5, 1, 5]]], output=[[1, 0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 1, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0]])] natural language description = place 1 at the indices in the input tensor
{ "id": "chatcmpl-8Q2jO6YoKdYEIvkq5Y6TPIFYtKHQJ", "object": "chat.completion", "created": 1701217718, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[87, 21, 83, 92, 9, 61, 102, 24, 22, 113]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 982, "completion_tokens": 30, "total_tokens": 1012 } }

{'id': 'chatcmpl-8Q2jO6YoKdYEIvkq5Y6TPIFYtKHQJ', 'object': 'chat.completion', 'created': 1701217718, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[87, 21, 83, 92, 9, 61, 102, 24, 22, 113]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 982, 'completion_tokens': 30, 'total_tokens': 1012}}
Altering:  [87, 21, 83, 92, 9, 61, 102, 24, 22, 113]
Input 'in1':
tf.Tensor(
[[0 5 2]
 [3 1 4]
 [5 1 5]], shape=(3, 3), dtype=int32)

Output:
tf.Tensor(
[[1 0 1 0 0 1 0 0 0]
 [0 1 0 1 1 0 0 0 0]
 [0 1 0 0 0 1 0 0 0]], shape=(3, 9), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 9]

Description: place 1 at the indices in the input tensor

Searching...

Found solution: tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)

Solution was found in 5.8 seconds:
tf.cast(tf.reduce_max(tf.one_hot(in1, 9), axis=1), tf.int32)
Found in  5.825709018999987 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 64  --  tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)
input and output examples = [Example(inputs=[[3.0, 1.0, 4.0, 5.0, 2.0, 8.0, -6.0, -7.0], [0.5, 0.0, -2.0, 0.0, 1.0, -1.0, 0.0, 2.0]], output=[6.0, 1.0, -2.0, 5.0, 2.0, -8.0, -6.0, -3.5])] natural language description = like tf.divide(), but when dividing by 0, return the numerator
{ "id": "chatcmpl-8Q2jU6wPVbPtVZQsoAeJNCEReuVO0", "object": "chat.completion", "created": 1701217724, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[34, 101, 9, 14, 1, 102, 2, 15, 60, 41]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 995, "completion_tokens": 30, "total_tokens": 1025 } }

{'id': 'chatcmpl-8Q2jU6wPVbPtVZQsoAeJNCEReuVO0', 'object': 'chat.completion', 'created': 1701217724, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[34, 101, 9, 14, 1, 102, 2, 15, 60, 41]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 995, 'completion_tokens': 30, 'total_tokens': 1025}}
Altering:  [34, 101, 9, 14, 1, 102, 2, 15, 60, 41]
Input 'in1':
tf.Tensor([ 3.  1.  4.  5.  2.  8. -6. -7.], shape=(8,), dtype=float32)

Input 'in2':
tf.Tensor([ 0.5  0.  -2.   0.   1.  -1.   0.   2. ], shape=(8,), dtype=float32)

Output:
tf.Tensor([ 6.   1.  -2.   5.   2.  -8.  -6.  -3.5], shape=(8,), dtype=float32)

Constants: [0, 1, -1, True, False, 8]

Description: like tf.divide(), but when dividing by 0, return the numerator

Searching...

Found solution: tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)

Solution was found in 14.5 seconds:
tf.where(tf.cast(in2, tf.bool), x=tf.divide(in1, in2), y=in1)
Found in  14.543788867000103 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 65  --  tf.tile(tf.eye(in1), (in2, 1))
input and output examples = [Example(inputs=[3, 4], output=[[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]])] natural language description = copy the tensor tf.eye(3), 4 times
{ "id": "chatcmpl-8Q2jjhluMDaEXLCGrfn7ljEfiAypV", "object": "chat.completion", "created": 1701217739, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[18, 104]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1059, "completion_tokens": 6, "total_tokens": 1065 } }

{'id': 'chatcmpl-8Q2jjhluMDaEXLCGrfn7ljEfiAypV', 'object': 'chat.completion', 'created': 1701217739, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[18, 104]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1059, 'completion_tokens': 6, 'total_tokens': 1065}}
Altering:  [18, 104]
Input 'in1':
3

Input 'in2':
4

Output:
tf.Tensor(
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]
 [1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]], shape=(12, 3), dtype=float32)

Constants: [0, 1, -1, True, False, 12]

Description: copy the tensor tf.eye(3), 4 times

Searching...

Found solution: tf.tile(tf.eye(in1), (in2, 1))

Solution was found in 3.5 seconds:
tf.tile(tf.eye(in1), (in2, 1))
Found in  3.488692386999901 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 66  --  tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)
input and output examples = [Example(inputs=[[[[3, 4], [1, 2]], [[5, -2], [-10, 3]], [[10, 20], [-4, 7]]]], output=[10, -4, 33])] natural language description = reduction operation for multiple dimensions simultaneously
{ "id": "chatcmpl-8Q2jmklENVoIDf6eEkZQAAg9ukx6g", "object": "chat.completion", "created": 1701217742, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[72, 73, 74, 75, 76, 77, 78, 79, 80, 83]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 915, "completion_tokens": 30, "total_tokens": 945 } }

{'id': 'chatcmpl-8Q2jmklENVoIDf6eEkZQAAg9ukx6g', 'object': 'chat.completion', 'created': 1701217742, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[72, 73, 74, 75, 76, 77, 78, 79, 80, 83]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 915, 'completion_tokens': 30, 'total_tokens': 945}}
Altering:  [72, 73, 74, 75, 76, 77, 78, 79, 80, 83]
Input 'in1':
tf.Tensor(
[[[  3   4]
  [  1   2]]

 [[  5  -2]
  [-10   3]]

 [[ 10  20]
  [ -4   7]]], shape=(3, 2, 2), dtype=int32)

Output:
tf.Tensor([10 -4 33], shape=(3,), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: reduction operation for multiple dimensions simultaneously

Searching...

Found solution: tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)

Solution was found in 1.9 seconds:
tf.reduce_sum(tf.reduce_sum(in1, axis=1), axis=1)
Found in  1.9351502550000532 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 67  --  tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)
input and output examples = [Example(inputs=[[0, 3, 5, 6], 8], output=[1, 0, 0, 1, 0, 1, 1, 0])] natural language description = boolean tensor with 1 at the indices in the input tensor
{ "id": "chatcmpl-8Q2joEO8aATeS4MxYHZju9oDP2cGx", "object": "chat.completion", "created": 1701217744, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[21, 61, 68, 87, 102, 111, 22, 24, 9, 12]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 912, "completion_tokens": 30, "total_tokens": 942 } }

{'id': 'chatcmpl-8Q2joEO8aATeS4MxYHZju9oDP2cGx', 'object': 'chat.completion', 'created': 1701217744, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[21, 61, 68, 87, 102, 111, 22, 24, 9, 12]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 912, 'completion_tokens': 30, 'total_tokens': 942}}
Altering:  [21, 61, 68, 87, 102, 111, 22, 24, 9, 12]
Input 'in1':
tf.Tensor([0 3 5 6], shape=(4,), dtype=int32)

Input 'in2':
8

Output:
tf.Tensor([1 0 0 1 0 1 1 0], shape=(8,), dtype=int32)

Constants: [0, 1, -1, True, False, 4]

Description: boolean tensor with 1 at the indices in the input tensor

Searching...

Found solution: tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)

Solution was found in 3.0 seconds:
tf.cast(tf.reduce_max(tf.one_hot(in1, in2), axis=0), tf.int32)
Found in  2.9587463559998923 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 68  --  tf.squeeze(tf.gather(in1, tf.expand_dims(in2, 1), axis=-1, batch_dims=1))
input and output examples = [Example(inputs=[[[[5, 3], [0, 2]], [[7, 4], [5, 1]], [[10, 20], [15, 30]], [[11, 16], [14, 12]], [[-2, -7], [-4, 6]]], [1, 0, 1, 1, 0]], output=[[3, 2], [7, 5], [20, 30], [16, 12], [-2, -4]])] natural language description = extract columns from a 3D tensor given column indices
{ "id": "chatcmpl-8Q2jrKqpUlxBEgZTsiojHzaQwp2lq", "object": "chat.completion", "created": 1701217747, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[24, 25, 83, 92, 105, 106, 113, 114, 120, 121]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 982, "completion_tokens": 30, "total_tokens": 1012 } }

{'id': 'chatcmpl-8Q2jrKqpUlxBEgZTsiojHzaQwp2lq', 'object': 'chat.completion', 'created': 1701217747, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[24, 25, 83, 92, 105, 106, 113, 114, 120, 121]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 982, 'completion_tokens': 30, 'total_tokens': 1012}}
Altering:  [24, 25, 83, 92, 105, 106, 113, 114, 120, 121]
Input 'in1':
tf.Tensor(
[[[ 5  3]
  [ 0  2]]

 [[ 7  4]
  [ 5  1]]

 [[10 20]
  [15 30]]

 [[11 16]
  [14 12]]

 [[-2 -7]
  [-4  6]]], shape=(5, 2, 2), dtype=int32)

Input 'in2':
tf.Tensor([1 0 1 1 0], shape=(5,), dtype=int32)

Output:
tf.Tensor(
[[ 3  2]
 [ 7  5]
 [20 30]
 [16 12]
 [-2 -4]], shape=(5, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 5]

Description: extract columns from a 3D tensor given column indices

Searching...

Could not find solution within 300 seconds.
Found in  300.0736162879998 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 69  --  tf.searchsorted(in1, in2, side='left')
input and output examples = [Example(inputs=[[-1.0, -0.8, -0.6, -0.4, -0.2, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0], [0.1, -10, -0.1, 1.1, 0.41]], output=[6, 0, 5, 11, 8])] natural language description = place continuous values into buckets given bucket boundaries
{ "id": "chatcmpl-8Q2ojyJxt0lSv7X6nuqOiVKvpaYZN", "object": "chat.completion", "created": 1701218049, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[88, 89, 26, 27, 9, 83, 92, 114, 120, 122]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 963, "completion_tokens": 30, "total_tokens": 993 } }

{'id': 'chatcmpl-8Q2ojyJxt0lSv7X6nuqOiVKvpaYZN', 'object': 'chat.completion', 'created': 1701218049, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[88, 89, 26, 27, 9, 83, 92, 114, 120, 122]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 963, 'completion_tokens': 30, 'total_tokens': 993}}
Altering:  [88, 89, 26, 27, 9, 83, 92, 114, 120, 122]
Input 'in1':
tf.Tensor([-1.  -0.8 -0.6 -0.4 -0.2  0.   0.2  0.4  0.6  0.8  1. ], shape=(11,), dtype=float32)

Input 'in2':
tf.Tensor([  0.1  -10.    -0.1    1.1    0.41], shape=(5,), dtype=float32)

Output:
tf.Tensor([ 6  0  5 11  8], shape=(5,), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 11]

Description: place continuous values into buckets given bucket boundaries

Searching...

Found solution: tf.searchsorted(in1, in2, side='left')

Solution was found in 2.3 seconds:
tf.searchsorted(in1, in2, side='left')
Found in  2.3318988199998785 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 70  --  tf.sqrt(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 1), tf.expand_dims(in2, 0))), axis=2))
input and output examples = [Example(inputs=[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[9.0, 4.0], [8.0, 5.0], [7.0, 6.0]]], output=[[8.246211251235321, 7.615773105863909, 7.211102550927978], [6.0, 5.0990195135927845, 4.47213595499958], [4.47213595499958, 3.1622776601683795, 2.0]])] natural language description = compute Euclidean distance between two tensors
{ "id": "chatcmpl-8Q2olcYKMNfURWW91q7sYanj3LVwK", "object": "chat.completion", "created": 1701218051, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 49, 79, 96, 101]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1006, "completion_tokens": 15, "total_tokens": 1021 } }

{'id': 'chatcmpl-8Q2olcYKMNfURWW91q7sYanj3LVwK', 'object': 'chat.completion', 'created': 1701218051, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 49, 79, 96, 101]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1006, 'completion_tokens': 15, 'total_tokens': 1021}}
Altering:  [1, 49, 79, 96, 101]
Input 'in1':
tf.Tensor(
[[1. 2.]
 [3. 4.]
 [5. 6.]], shape=(3, 2), dtype=float32)

Input 'in2':
tf.Tensor(
[[9. 4.]
 [8. 5.]
 [7. 6.]], shape=(3, 2), dtype=float32)

Output:
tf.Tensor(
[[8.246211  7.615773  7.2111025]
 [6.        5.0990195 4.472136 ]
 [4.472136  3.1622777 2.       ]], shape=(3, 3), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: compute Euclidean distance between two tensors

Searching...

Could not find solution within 300 seconds.
Found in  300.0688747449999 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 71  --  tf.reduce_sum(tf.square(tf.subtract(in2, tf.sparse.to_dense(in1))))
input and output examples = [Example(inputs=[<tensorflow.python.framework.sparse_tensor.SparseTensor object at 0x7fa9206293d0>, [[3.0, 1.0], [0.2, -1.0]]], output=5.29)] natural language description = squared error between two tensors, one being a sparse tensor
{ "id": "chatcmpl-8Q2tcMOFgFUSiiUilEaRZRsQGP9Hs", "object": "chat.completion", "created": 1701218352, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[9, 49, 79, 97, 101, 113, 114, 115, 122, 123]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 921, "completion_tokens": 30, "total_tokens": 951 } }

{'id': 'chatcmpl-8Q2tcMOFgFUSiiUilEaRZRsQGP9Hs', 'object': 'chat.completion', 'created': 1701218352, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[9, 49, 79, 97, 101, 113, 114, 115, 122, 123]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 921, 'completion_tokens': 30, 'total_tokens': 951}}
Altering:  [9, 49, 79, 97, 101, 113, 114, 115, 122, 123]
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]
 [1 1]], shape=(3, 2), dtype=int64), values=tf.Tensor([ 1.   1.5 -2. ], shape=(3,), dtype=float32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Input 'in2':
tf.Tensor(
[[ 3.   1. ]
 [ 0.2 -1. ]], shape=(2, 2), dtype=float32)

Output:
tf.Tensor(5.29, shape=(), dtype=float32)

Constants: [0, 1, -1, True, False, 2]

Description: squared error between two tensors, one being a sparse tensor

Searching...

Found solution: tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))

Solution was found in 6.7 seconds:
tf.reduce_sum(tf.math.squared_difference(in2, tf.sparse.to_dense(in1)))
Found in  6.70576946500023 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 72  --  tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)
input and output examples = [Example(inputs=[[[0.1, 0.6, 0.2, 0.1], [0.3, 0.1, 0.4, 0.2], [0.2, 0.1, 0.2, 0.5]]], output=[1.3, 1.5, 2.0])] natural language description = weighted sum across rows, where the column index is the weight
{ "id": "chatcmpl-8Q2tjoCayhJmLfRKt4SftAlOTByGr", "object": "chat.completion", "created": 1701218359, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 68, 79, 83, 103, 105, 114, 115, 123]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 950, "completion_tokens": 30, "total_tokens": 980 } }

{'id': 'chatcmpl-8Q2tjoCayhJmLfRKt4SftAlOTByGr', 'object': 'chat.completion', 'created': 1701218359, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 59, 68, 79, 83, 103, 105, 114, 115, 123]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 950, 'completion_tokens': 30, 'total_tokens': 980}}
Altering:  [1, 59, 68, 79, 83, 103, 105, 114, 115, 123]
Input 'in1':
tf.Tensor(
[[0.1 0.6 0.2 0.1]
 [0.3 0.1 0.4 0.2]
 [0.2 0.1 0.2 0.5]], shape=(3, 4), dtype=float32)

Output:
tf.Tensor([1.3 1.5 2. ], shape=(3,), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4]

Description: weighted sum across rows, where the column index is the weight

Searching...

Found solution: tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)

Solution was found in 14.5 seconds:
tf.tensordot(in1, tf.cast(tf.range(4), tf.float32), 1)
Found in  14.521791597000174 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.304388078, 300.3578979440001]
Benchmark # 73  --  tf.reduce_min(tf.reduce_sum(tf.square(tf.subtract(tf.expand_dims(in1, 0), tf.expand_dims(in2, 1))), axis=2), axis=1)
input and output examples = [Example(inputs=[[[0.3, 0.1, 0.4], [0.1, 0.5, 0.9], [0.2, 0.6, 0.5], [0.3, 0.5, 0.8], [0.9, 0.7, 0.9]], [[0.3, 0.2, 0.3], [0.8, 0.4, 0.6], [0.2, 0.6, 0.4], [0.3, 0.3, 0.8]]], output=[0.02, 0.19, 0.01, 0.04])] natural language description = find the minimum distance between two sets of points
{ "id": "chatcmpl-8Q2tx8hWa06di7TYAORrSO2wErwIK", "object": "chat.completion", "created": 1701218373, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[0, 1, 14, 49, 76, 79, 92, 101, 114, 115]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1027, "completion_tokens": 30, "total_tokens": 1057 } }

{'id': 'chatcmpl-8Q2tx8hWa06di7TYAORrSO2wErwIK', 'object': 'chat.completion', 'created': 1701218373, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[0, 1, 14, 49, 76, 79, 92, 101, 114, 115]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1027, 'completion_tokens': 30, 'total_tokens': 1057}}
Altering:  [0, 1, 14, 49, 76, 79, 92, 101, 114, 115]
Input 'in1':
tf.Tensor(
[[0.3 0.1 0.4]
 [0.1 0.5 0.9]
 [0.2 0.6 0.5]
 [0.3 0.5 0.8]
 [0.9 0.7 0.9]], shape=(5, 3), dtype=float32)

Input 'in2':
tf.Tensor(
[[0.3 0.2 0.3]
 [0.8 0.4 0.6]
 [0.2 0.6 0.4]
 [0.3 0.3 0.8]], shape=(4, 3), dtype=float32)

Output:
tf.Tensor([0.02 0.19 0.01 0.04], shape=(4,), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4, 5]

Description: find the minimum distance between two sets of points

Searching...

Could not find solution within 300 seconds.
Found in  300.27412295600016 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001]
Benchmark # 74  --  tf.tensordot(in2, in1, 1)
input and output examples = [Example(inputs=[[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[10, 20], [30, 40]]], [3, 5, 10]], output=[[128, 236], [344, 452]])] natural language description = compute a weighted sum of tensors
{ "id": "chatcmpl-8Q2ypJF9VXUF9c7epDer6gYYUeBL6", "object": "chat.completion", "created": 1701218675, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 56, 59, 79, 83, 103, 105, 114, 117, 120]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 928, "completion_tokens": 30, "total_tokens": 958 } }

{'id': 'chatcmpl-8Q2ypJF9VXUF9c7epDer6gYYUeBL6', 'object': 'chat.completion', 'created': 1701218675, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 56, 59, 79, 83, 103, 105, 114, 117, 120]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 928, 'completion_tokens': 30, 'total_tokens': 958}}
Altering:  [1, 56, 59, 79, 83, 103, 105, 114, 117, 120]
Input 'in1':
tf.Tensor(
[[[ 1  2]
  [ 3  4]]

 [[ 5  6]
  [ 7  8]]

 [[10 20]
  [30 40]]], shape=(3, 2, 2), dtype=int32)

Input 'in2':
tf.Tensor([ 3  5 10], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[128 236]
 [344 452]], shape=(2, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: compute a weighted sum of tensors

Searching...

Found solution: tf.tensordot(in2, in1, 1)

Solution was found in 1.8 seconds:
tf.tensordot(in2, in1, 1)
Found in  1.8276215310002044 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001]
Benchmark # 75  --  tf.add(in2, tf.multiply(tf.expand_dims(in3, 1), tf.subtract(in1, in2)))
input and output examples = [Example(inputs=[[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]], [[10.0, 20.0], [30.0, 40.0], [50.0, 60.0]]], [[[9.0, 8.0], [7.0, 6.0], [5.0, 4.0]], [[90.0, 80.0], [70.0, 60.0], [50.0, 40.0]]], [0.1, 0.4, 0.8]], output=[[[8.2, 7.4], [5.4, 5.2], [5.0, 5.6]], [[82.0, 74.0], [54.0, 52.0], [50.0, 56.0]]])] natural language description = linear interpolation between two tensors
{ "id": "chatcmpl-8Q2yrQmCUrfZhrzBkXl7iXSw6XUji", "object": "chat.completion", "created": 1701218677, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 14, 83, 101, 92, 9, 104, 105, 11]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1067, "completion_tokens": 30, "total_tokens": 1097 } }

{'id': 'chatcmpl-8Q2yrQmCUrfZhrzBkXl7iXSw6XUji', 'object': 'chat.completion', 'created': 1701218677, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 59, 14, 83, 101, 92, 9, 104, 105, 11]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1067, 'completion_tokens': 30, 'total_tokens': 1097}}
Altering:  [1, 59, 14, 83, 101, 92, 9, 104, 105, 11]
Input 'in1':
tf.Tensor(
[[[ 1.  2.]
  [ 3.  4.]
  [ 5.  6.]]

 [[10. 20.]
  [30. 40.]
  [50. 60.]]], shape=(2, 3, 2), dtype=float32)

Input 'in2':
tf.Tensor(
[[[ 9.  8.]
  [ 7.  6.]
  [ 5.  4.]]

 [[90. 80.]
  [70. 60.]
  [50. 40.]]], shape=(2, 3, 2), dtype=float32)

Input 'in3':
tf.Tensor([0.1 0.4 0.8], shape=(3,), dtype=float32)

Output:
tf.Tensor(
[[[ 8.2  7.4]
  [ 5.4  5.2]
  [ 5.   5.6]]

 [[82.  74. ]
  [54.  52. ]
  [50.  56. ]]], shape=(2, 3, 2), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: linear interpolation between two tensors

Searching...

Found solution: tf.add(in2, tf.multiply(tf.subtract(in1, in2), tf.expand_dims(in3, 1)))

Solution was found in 91.0 seconds:
tf.add(in2, tf.multiply(tf.subtract(in1, in2), tf.expand_dims(in3, 1)))
Found in  91.05079911099983 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 91.05079911099983, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001]
Benchmark # 76  --  tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)
input and output examples = [Example(inputs=[[1, 0, 1, 1, 0, 1, 0, 1]], output=[1.0, 0.0, 0.333333, 0.25, 0.0, 0.166667, 0.0, 0.125])] natural language description = divide each element by the column index
{ "id": "chatcmpl-8Q30K4zv8PMDwrGMdOG4f2PLs6lVc", "object": "chat.completion", "created": 1701218768, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[68, 14, 9, 83, 92, 12, 104, 59, 14, 34]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 934, "completion_tokens": 30, "total_tokens": 964 } }

{'id': 'chatcmpl-8Q30K4zv8PMDwrGMdOG4f2PLs6lVc', 'object': 'chat.completion', 'created': 1701218768, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[68, 14, 9, 83, 92, 12, 104, 59, 14, 34]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 934, 'completion_tokens': 30, 'total_tokens': 964}}
Altering:  [68, 14, 9, 83, 92, 12, 104, 59, 14, 34]
Input 'in1':
tf.Tensor([1 0 1 1 0 1 0 1], shape=(8,), dtype=int32)

Output:
tf.Tensor([1.       0.       0.333333 0.25     0.       0.166667 0.       0.125   ], shape=(8,), dtype=float32)

Constants: [0, 1, -1, True, False, 8]

Description: divide each element by the column index

Searching...

Found solution: tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)

Solution was found in 7.7 seconds:
tf.cast(tf.divide(in1, tf.add(in1, tf.range(8))), tf.float32)
Found in  7.69713328600028 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 91.05079911099983, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001]
Benchmark # 77  --  tf.tensordot(in1, in2, 1)
input and output examples = [Example(inputs=[[[[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]], [[1.2, 3.4, 5.6], [7.8, 9.8, 7.6]]]], [0.5, 1.0, 2.0]], output=[[[8.5, 19.0], [15.2, 28.9]]])] natural language description = dot product a vector with last dimension of a tensor
{ "id": "chatcmpl-8Q30SgeMKFeP6qMTLJFZ2tu108K1F", "object": "chat.completion", "created": 1701218776, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[56, 103, 83, 79, 59, 1, 9, 92, 104, 105]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 971, "completion_tokens": 30, "total_tokens": 1001 } }

{'id': 'chatcmpl-8Q30SgeMKFeP6qMTLJFZ2tu108K1F', 'object': 'chat.completion', 'created': 1701218776, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[56, 103, 83, 79, 59, 1, 9, 92, 104, 105]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 971, 'completion_tokens': 30, 'total_tokens': 1001}}
Altering:  [56, 103, 83, 79, 59, 1, 9, 92, 104, 105]
Input 'in1':
tf.Tensor(
[[[[1.  2.  3. ]
   [4.  5.  6. ]]

  [[1.2 3.4 5.6]
   [7.8 9.8 7.6]]]], shape=(1, 2, 2, 3), dtype=float32)

Input 'in2':
tf.Tensor([0.5 1.  2. ], shape=(3,), dtype=float32)

Output:
tf.Tensor(
[[[ 8.5 19. ]
  [15.2 28.9]]], shape=(1, 2, 2), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: dot product a vector with last dimension of a tensor

Searching...

Found solution: tf.tensordot(in1, in2, 1)

Solution was found in 1.8 seconds:
tf.tensordot(in1, in2, 1)
Found in  1.7633053879999352 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 91.05079911099983, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001]
Benchmark # 78  --  tf.reduce_prod(tf.maximum(tf.reduce_max(in2), tf.multiply(in1, in2)), axis=1)
input and output examples = [Example(inputs=[[9, 2, 5, 3, 7, 4], [[0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 0, 0], [0, 1, 1, 1, 0, 1]]], output=[35, 9, 120])] natural language description = compute the product of marked elements
{ "id": "chatcmpl-8Q30UcbjRXhvpftSAIQVK9HYAOVvg", "object": "chat.completion", "created": 1701218778, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[7, 9, 59, 78, 83, 92, 109, 110, 114, 123]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 949, "completion_tokens": 30, "total_tokens": 979 } }

{'id': 'chatcmpl-8Q30UcbjRXhvpftSAIQVK9HYAOVvg', 'object': 'chat.completion', 'created': 1701218778, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[7, 9, 59, 78, 83, 92, 109, 110, 114, 123]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 949, 'completion_tokens': 30, 'total_tokens': 979}}
Altering:  [7, 9, 59, 78, 83, 92, 109, 110, 114, 123]
Input 'in1':
tf.Tensor([9 2 5 3 7 4], shape=(6,), dtype=int32)

Input 'in2':
tf.Tensor(
[[0 0 1 0 1 0]
 [1 0 0 0 0 0]
 [0 1 1 1 0 1]], shape=(3, 6), dtype=int32)

Output:
tf.Tensor([ 35   9 120], shape=(3,), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 6]

Description: compute the product of marked elements

Searching...

Found solution: tf.reduce_prod(tf.maximum(tf.cast(1, tf.int32), tf.multiply(in1, in2)), axis=1)

Solution was found in 93.7 seconds:
tf.reduce_prod(tf.maximum(tf.cast(1, tf.int32), tf.multiply(in1, in2)), axis=1)
Found in  93.72975167699997 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001]
Benchmark # 79  --  tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))
input and output examples = [Example(inputs=[[[-1.5, 1.0, 0.9, 2.0], [1.1, 0.0, -0.1, -0.9], [-1.0, 0.1, -1.1, 2.5]]], output=[[2.25, 1.0, 0.0, 4.0], [1.21, 0.0, 0.0, 0.0], [1.0, 0.0, 1.21, 6.25]])] natural language description = set to 0 the elements with absolute value less than 1, and square the other elements
{ "id": "chatcmpl-8Q320QQEBGBAiQ3fLXTI9HkgRPxv1", "object": "chat.completion", "created": 1701218872, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[0, 26, 97, 7, 9, 15, 60, 109, 102, 12]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1003, "completion_tokens": 30, "total_tokens": 1033 } }

{'id': 'chatcmpl-8Q320QQEBGBAiQ3fLXTI9HkgRPxv1', 'object': 'chat.completion', 'created': 1701218872, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[0, 26, 97, 7, 9, 15, 60, 109, 102, 12]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1003, 'completion_tokens': 30, 'total_tokens': 1033}}
Altering:  [0, 26, 97, 7, 9, 15, 60, 109, 102, 12]
Input 'in1':
tf.Tensor(
[[-1.5  1.   0.9  2. ]
 [ 1.1  0.  -0.1 -0.9]
 [-1.   0.1 -1.1  2.5]], shape=(3, 4), dtype=float32)

Output:
tf.Tensor(
[[2.25 1.   0.   4.  ]
 [1.21 0.   0.   0.  ]
 [1.   0.   1.21 6.25]], shape=(3, 4), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4]

Description: set to 0 the elements with absolute value less than 1, and square the other elements

Searching...

Found solution: tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))

Solution was found in 31.9 seconds:
tf.multiply(tf.square(in1), tf.cast(tf.cast(tf.cast(in1, tf.int32), tf.bool), tf.float32))
Found in  31.937797934999708 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001]
Benchmark # 80  --  tf.sparse.to_dense(tf.SparseTensor(tf.cast(in2, tf.int64), in1, (3, 5)))
input and output examples = [Example(inputs=[[4, 5, 2, 7, 8, 6], [[0, 2], [0, 4], [1, 1], [1, 3], [2, 0], [2, 3]]], output=[[0, 0, 4, 0, 5], [0, 2, 0, 7, 0], [8, 0, 0, 6, 0]])] natural language description = use the output of tf.nn.top_k to make a sparse tensor
{ "id": "chatcmpl-8Q32WQ0j2oEFOqFhPux00eNRQp6XM", "object": "chat.completion", "created": 1701218904, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[50, 87, 24, 83, 9, 22, 11, 2, 1, 102]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 975, "completion_tokens": 30, "total_tokens": 1005 } }

{'id': 'chatcmpl-8Q32WQ0j2oEFOqFhPux00eNRQp6XM', 'object': 'chat.completion', 'created': 1701218904, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[50, 87, 24, 83, 9, 22, 11, 2, 1, 102]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 975, 'completion_tokens': 30, 'total_tokens': 1005}}
Altering:  [50, 87, 24, 83, 9, 22, 11, 2, 1, 102]
Input 'in1':
tf.Tensor([4 5 2 7 8 6], shape=(6,), dtype=int32)

Input 'in2':
tf.Tensor(
[[0 2]
 [0 4]
 [1 1]
 [1 3]
 [2 0]
 [2 3]], shape=(6, 2), dtype=int32)

Output:
tf.Tensor(
[[0 0 4 0 5]
 [0 2 0 7 0]
 [8 0 0 6 0]], shape=(3, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 5, 6]

Description: use the output of tf.nn.top_k to make a sparse tensor

Searching...

Found solution: tf.scatter_nd(in2, in1, (3, 5))

Solution was found in 4.5 seconds:
tf.scatter_nd(in2, in1, (3, 5))
Found in  4.482963751999705 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001]
Benchmark # 81  --  tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))
input and output examples = [Example(inputs=[[5, 2, 8, 2, 4, 1, 1, 0, 2, 1], 3], output=[5, 2, 8, 4, 1, 1, 0, 2, 1])] natural language description = copy all elements except at the given index
{ "id": "chatcmpl-8Q32armNGFMYAQnm9YMLc4o0LHbU5", "object": "chat.completion", "created": 1701218908, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 102, 68, 92, 83, 11, 9, 60, 108, 100]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 929, "completion_tokens": 30, "total_tokens": 959 } }

{'id': 'chatcmpl-8Q32armNGFMYAQnm9YMLc4o0LHbU5', 'object': 'chat.completion', 'created': 1701218908, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 102, 68, 92, 83, 11, 9, 60, 108, 100]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 929, 'completion_tokens': 30, 'total_tokens': 959}}
Altering:  [22, 102, 68, 92, 83, 11, 9, 60, 108, 100]
Input 'in1':
tf.Tensor([5 2 8 2 4 1 1 0 2 1], shape=(10,), dtype=int32)

Input 'in2':
3

Output:
tf.Tensor([5 2 8 4 1 1 0 2 1], shape=(9,), dtype=int32)

Constants: [0, 1, -1, True, False, 9, 10]

Description: copy all elements except at the given index

Searching...

Found solution: tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))

Solution was found in 30.2 seconds:
tf.boolean_mask(in1, tf.not_equal(tf.constant(in2), tf.range(10)))
Found in  30.182673525000155 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001]
Benchmark # 82  --  tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)
input and output examples = [Example(inputs=[[4, 6, 2, 6, 7, 3, -3]], output=[0, 0, 0, 0, 1, 0, 0])] natural language description = create a binary vector where the max element is 1
{ "id": "chatcmpl-8Q334UHRF77R0aNM4EV2l3l4n8XH8", "object": "chat.completion", "created": 1701218938, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[3, 15, 61, 9, 12]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 914, "completion_tokens": 15, "total_tokens": 929 } }

{'id': 'chatcmpl-8Q334UHRF77R0aNM4EV2l3l4n8XH8', 'object': 'chat.completion', 'created': 1701218938, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[3, 15, 61, 9, 12]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 914, 'completion_tokens': 15, 'total_tokens': 929}}
Altering:  [3, 15, 61, 9, 12]
Input 'in1':
tf.Tensor([ 4  6  2  6  7  3 -3], shape=(7,), dtype=int32)

Output:
tf.Tensor([0 0 0 0 1 0 0], shape=(7,), dtype=int32)

Constants: [0, 1, -1, True, False, 7]

Description: create a binary vector where the max element is 1

Searching...

Found solution: tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)

Solution was found in 1.4 seconds:
tf.cast(tf.equal(in1, tf.reduce_max(in1)), tf.int32)
Found in  1.391018878000068 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001]
Benchmark # 83  --  tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)
input and output examples = [Example(inputs=[[[12, 34, 56, 78, 90, 10], [99, 88, 77, 55, 44, 33], [-1, -2, -3, -4, -5, -6]], [0, 1, 1, 0, 2, 0]], output=[12, 88, 77, 78, -5, 10])] natural language description = extract elements of a tensor given row indices
{ "id": "chatcmpl-8Q336QhCtjT0uBC0X7clQ2li7PmZ5", "object": "chat.completion", "created": 1701218940, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 24, 83, 92, 108, 113, 114, 120, 121, 122]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 960, "completion_tokens": 30, "total_tokens": 990 } }

{'id': 'chatcmpl-8Q336QhCtjT0uBC0X7clQ2li7PmZ5', 'object': 'chat.completion', 'created': 1701218940, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 24, 83, 92, 108, 113, 114, 120, 121, 122]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 960, 'completion_tokens': 30, 'total_tokens': 990}}
Altering:  [22, 24, 83, 92, 108, 113, 114, 120, 121, 122]
Input 'in1':
tf.Tensor(
[[12 34 56 78 90 10]
 [99 88 77 55 44 33]
 [-1 -2 -3 -4 -5 -6]], shape=(3, 6), dtype=int32)

Input 'in2':
tf.Tensor([0 1 1 0 2 0], shape=(6,), dtype=int32)

Output:
tf.Tensor([12 88 77 78 -5 10], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 6]

Description: extract elements of a tensor given row indices

Searching...

Found solution: tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)

Solution was found in 72.2 seconds:
tf.gather_nd(tf.transpose(in1), tf.expand_dims(in2, 1), batch_dims=1)
Found in  72.23449217999996 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001]
Benchmark # 84  --  tf.squeeze(tf.reduce_sum(tf.reshape(in1, (-1, 2, in1.shape[1])), axis=1))
input and output examples = [Example(inputs=[[[3, 5, 2], [6, 2, 3], [8, 7, 1], [0, -3, 5], [-4, 7, 3], [2, 1, 6], [10, 20, 30], [4, 5, 6]]], output=[[9, 7, 5], [8, 4, 6], [-2, 8, 9], [14, 25, 36]])] natural language description = sum across columns for pairs of consecutive rows
{ "id": "chatcmpl-8Q34GlRjgvuY5K9sj8nnquzYmzWoU", "object": "chat.completion", "created": 1701219012, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 79, 100, 108, 117, 118, 119, 120, 121, 122]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 980, "completion_tokens": 30, "total_tokens": 1010 } }

{'id': 'chatcmpl-8Q34GlRjgvuY5K9sj8nnquzYmzWoU', 'object': 'chat.completion', 'created': 1701219012, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 79, 100, 108, 117, 118, 119, 120, 121, 122]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 980, 'completion_tokens': 30, 'total_tokens': 1010}}
Altering:  [1, 79, 100, 108, 117, 118, 119, 120, 121, 122]
Input 'in1':
tf.Tensor(
[[ 3  5  2]
 [ 6  2  3]
 [ 8  7  1]
 [ 0 -3  5]
 [-4  7  3]
 [ 2  1  6]
 [10 20 30]
 [ 4  5  6]], shape=(8, 3), dtype=int32)

Output:
tf.Tensor(
[[ 9  7  5]
 [ 8  4  6]
 [-2  8  9]
 [14 25 36]], shape=(4, 3), dtype=int32)

Constants: [2, 0, 1, -1, True, False, 3, 4, 8]

Description: sum across columns for pairs of consecutive rows

Searching...

Could not find solution within 300 seconds.
Found in  300.0727079489998 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001]
Benchmark # 85  --  tf.where(tf.sequence_mask(in2), x=tf.roll(in1, 1, -1), y=in1)
input and output examples = [Example(inputs=[[[[12, 34], [56, 78], [23, 54], [76, 78], [42, 24]]], [1, 0, 1, 0, 1]], output=[[[34, 12], [56, 78], [54, 23], [76, 78], [24, 42]]])] natural language description = reverse the order in the marked rows
{ "id": "chatcmpl-8Q397LGs01wWLi37VdF61QgxUZfzs", "object": "chat.completion", "created": 1701219313, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[7, 22, 24, 84, 105, 113, 114, 120, 121, 122]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 948, "completion_tokens": 30, "total_tokens": 978 } }

{'id': 'chatcmpl-8Q397LGs01wWLi37VdF61QgxUZfzs', 'object': 'chat.completion', 'created': 1701219313, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[7, 22, 24, 84, 105, 113, 114, 120, 121, 122]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 948, 'completion_tokens': 30, 'total_tokens': 978}}
Altering:  [7, 22, 24, 84, 105, 113, 114, 120, 121, 122]
Input 'in1':
tf.Tensor(
[[[12 34]
  [56 78]
  [23 54]
  [76 78]
  [42 24]]], shape=(1, 5, 2), dtype=int32)

Input 'in2':
tf.Tensor([1 0 1 0 1], shape=(5,), dtype=int32)

Output:
tf.Tensor(
[[[34 12]
  [56 78]
  [54 23]
  [76 78]
  [24 42]]], shape=(1, 5, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 5]

Description: reverse the order in the marked rows

Searching...

Could not find solution within 300 seconds.
Found in  300.49517696400017 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 9.142389382000001, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 86  --  tf.cast(tf.where(tf.sequence_mask(in1))[:, 0], tf.int32)
input and output examples = [Example(inputs=[[3, 4, 1]], output=[0, 0, 0, 1, 1, 1, 1, 2])] natural language description = convert segment lengths to segment ids
{ "id": "chatcmpl-8Q3DzkWyCKM4G1hM1FVjVS1g429AU", "object": "chat.completion", "created": 1701219615, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[32, 11, 9, 1, 101, 68, 83, 92, 98, 100]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 900, "completion_tokens": 30, "total_tokens": 930 } }

{'id': 'chatcmpl-8Q3DzkWyCKM4G1hM1FVjVS1g429AU', 'object': 'chat.completion', 'created': 1701219615, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[32, 11, 9, 1, 101, 68, 83, 92, 98, 100]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 900, 'completion_tokens': 30, 'total_tokens': 930}}
Altering:  [32, 11, 9, 1, 101, 68, 83, 92, 98, 100]
Input 'in1':
tf.Tensor([3 4 1], shape=(3,), dtype=int32)

Output:
tf.Tensor([0 0 0 1 1 1 1 2], shape=(8,), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 8]

Description: convert segment lengths to segment ids

Searching...

Found solution: tf.cast(tf.repeat(tf.where(in1), in1), tf.int32)

Solution was found in 11.9 seconds:
tf.cast(tf.repeat(tf.where(in1), in1), tf.int32)
Found in  11.938975239999763 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 9.142389382000001, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 87  --  tf.reshape(tf.gather(in1, tf.cumsum(tf.reshape(tf.cast(in2, tf.int32), [-1]), exclusive=True) * tf.reshape(tf.cast(in2, tf.int32), [-1])), in2.shape)
input and output examples = [Example(inputs=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [[True, True, True, False, False], [True, True, False, False, False], [True, True, True, True, True], [True, True, True, True, False], [True, False, False, False, False], [True, True, False, False, False]]], output=[[0, 1, 2, 0, 0], [3, 4, 0, 0, 0], [5, 6, 7, 8, 9], [10, 11, 12, 13, 0], [14, 0, 0, 0, 0], [15, 16, 0, 0, 0]])] natural language description = put given values into a sequence mask
{ "id": "chatcmpl-8Q3EArbjBMvNhupRMHqNc4mhzQJeb", "object": "chat.completion", "created": 1701219626, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[7, 9, 22, 24, 90, 92, 102, 105, 108, 113]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1077, "completion_tokens": 30, "total_tokens": 1107 } }

{'id': 'chatcmpl-8Q3EArbjBMvNhupRMHqNc4mhzQJeb', 'object': 'chat.completion', 'created': 1701219626, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[7, 9, 22, 24, 90, 92, 102, 105, 108, 113]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1077, 'completion_tokens': 30, 'total_tokens': 1107}}
Altering:  [7, 9, 22, 24, 90, 92, 102, 105, 108, 113]
Input 'in1':
tf.Tensor([ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16], shape=(17,), dtype=int32)

Input 'in2':
tf.Tensor(
[[ True  True  True False False]
 [ True  True False False False]
 [ True  True  True  True  True]
 [ True  True  True  True False]
 [ True False False False False]
 [ True  True False False False]], shape=(6, 5), dtype=bool)

Output:
tf.Tensor(
[[ 0  1  2  0  0]
 [ 3  4  0  0  0]
 [ 5  6  7  8  9]
 [10 11 12 13  0]
 [14  0  0  0  0]
 [15 16  0  0  0]], shape=(6, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 6, 17]

Description: put given values into a sequence mask

Searching...

Found solution: tf.tensor_scatter_nd_update(tf.cast(in2, tf.int32), tf.where(in2), in1)

Solution was found in 8.9 seconds:
tf.tensor_scatter_nd_update(tf.cast(in2, tf.int32), tf.where(in2), in1)
Found in  8.88356085300029 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.88356085300029, 9.142389382000001, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 88  --  tf.cast(tf.argmax(tf.cast(tf.equal(in1, tf.expand_dims(in2, 1)), tf.int32), axis=1), tf.int32)
input and output examples = [Example(inputs=[[32, 53, 45, 38, 29, 89, 64, 23], [38, 53, 89, 38, 32, 64]], output=[3, 1, 5, 3, 0, 6])] natural language description = find the indices of all elements
{ "id": "chatcmpl-8Q3EJZBPPiTjcYqKfWA64uYad3RoU", "object": "chat.completion", "created": 1701219635, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[15, 22, 68, 83, 94, 102, 107, 109, 113, 114]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 927, "completion_tokens": 30, "total_tokens": 957 } }

{'id': 'chatcmpl-8Q3EJZBPPiTjcYqKfWA64uYad3RoU', 'object': 'chat.completion', 'created': 1701219635, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[15, 22, 68, 83, 94, 102, 107, 109, 113, 114]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 927, 'completion_tokens': 30, 'total_tokens': 957}}
Altering:  [15, 22, 68, 83, 94, 102, 107, 109, 113, 114]
Input 'in1':
tf.Tensor([32 53 45 38 29 89 64 23], shape=(8,), dtype=int32)

Input 'in2':
tf.Tensor([38 53 89 38 32 64], shape=(6,), dtype=int32)

Output:
tf.Tensor([3 1 5 3 0 6], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6, 8]

Description: find the indices of all elements

Searching...

Found solution: tf.cast(tf.where(tf.equal(in1, tf.expand_dims(in2, 1)))[:, 1], tf.int32)

Solution was found in 9.6 seconds:
tf.cast(tf.where(tf.equal(in1, tf.expand_dims(in2, 1)))[:, 1], tf.int32)
Found in  9.619848865000222 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 89  --  tf.transpose(tf.multiply(in2, tf.transpose(in1)))
input and output examples = [Example(inputs=[[[[[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]], [[[0.8, 1.0, 0.0], [0.6, 0.4, 0.2]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]], [2.0, 0.5, 1.0]], output=[[[[0.2, 0.4, 0.6], [0.8, 1.0, 1.2]]], [[[0.4, 0.5, 0.0], [0.3, 0.2, 0.1]]], [[[0.9, 0.8, 0.7], [0.1, 0.2, 0.3]]]])] natural language description = multiply tensors by scalars in a batched way
{ "id": "chatcmpl-8Q3ETGGaSexua5GLXNMF84PUSAtlh", "object": "chat.completion", "created": 1701219645, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[59, 8, 83, 9, 92, 21, 12, 104, 24, 22]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1077, "completion_tokens": 30, "total_tokens": 1107 } }

{'id': 'chatcmpl-8Q3ETGGaSexua5GLXNMF84PUSAtlh', 'object': 'chat.completion', 'created': 1701219645, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[59, 8, 83, 9, 92, 21, 12, 104, 24, 22]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1077, 'completion_tokens': 30, 'total_tokens': 1107}}
Altering:  [59, 8, 83, 9, 92, 21, 12, 104, 24, 22]
Input 'in1':
tf.Tensor(
[[[[0.1 0.2 0.3]
   [0.4 0.5 0.6]]]


 [[[0.8 1.  0. ]
   [0.6 0.4 0.2]]]


 [[[0.9 0.8 0.7]
   [0.1 0.2 0.3]]]], shape=(3, 1, 2, 3), dtype=float32)

Input 'in2':
tf.Tensor([2.  0.5 1. ], shape=(3,), dtype=float32)

Output:
tf.Tensor(
[[[[0.2 0.4 0.6]
   [0.8 1.  1.2]]]


 [[[0.4 0.5 0. ]
   [0.3 0.2 0.1]]]


 [[[0.9 0.8 0.7]
   [0.1 0.2 0.3]]]], shape=(3, 1, 2, 3), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Description: multiply tensors by scalars in a batched way

Searching...

Found solution: tf.transpose(tf.multiply(in2, tf.transpose(in1)))

Solution was found in 4.8 seconds:
tf.transpose(tf.multiply(in2, tf.transpose(in1)))
Found in  4.806409146000078 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 90  --  tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)
input and output examples = [Example(inputs=[5, 6, 3], output=[[0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0], [0, 0, 0, 1, 0, 0]])] natural language description = create a binary matrix where a specified column is set to one
{ "id": "chatcmpl-8Q3EYkrkBOFF3vWhWhTtu84c3Agdd", "object": "chat.completion", "created": 1701219650, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[61, 18, 83, 9, 21, 92, 104, 68, 12, 100]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 973, "completion_tokens": 30, "total_tokens": 1003 } }

{'id': 'chatcmpl-8Q3EYkrkBOFF3vWhWhTtu84c3Agdd', 'object': 'chat.completion', 'created': 1701219650, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[61, 18, 83, 9, 21, 92, 104, 68, 12, 100]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 973, 'completion_tokens': 30, 'total_tokens': 1003}}
Altering:  [61, 18, 83, 9, 21, 92, 104, 68, 12, 100]
Input 'in1':
5

Input 'in2':
6

Input 'in3':
3

Output:
tf.Tensor(
[[0 0 0 1 0 0]
 [0 0 0 1 0 0]
 [0 0 0 1 0 0]
 [0 0 0 1 0 0]
 [0 0 0 1 0 0]], shape=(5, 6), dtype=int32)

Constants: [0, 1, -1, True, False]

Description: create a binary matrix where a specified column is set to one

Searching...

Found solution: tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)

Solution was found in 6.5 seconds:
tf.cast(tf.one_hot(tf.fill((in1,), in3), in2), tf.int32)
Found in  6.473534769000253 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 91  --  tf.gather(in1, in2, axis=1)
input and output examples = [Example(inputs=[[[5, 6, 7, 8, 9], [10, 11, 12, 13, 14]], [0, 2, 4]], output=[[5, 7, 9], [10, 12, 14]])] natural language description = 
{ "id": "chatcmpl-8Q3EeCVZtnxLcoqWIpL0UMTRvDeKL", "object": "chat.completion", "created": 1701219656, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 24, 83, 92, 100, 108, 113, 114, 120, 122]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 920, "completion_tokens": 30, "total_tokens": 950 } }

{'id': 'chatcmpl-8Q3EeCVZtnxLcoqWIpL0UMTRvDeKL', 'object': 'chat.completion', 'created': 1701219656, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 24, 83, 92, 100, 108, 113, 114, 120, 122]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 920, 'completion_tokens': 30, 'total_tokens': 950}}
Altering:  [22, 24, 83, 92, 100, 108, 113, 114, 120, 122]
Input 'in1':
tf.Tensor(
[[ 5  6  7  8  9]
 [10 11 12 13 14]], shape=(2, 5), dtype=int32)

Input 'in2':
tf.Tensor([0 2 4], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[ 5  7  9]
 [10 12 14]], shape=(2, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 5]

Searching...

Found solution: tf.add(in2, in1[:, :1])

Solution was found in 2.9 seconds:
tf.add(in2, in1[:, :1])
Found in  2.898417155000061 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 92  --  in1[:, :, 0]
input and output examples = [Example(inputs=[[[[1, 2], [1, 2], [2, 3]], [[1.1, 4], [2, 1], [3, 6]], [[7.1, 10], [8, 11], [9, 7]]]], output=[[1, 1, 2], [1.1, 2, 3], [7.1, 8, 9]])] natural language description = 
{ "id": "chatcmpl-8Q3Eh9JuCgYub7sqSg9rJwyg4MO6p", "object": "chat.completion", "created": 1701219659, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[3, 24, 83, 98, 105, 114, 117, 118, 119, 120]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 954, "completion_tokens": 30, "total_tokens": 984 } }

{'id': 'chatcmpl-8Q3Eh9JuCgYub7sqSg9rJwyg4MO6p', 'object': 'chat.completion', 'created': 1701219659, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[3, 24, 83, 98, 105, 114, 117, 118, 119, 120]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 954, 'completion_tokens': 30, 'total_tokens': 984}}
Altering:  [3, 24, 83, 98, 105, 114, 117, 118, 119, 120]
Input 'in1':
tf.Tensor(
[[[ 1.   2. ]
  [ 1.   2. ]
  [ 2.   3. ]]

 [[ 1.1  4. ]
  [ 2.   1. ]
  [ 3.   6. ]]

 [[ 7.1 10. ]
  [ 8.  11. ]
  [ 9.   7. ]]], shape=(3, 3, 2), dtype=float32)

Output:
tf.Tensor(
[[1.  1.  2. ]
 [1.1 2.  3. ]
 [7.1 8.  9. ]], shape=(3, 3), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Searching...

Found solution: tf.transpose(tf.transpose(in1)[0])

Solution was found in 2.9 seconds:
tf.transpose(tf.transpose(in1)[0])
Found in  2.9406693050000285 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 93  --  tf.transpose(tf.reshape(in1, (5, 3)))
input and output examples = [Example(inputs=[[1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014]], output=[[1000, 1003, 1006, 1009, 1012], [1001, 1004, 1007, 1010, 1013], [1002, 1005, 1008, 1011, 1014]])] natural language description = 
{ "id": "chatcmpl-8Q3Ek3lacCqGqMVMwy4t6KsKJYqex", "object": "chat.completion", "created": 1701219662, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[68, 101, 22, 83, 100, 11, 108, 1, 114, 117]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 982, "completion_tokens": 30, "total_tokens": 1012 } }

{'id': 'chatcmpl-8Q3Ek3lacCqGqMVMwy4t6KsKJYqex', 'object': 'chat.completion', 'created': 1701219662, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[68, 101, 22, 83, 100, 11, 108, 1, 114, 117]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 982, 'completion_tokens': 30, 'total_tokens': 1012}}
Altering:  [68, 101, 22, 83, 100, 11, 108, 1, 114, 117]
Input 'in1':
tf.Tensor(
[1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013
 1014], shape=(15,), dtype=int32)

Output:
tf.Tensor(
[[1000 1003 1006 1009 1012]
 [1001 1004 1007 1010 1013]
 [1002 1005 1008 1011 1014]], shape=(3, 5), dtype=int32)

Constants: [3, 5, 0, 1, -1, True, False, 15]

Searching...

Found solution: tf.transpose(tf.reshape(in1, (5, 3)))

Solution was found in 6.4 seconds:
tf.transpose(tf.reshape(in1, (5, 3)))
Found in  6.3581640770003105 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 94  --  tf.boolean_mask(in1, tf.cast(in1[:, 1], tf.bool))
input and output examples = [Example(inputs=[[[1, 2, 3, 4, 5], [9, 8, 7, 6, 5], [3, 0, 2, 5, 8], [8, 8, 6, 3, 2], [2, 0, 7, 7, 3], [9, 0, 3, 2, 7], [1, 3, 8, 9, 4]]], output=[[1, 2, 3, 4, 5], [9, 8, 7, 6, 5], [8, 8, 6, 3, 2], [1, 3, 8, 9, 4]])] natural language description = 
{ "id": "chatcmpl-8Q3Eqx6MtkiXeahT9YCREOWd9c8Ee", "object": "chat.completion", "created": 1701219668, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 24, 83, 92, 100, 108, 113, 114, 117, 123]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1029, "completion_tokens": 30, "total_tokens": 1059 } }

{'id': 'chatcmpl-8Q3Eqx6MtkiXeahT9YCREOWd9c8Ee', 'object': 'chat.completion', 'created': 1701219668, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 24, 83, 92, 100, 108, 113, 114, 117, 123]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1029, 'completion_tokens': 30, 'total_tokens': 1059}}
Altering:  [22, 24, 83, 92, 100, 108, 113, 114, 117, 123]
Input 'in1':
tf.Tensor(
[[1 2 3 4 5]
 [9 8 7 6 5]
 [3 0 2 5 8]
 [8 8 6 3 2]
 [2 0 7 7 3]
 [9 0 3 2 7]
 [1 3 8 9 4]], shape=(7, 5), dtype=int32)

Output:
tf.Tensor(
[[1 2 3 4 5]
 [9 8 7 6 5]
 [8 8 6 3 2]
 [1 3 8 9 4]], shape=(4, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 5, 7]

Searching...

Found solution: tf.gather_nd(in1, tf.where(in1[:, 1]))

Solution was found in 4.1 seconds:
tf.gather_nd(in1, tf.where(in1[:, 1]))
Found in  4.098882582999977 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 95  --  tf.gather(in1, tf.argsort(in1[:, 0], stable=True))
input and output examples = [Example(inputs=[[[6, 3, 7, 8, 4], [8, 9, 4, 5, 3], [1, 5, 3, 6, 9], [2, 1, 4, 3, 2], [7, 9, 6, 2, 7], [5, 8, 0, 4, 2]]], output=[[1, 5, 3, 6, 9], [2, 1, 4, 3, 2], [5, 8, 0, 4, 2], [6, 3, 7, 8, 4], [7, 9, 6, 2, 7], [8, 9, 4, 5, 3]])] natural language description = 
{ "id": "chatcmpl-8Q3EvEawErOlQ7TmoDE4oX9juhr0e", "object": "chat.completion", "created": 1701219673, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[5, 100, 83, 92, 22]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1044, "completion_tokens": 15, "total_tokens": 1059 } }

{'id': 'chatcmpl-8Q3EvEawErOlQ7TmoDE4oX9juhr0e', 'object': 'chat.completion', 'created': 1701219673, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[5, 100, 83, 92, 22]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1044, 'completion_tokens': 15, 'total_tokens': 1059}}
Altering:  [5, 100, 83, 92, 22]
Input 'in1':
tf.Tensor(
[[6 3 7 8 4]
 [8 9 4 5 3]
 [1 5 3 6 9]
 [2 1 4 3 2]
 [7 9 6 2 7]
 [5 8 0 4 2]], shape=(6, 5), dtype=int32)

Output:
tf.Tensor(
[[1 5 3 6 9]
 [2 1 4 3 2]
 [5 8 0 4 2]
 [6 3 7 8 4]
 [7 9 6 2 7]
 [8 9 4 5 3]], shape=(6, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 6]

Searching...

Found solution: tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True))

Solution was found in 8.4 seconds:
tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True))
Found in  8.3808978940001 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 96  --  tf.reshape(in1, (2, 2))
input and output examples = [Example(inputs=[[4, 5, 6, 7]], output=[[4, 5], [6, 7]])] natural language description = 
{ "id": "chatcmpl-8Q3F3glvtMQA7ekIxrjvJzYnrtrS7", "object": "chat.completion", "created": 1701219681, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[83, 108, 100, 117, 120, 121, 122, 11, 22, 24]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 886, "completion_tokens": 30, "total_tokens": 916 } }

{'id': 'chatcmpl-8Q3F3glvtMQA7ekIxrjvJzYnrtrS7', 'object': 'chat.completion', 'created': 1701219681, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[83, 108, 100, 117, 120, 121, 122, 11, 22, 24]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 886, 'completion_tokens': 30, 'total_tokens': 916}}
Altering:  [83, 108, 100, 117, 120, 121, 122, 11, 22, 24]
Input 'in1':
tf.Tensor([4 5 6 7], shape=(4,), dtype=int32)

Output:
tf.Tensor(
[[4 5]
 [6 7]], shape=(2, 2), dtype=int32)

Constants: [2, 0, 1, -1, True, False, 4]

Searching...

Found solution: tf.reshape(in1, (2, 2))

Solution was found in 2.1 seconds:
tf.reshape(in1, (2, 2))
Found in  2.1194079519996194 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1194079519996194, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 97  --  tf.gather(in1, tf.argsort(in1[:, 0], stable=True))
input and output examples = [Example(inputs=[[[8, 5, 9, 3], [3, 6, 6, 8], [1, 2, 3, 4], [7, 6, 5, 4], [4, 7, 2, 6]]], output=[[1, 2, 3, 4], [3, 6, 6, 8], [4, 7, 2, 6], [7, 6, 5, 4], [8, 5, 9, 3]])] natural language description = 
{ "id": "chatcmpl-8Q3F5iHK2TvMt4BfAK5LSnQljbJQx", "object": "chat.completion", "created": 1701219683, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[5, 83, 105, 100, 22, 108, 11, 84, 81, 24]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 984, "completion_tokens": 30, "total_tokens": 1014 } }

{'id': 'chatcmpl-8Q3F5iHK2TvMt4BfAK5LSnQljbJQx', 'object': 'chat.completion', 'created': 1701219683, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[5, 83, 105, 100, 22, 108, 11, 84, 81, 24]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 984, 'completion_tokens': 30, 'total_tokens': 1014}}
Altering:  [5, 83, 105, 100, 22, 108, 11, 84, 81, 24]
Input 'in1':
tf.Tensor(
[[8 5 9 3]
 [3 6 6 8]
 [1 2 3 4]
 [7 6 5 4]
 [4 7 2 6]], shape=(5, 4), dtype=int32)

Output:
tf.Tensor(
[[1 2 3 4]
 [3 6 6 8]
 [4 7 2 6]
 [7 6 5 4]
 [8 5 9 3]], shape=(5, 4), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 5]

Searching...

Found solution: tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True))

Solution was found in 11.3 seconds:
tf.gather(in1, tf.argsort(in1[:, 0], axis=0, stable=True))
Found in  11.308357588000035 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1194079519996194, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.308357588000035, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 98  --  tf.boolean_mask(in1, tf.greater(in1[:, 0], 1))
input and output examples = [Example(inputs=[[[5, 7], [6, 8], [-1, 9], [-2, 10], [2, 11], [1, 12], [3, -3]]], output=[[5, 7], [6, 8], [2, 11], [3, -3]])] natural language description = 
{ "id": "chatcmpl-8Q3FGnOIVWlw8yU2Nl7NbouUAEqng", "object": "chat.completion", "created": 1701219694, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[7, 22, 24, 26, 109, 113, 114, 117, 120, 123]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 930, "completion_tokens": 30, "total_tokens": 960 } }

{'id': 'chatcmpl-8Q3FGnOIVWlw8yU2Nl7NbouUAEqng', 'object': 'chat.completion', 'created': 1701219694, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[7, 22, 24, 26, 109, 113, 114, 117, 120, 123]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 930, 'completion_tokens': 30, 'total_tokens': 960}}
Altering:  [7, 22, 24, 26, 109, 113, 114, 117, 120, 123]
Input 'in1':
tf.Tensor(
[[ 5  7]
 [ 6  8]
 [-1  9]
 [-2 10]
 [ 2 11]
 [ 1 12]
 [ 3 -3]], shape=(7, 2), dtype=int32)

Output:
tf.Tensor(
[[ 5  7]
 [ 6  8]
 [ 2 11]
 [ 3 -3]], shape=(4, 2), dtype=int32)

Constants: [1, 0, -1, True, False, 2, 4, 7]

Searching...

Found solution: tf.boolean_mask(in1, tf.greater(in1[:, 0], tf.constant(1)))

Solution was found in 16.5 seconds:
tf.boolean_mask(in1, tf.greater(in1[:, 0], tf.constant(1)))
Found in  16.550427122999736 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1194079519996194, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.308357588000035, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 16.550427122999736, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 99  --  tf.gather(tf.gather(in1, tf.argsort(in1[:, 1], stable=True)), tf.argsort(tf.gather(in1, tf.argsort(in1[:, 1], stable=True))[:, 0], stable=True))
input and output examples = [Example(inputs=[[[8, 5, 9, 3], [3, 6, 6, 8], [7, 9, 3, 4], [7, 6, 5, 4], [3, 7, 2, 6]]], output=[[3, 6, 6, 8], [3, 7, 2, 6], [7, 6, 5, 4], [7, 9, 3, 4], [8, 5, 9, 3]])] natural language description = 
{ "id": "chatcmpl-8Q3FXcuBhku1r6rb1xtoxdB4gs76W", "object": "chat.completion", "created": 1701219711, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 24, 83, 105, 108, 113, 114, 117, 120, 123]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 984, "completion_tokens": 30, "total_tokens": 1014 } }

{'id': 'chatcmpl-8Q3FXcuBhku1r6rb1xtoxdB4gs76W', 'object': 'chat.completion', 'created': 1701219711, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 24, 83, 105, 108, 113, 114, 117, 120, 123]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 984, 'completion_tokens': 30, 'total_tokens': 1014}}
Altering:  [22, 24, 83, 105, 108, 113, 114, 117, 120, 123]
Input 'in1':
tf.Tensor(
[[8 5 9 3]
 [3 6 6 8]
 [7 9 3 4]
 [7 6 5 4]
 [3 7 2 6]], shape=(5, 4), dtype=int32)

Output:
tf.Tensor(
[[3 6 6 8]
 [3 7 2 6]
 [7 6 5 4]
 [7 9 3 4]
 [8 5 9 3]], shape=(5, 4), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 5]

Searching...

Could not find solution within 300 seconds.
Found in  300.12707405400033 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1194079519996194, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.308357588000035, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 16.550427122999736, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.12707405400033, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 100  --  tf.cast(tf.boolean_mask(in1, tf.math.logical_not(tf.math.is_nan(in1))), tf.int32)
input and output examples = [Example(inputs=[[nan, 11, 12, nan, 16, 18]], output=[11, 12, 16, 18])] natural language description = 
{ "id": "chatcmpl-8Q3KO8KT3RzBA8jSJ6cP558wobYOx", "object": "chat.completion", "created": 1701220012, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[60, 109, 7, 11, 100, 108, 22, 24, 9, 113]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 890, "completion_tokens": 30, "total_tokens": 920 } }

{'id': 'chatcmpl-8Q3KO8KT3RzBA8jSJ6cP558wobYOx', 'object': 'chat.completion', 'created': 1701220012, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[60, 109, 7, 11, 100, 108, 22, 24, 9, 113]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 890, 'completion_tokens': 30, 'total_tokens': 920}}
Altering:  [60, 109, 7, 11, 100, 108, 22, 24, 9, 113]
Input 'in1':
tf.Tensor([nan 11. 12. nan 16. 18.], shape=(6,), dtype=float32)

Output:
tf.Tensor([11 12 16 18], shape=(4,), dtype=int32)

Constants: [nan, 0, 1, -1, True, False, 4, 6]

Searching...

Found solution: tf.cast(tf.boolean_mask(in1, tf.equal(in1, in1)), tf.int32)

Solution was found in 2.3 seconds:
tf.cast(tf.boolean_mask(in1, tf.equal(in1, in1)), tf.int32)
Found in  2.307841699999699 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1194079519996194, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.307841699999699, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.308357588000035, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 16.550427122999736, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.12707405400033, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 101  --  tf.transpose(tf.concat((tf.expand_dims(tf.range(5), axis=0), in1), axis=0))
input and output examples = [Example(inputs=[[[1, 4, 2, 7, 6], [20, 10, 50, 40, 30]]], output=[[0, 1, 20], [1, 4, 10], [2, 2, 50], [3, 7, 40], [4, 6, 30]])] natural language description = 
{ "id": "chatcmpl-8Q3KQPz125d0RytUtXqJgGJwJ2AaO", "object": "chat.completion", "created": 1701220014, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[24, 68, 11, 100, 83, 22, 98, 105, 87, 102]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 939, "completion_tokens": 30, "total_tokens": 969 } }

{'id': 'chatcmpl-8Q3KQPz125d0RytUtXqJgGJwJ2AaO', 'object': 'chat.completion', 'created': 1701220014, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[24, 68, 11, 100, 83, 22, 98, 105, 87, 102]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 939, 'completion_tokens': 30, 'total_tokens': 969}}
Altering:  [24, 68, 11, 100, 83, 22, 98, 105, 87, 102]
Input 'in1':
tf.Tensor(
[[ 1  4  2  7  6]
 [20 10 50 40 30]], shape=(2, 5), dtype=int32)

Output:
tf.Tensor(
[[ 0  1 20]
 [ 1  4 10]
 [ 2  2 50]
 [ 3  7 40]
 [ 4  6 30]], shape=(5, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 5]

Searching...

Found solution: tf.concat((tf.expand_dims(tf.range(5), 1), tf.transpose(in1)), 1)

Solution was found in 182.9 seconds:
tf.concat((tf.expand_dims(tf.range(5), 1), tf.transpose(in1)), 1)
Found in  182.87565136899957 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1194079519996194, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.307841699999699, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.308357588000035, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 16.550427122999736, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 182.87565136899957, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.12707405400033, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3578979440001, 300.49517696400017]
Benchmark # 102  --  tf.cast(tf.divide(in1[:, :, 1], tf.reduce_sum(in1, axis=2)), tf.float32)
input and output examples = [Example(inputs=[[[[2, 8], [2, 6], [6, 2]], [[0, 2], [1, 1], [2, 0]]]], output=[[0.8, 0.75, 0.25], [1.0, 0.5, 0.0]])] natural language description = 
{ "id": "chatcmpl-8Q3NO7Id0ppJ9fn0qbbP0J8zlbHuW", "object": "chat.completion", "created": 1701220198, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[14, 9, 83, 92, 1, 101, 79, 59, 57, 58]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 931, "completion_tokens": 30, "total_tokens": 961 } }

{'id': 'chatcmpl-8Q3NO7Id0ppJ9fn0qbbP0J8zlbHuW', 'object': 'chat.completion', 'created': 1701220198, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[14, 9, 83, 92, 1, 101, 79, 59, 57, 58]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 931, 'completion_tokens': 30, 'total_tokens': 961}}
Altering:  [14, 9, 83, 92, 1, 101, 79, 59, 57, 58]
Input 'in1':
tf.Tensor(
[[[2 8]
  [2 6]
  [6 2]]

 [[0 2]
  [1 1]
  [2 0]]], shape=(2, 3, 2), dtype=int32)

Output:
tf.Tensor(
[[0.8  0.75 0.25]
 [1.   0.5  0.  ]], shape=(2, 3), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3]

Searching...

Could not find solution within 300 seconds.
Found in  300.3345474299995 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1194079519996194, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.307841699999699, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.308357588000035, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 16.550427122999736, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 182.87565136899957, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.12707405400033, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3345474299995, 300.3578979440001, 300.49517696400017]
Benchmark # 103  --  tf.boolean_mask(in1, tf.reduce_any(tf.equal(in1[:, 1], tf.expand_dims(in2, axis=1)), axis=0))
input and output examples = [Example(inputs=[[[101, 0, 11, 0], [102, 1, 12, 4], [103, 2, 13, 2], [104, 3, 14, 8], [105, 4, 15, 4], [106, 5, 16, 5], [107, 6, 17, 4], [108, 7, 18, 7], [109, 8, 19, 7], [110, 9, 20, 4]], [4, 2, 6]], output=[[103, 2, 13, 2], [105, 4, 15, 4], [107, 6, 17, 4]])] natural language description = 
{ "id": "chatcmpl-8Q3SF1VtDeZEY5Frg1VgvcculWyQ7", "object": "chat.completion", "created": 1701220499, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[22, 24, 7, 15, 109, 26, 60, 113, 114, 120]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 1028, "completion_tokens": 30, "total_tokens": 1058 } }

{'id': 'chatcmpl-8Q3SF1VtDeZEY5Frg1VgvcculWyQ7', 'object': 'chat.completion', 'created': 1701220499, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[22, 24, 7, 15, 109, 26, 60, 113, 114, 120]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 1028, 'completion_tokens': 30, 'total_tokens': 1058}}
Altering:  [22, 24, 7, 15, 109, 26, 60, 113, 114, 120]
Input 'in1':
tf.Tensor(
[[101   0  11   0]
 [102   1  12   4]
 [103   2  13   2]
 [104   3  14   8]
 [105   4  15   4]
 [106   5  16   5]
 [107   6  17   4]
 [108   7  18   7]
 [109   8  19   7]
 [110   9  20   4]], shape=(10, 4), dtype=int32)

Input 'in2':
tf.Tensor([4 2 6], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[103   2  13   2]
 [105   4  15   4]
 [107   6  17   4]], shape=(3, 4), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 4, 10]

Searching...

Found solution: tf.gather_nd(in1, tf.where(tf.math.bincount(in2)))

Solution was found in 7.5 seconds:
tf.gather_nd(in1, tf.where(tf.math.bincount(in2)))
Found in  7.46627124799943 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1194079519996194, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.307841699999699, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.46627124799943, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.308357588000035, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 16.550427122999736, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 182.87565136899957, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.12707405400033, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3345474299995, 300.3578979440001, 300.49517696400017]
Benchmark # 104  --  tf.concat((tf.cast(in1, tf.float32), tf.fill([4, 1], float("nan"))), axis=1)
input and output examples = [Example(inputs=[[[1, 0, 1, 2], [1, 1, 3, 4], [2, 0, 1, 2], [2, 1, 3, 4]]], output=[[1, 0, 1, 2, nan], [1, 1, 3, 4, nan], [2, 0, 1, 2, nan], [2, 1, 3, 4, nan]])] natural language description = 
{ "id": "chatcmpl-8Q3SM99CGmhizWCqrh0YZjQaIiYmn", "object": "chat.completion", "created": 1701220506, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[11, 21, 83, 92, 100]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 968, "completion_tokens": 15, "total_tokens": 983 } }

{'id': 'chatcmpl-8Q3SM99CGmhizWCqrh0YZjQaIiYmn', 'object': 'chat.completion', 'created': 1701220506, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[11, 21, 83, 92, 100]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 968, 'completion_tokens': 15, 'total_tokens': 983}}
Altering:  [11, 21, 83, 92, 100]
Input 'in1':
tf.Tensor(
[[1 0 1 2]
 [1 1 3 4]
 [2 0 1 2]
 [2 1 3 4]], shape=(4, 4), dtype=int32)

Output:
tf.Tensor(
[[ 1.  0.  1.  2. nan]
 [ 1.  1.  3.  4. nan]
 [ 2.  0.  1.  2. nan]
 [ 2.  1.  3.  4. nan]], shape=(4, 5), dtype=float32)

Constants: [nan, 0, 1, -1, True, False, 4, 5]

Searching...

Could not find solution within 300 seconds.
Found in  300.1046360749997 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1194079519996194, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.307841699999699, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.46627124799943, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.308357588000035, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 16.550427122999736, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 182.87565136899957, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.1046360749997, 300.12707405400033, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3345474299995, 300.3578979440001, 300.49517696400017]
Benchmark # 105  --  tf.cumsum(in1)
input and output examples = [Example(inputs=[[1, 1, 2, 1, 3, 2]], output=[1, 2, 4, 5, 8, 10])] natural language description = 
{ "id": "chatcmpl-8Q3XEYzl5esrX0VKq91h1PVKwuTDZ", "object": "chat.completion", "created": 1701220808, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 59, 79, 32, 68, 83, 9, 12, 21, 104]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 897, "completion_tokens": 30, "total_tokens": 927 } }

{'id': 'chatcmpl-8Q3XEYzl5esrX0VKq91h1PVKwuTDZ', 'object': 'chat.completion', 'created': 1701220808, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 59, 79, 32, 68, 83, 9, 12, 21, 104]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 897, 'completion_tokens': 30, 'total_tokens': 927}}
Altering:  [1, 59, 79, 32, 68, 83, 9, 12, 21, 104]
Input 'in1':
tf.Tensor([1 1 2 1 3 2], shape=(6,), dtype=int32)

Output:
tf.Tensor([ 1  2  4  5  8 10], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6]

Searching...

Found solution: tf.math.cumsum(in1, axis=0)

Solution was found in 1.8 seconds:
tf.math.cumsum(in1, axis=0)
Found in  1.8058870449995084 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8058870449995084, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1194079519996194, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.307841699999699, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.46627124799943, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.308357588000035, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 16.550427122999736, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 182.87565136899957, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.1046360749997, 300.12707405400033, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3345474299995, 300.3578979440001, 300.49517696400017]
Benchmark # 106  --  tf.reduce_mean(tf.cast(in1, tf.float32), axis=0)[1:]
input and output examples = [Example(inputs=[[[0, 6, 0], [3, 101, 14], [0, 91, 6], [5, 15, 0]]], output=[53.25, 5.0])] natural language description = 
{ "id": "chatcmpl-8Q3XGW7u7XYhKkFA2xy7Yj7wjC1Y1", "object": "chat.completion", "created": 1701220810, "model": "gpt-4-0613", "choices": [ { "index": 0, "message": { "role": "assistant", "content": "[1, 14, 74, 79, 83, 100, 108, 113, 118, 120]" }, "finish_reason": "stop" } ], "usage": { "prompt_tokens": 909, "completion_tokens": 30, "total_tokens": 939 } }

{'id': 'chatcmpl-8Q3XGW7u7XYhKkFA2xy7Yj7wjC1Y1', 'object': 'chat.completion', 'created': 1701220810, 'model': 'gpt-4-0613', 'choices': [{'index': 0, 'message': {'role': 'assistant', 'content': '[1, 14, 74, 79, 83, 100, 108, 113, 118, 120]'}, 'finish_reason': 'stop'}], 'usage': {'prompt_tokens': 909, 'completion_tokens': 30, 'total_tokens': 939}}
Altering:  [1, 14, 74, 79, 83, 100, 108, 113, 118, 120]
Input 'in1':
tf.Tensor(
[[  0   6   0]
 [  3 101  14]
 [  0  91   6]
 [  5  15   0]], shape=(4, 3), dtype=int32)

Output:
tf.Tensor([53.25  5.  ], shape=(2,), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3, 4]

Searching...

Found solution: tf.reduce_mean(tf.cast(in1, tf.float32), axis=0)[1:]

Solution was found in 37.5 seconds:
tf.reduce_mean(tf.cast(in1, tf.float32), axis=0)[1:]
Found in  37.509029028999976 s!
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8058870449995084, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1194079519996194, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.307841699999699, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.46627124799943, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.308357588000035, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 16.550427122999736, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 37.509029028999976, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 182.87565136899957, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.1046360749997, 300.12707405400033, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3345474299995, 300.3578979440001, 300.49517696400017]
[0.7820480090000004, 0.7925840069999595, 0.858646147, 0.9504489089999879, 0.983545644000003, 1.0285496200000352, 1.0633178140000012, 1.0834865589999936, 1.14804132200004, 1.1688059109999926, 1.1755344320000063, 1.2016386040000384, 1.391018878000068, 1.420897540999988, 1.5682393339999408, 1.6293981840000242, 1.6750647539999477, 1.7556903019999996, 1.7633053879999352, 1.7754674200000409, 1.8058870449995084, 1.8101698539999802, 1.8276215310002044, 1.9351502550000532, 1.9804573659998823, 2.0916166800000155, 2.1064035509999712, 2.1074303350000037, 2.1194079519996194, 2.1309787860000142, 2.2323741820000578, 2.275041723999948, 2.278909717000033, 2.307841699999699, 2.3255279049999444, 2.3318988199998785, 2.3805071789999985, 2.398083329999963, 2.462231541000051, 2.5386926510000194, 2.708273998999971, 2.7470914409999985, 2.778141201999915, 2.898417155000061, 2.9406693050000285, 2.9587463559998923, 3.183302112999854, 3.2084404459999405, 3.244153067999946, 3.4684446769999795, 3.488692386999901, 3.496535494999989, 4.098882582999977, 4.184564288000047, 4.343933309000022, 4.482963751999705, 4.679113113000085, 4.806409146000078, 4.941556551999838, 4.982907891999957, 5.825709018999987, 6.3581640770003105, 6.473534769000253, 6.70576946500023, 7.075291531999994, 7.46627124799943, 7.69713328600028, 8.3808978940001, 8.88356085300029, 9.142389382000001, 9.619848865000222, 11.308357588000035, 11.938975239999763, 12.755258200000071, 12.977774331000091, 14.521791597000174, 14.543788867000103, 16.550427122999736, 18.72501255100002, 22.038889645999916, 22.61620381800003, 22.977158417999988, 30.182673525000155, 31.937797934999708, 33.29574627599999, 37.509029028999976, 61.33049229400001, 63.98630920000005, 72.23449217999996, 74.01229951899995, 75.47025165600007, 91.05079911099983, 93.72975167699997, 108.89333510799997, 182.87565136899957, 300.0688747449999, 300.0727079489998, 300.0736162879998, 300.1046360749997, 300.12707405400033, 300.13927618899993, 300.25574915600004, 300.27412295600016, 300.304388078, 300.3345474299995, 300.3578979440001, 300.49517696400017]
carson@Carsons-MacBook-Air-2 tensorflow-coder-IntPrSys % 

