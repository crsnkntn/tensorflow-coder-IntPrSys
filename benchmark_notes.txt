Reordered weights:
Operation  0 : [ tf.add(x, y) ], weight= 16
. . .
Input 'in1':
tf.Tensor([10], shape=(1,), dtype=int32)

Input 'in2':
tf.Tensor([20], shape=(1,), dtype=int32)

Output:
tf.Tensor([30], shape=(1,), dtype=int32)

Constants: [0, 1, -1, True, False]

Description: Add elementwise

Searching...

Found solution: tf.add(in1, in2)

Solution was found in 0.1 seconds:
tf.add(in1, in2)
tf.add(in1, in2)
------------------------------------

Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 12
. . .
Input 'in1':
tf.Tensor([1 0 1 1 0], shape=(5,), dtype=int32)

Output:
tf.Tensor([ True False  True  True False], shape=(5,), dtype=bool)

Constants: [0, 1, -1, True, False, 5]

Description: cast a tensor

Searching...

Found solution: tf.cast(in1, tf.bool)

Solution was found in 0.0 seconds:
tf.cast(in1, tf.bool)
tf.cast(in1, tf.bool)
------------------------------------


Reordered weights:
. . .
Operation  1 : [ tf.add(x, y) ], weight= 16
. . .
Operation  3 : [ tf.expand_dims(input, axis) ], weight= 18
. . .
Input 'in1':
tf.Tensor(
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
 96 97 98 99], shape=(100,), dtype=int32)

Input 'in2':
tf.Tensor([1000 2000 3000 4000 5000], shape=(5,), dtype=int32)

Output:
tf.Tensor(
[[1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013
  1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027
  1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041
  1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055
  1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069
  1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083
  1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097
  1098 1099]
 [2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013
  2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027
  2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041
  2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055
  2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069
  2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083
  2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097
  2098 2099]
 [3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013
  3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027
  3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041
  3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055
  3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069
  3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083
  3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097
  3098 3099]
 [4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013
  4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027
  4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 4041
  4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055
  4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069
  4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083
  4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097
  4098 4099]
 [5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5010 5011 5012 5013
  5014 5015 5016 5017 5018 5019 5020 5021 5022 5023 5024 5025 5026 5027
  5028 5029 5030 5031 5032 5033 5034 5035 5036 5037 5038 5039 5040 5041
  5042 5043 5044 5045 5046 5047 5048 5049 5050 5051 5052 5053 5054 5055
  5056 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 5067 5068 5069
  5070 5071 5072 5073 5074 5075 5076 5077 5078 5079 5080 5081 5082 5083
  5084 5085 5086 5087 5088 5089 5090 5091 5092 5093 5094 5095 5096 5097
  5098 5099]], shape=(5, 100), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 100]

Description: Add two tensors

Searching...

Found solution: tf.add(in1, tf.expand_dims(in2, 1))

Solution was found in 0.5 seconds:
tf.add(in1, tf.expand_dims(in2, 1))
tf.add(in1, tf.expand_dims(in2, 1))
------------------------------------


Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
. . .
Operation  8 : [ tf.reduce_sum(input_tensor) ], weight= 18
Operation  9 : [ tf.tensordot(a, b, axes) ], weight= 18
. . .
Operation  29 : [ tf.divide(x, y) ], weight= 28
. . .
Input 'ones':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Input 'hundreds':
tf.Tensor([100 200 300], shape=(3,), dtype=int32)

Output:
tf.Tensor(10, shape=(), dtype=int32)

Constants: [1, 10, 100, 0, -1, True, False, 3, 5]

Description: find the right constant

Searching...

Found solution: tf.cast(tf.reduce_sum(tf.divide(tf.tensordot(ones, tens, 1), hundreds)), tf.int32)

Solution was found in 21.1 seconds:
tf.cast(tf.reduce_sum(tf.divide(tf.tensordot(ones, tens, 1), hundreds)), tf.int32)
tf.constant(10)
------------------------------------


Reordered weights:
Operation  0 : [ tf.sparse.from_dense(tensor) ], weight= 11
. . .
Operation  8 : [ tf.sparse.add(a, b) ], weight= 18
. . .
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]], shape=(2, 2), dtype=int64), values=tf.Tensor([12 34], shape=(2,), dtype=int32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Input 'in2':
tf.Tensor(
[[-3  0]
 [-5  0]], shape=(2, 2), dtype=int32)

Output:
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]
 [1 0]], shape=(3, 2), dtype=int64), values=tf.Tensor([ 9 34 -5], shape=(3,), dtype=int32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Constants: [0, 1, -1, True, False, 2]

Description: Add sparse tensor with dense tensor

Searching...

Found solution: tf.sparse.add(in1, tf.sparse.from_dense(in2))

Solution was found in 0.2 seconds:
tf.sparse.add(in1, tf.sparse.from_dense(in2))
tf.sparse.add(in1, tf.sparse.from_dense(in2))
------------------------------------


Reordered weights:
. . .
Operation  6 : [ tf.sparse.reduce_sum(sp_input, axis, output_is_sparse) ], weight= 16
. . .
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]
 [1 1]], shape=(3, 2), dtype=int64), values=tf.Tensor([12 34 56], shape=(3,), dtype=int32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Output:
SparseTensor(indices=tf.Tensor(
[[0]
 [1]], shape=(2, 1), dtype=int64), values=tf.Tensor([46 56], shape=(2,), dtype=int32), dense_shape=tf.Tensor([2], shape=(1,), dtype=int64))

Constants: [0, 1, -1, True, False, 2]

Description: Reduce sum on a sparse tensor

Searching...

Found solution: tf.sparse.reduce_sum(in1, axis=1, output_is_sparse=True)

Solution was found in 0.1 seconds:
tf.sparse.reduce_sum(in1, axis=1, output_is_sparse=True)
tf.sparse.reduce_sum(in1, axis=1, output_is_sparse=True)
------------------------------------


Reordered weights:
. . .
Operation  1 : [ tf.cast(x, dtype) ], weight= 16
. . .
Operation  21 : [ tf.sequence_mask(lengths) ], weight= 24
. . .
Operation  23 : [ tf.where(condition) ], weight= 24
Operation  24 : [ tf.where(condition, x, y) ], weight= 24
. . .
Operation  41 : [ tf.math.bincount(arr) ], weight= 30
. . .
Input 'in1':
tf.Tensor([0 0 0 1 3 3], shape=(6,), dtype=int32)

Output:
tf.Tensor(
[[0 0]
 [0 1]
 [0 2]
 [1 0]
 [3 0]
 [3 1]], shape=(6, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 6]

Description: Convert index tensor into pairs for SparseTensor indexing

Searching...

Found solution: tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)

Solution was found in 4.1 seconds:
tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)
tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)
--


Reordered weights:
. . .
Operation  1 : [ tf.divide(x, y) ], weight= 16
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.reduce_sum(input_tensor) ], weight= 18
. . .
Operation  17 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
. . .
Input 'in1':
tf.Tensor(
[[0. 1. 0. 0.]
 [0. 1. 1. 0.]
 [1. 1. 1. 1.]], shape=(3, 4), dtype=float32)

Output:
tf.Tensor(
[[0.   1.   0.   0.  ]
 [0.   0.5  0.5  0.  ]
 [0.25 0.25 0.25 0.25]], shape=(3, 4), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4]

Description: Divide each row by the sum of that row

Searching...

Found solution: tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))

Solution was found in 4.6 seconds:
tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))
tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))
------------------------------------


Reordered weights:
. . .
Operation  31 : [ tf.sparse.split(sp_input, num_split, axis) ], weight= 24
. . .

Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0 0]
 [0 1 1]
 [1 1 1]
 [1 1 2]], shape=(4, 3), dtype=int64), values=tf.Tensor([1. 1. 1. 1.], shape=(4,), dtype=float32), dense_shape=tf.Tensor([  2   2 800], shape=(3,), dtype=int64))

Output:
SparseTensor(indices=tf.Tensor(
[[0 0 0]
 [0 1 1]], shape=(2, 3), dtype=int64), values=tf.Tensor([1. 1.], shape=(2,), dtype=float32), dense_shape=tf.Tensor([  1   2 800], shape=(3,), dtype=int64))

Constants: [0, 1, -1, True, False, 2, 800]

Description: Slice the first dimension of a SparseTensor

Searching...

Found solution: tf.sparse.split(sp_input=in1, num_split=2, axis=0)[0]

Solution was found in 17.6 seconds:
tf.sparse.split(sp_input=in1, num_split=2, axis=0)[0]
tf.sparse.slice(in1, tf.zeros(3, dtype=tf.int64), tf.concat([[1], in1.dense_shape[1:]], 0))
------------------------------------


Reordered weights:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 14
. . .
Operation  56 : [ tf.repeat(input, repeats, axis) ], weight= 39
. . .
Operation  73 : [ tf.repeat(input, repeats) ], weight= 42
. . .

Input 'in1':
tf.Tensor(
[[1 2 3 4]
 [5 6 7 8]], shape=(2, 4), dtype=int32)

Output:
tf.Tensor(
[[[1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]]

 [[5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]]], shape=(2, 6, 4), dtype=int32)

Constants: [6, 0, 1, -1, True, False, 2, 4]

Description: Repeat each input entry 6 times

Searching...

Found solution: tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)

Solution was found in 4.2 seconds:
tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)
tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))
------------------------------------

FAILURE !!!
Input 'in1':
tf.Tensor([0 0 0 1 1 1 1 2 2 2 2 3 4 4 5 5], shape=(16,), dtype=int32)

Input 'in2':
tf.Tensor([ 4  1  8  2  5  7  9  3  7  3  1 42  1  2  4  0], shape=(16,), dtype=int32)

Output:
tf.Tensor([2 3 1 0 1 0], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6, 16]

Description: Take the argmax of each group of elements

Searching...

Could not find solution within 300 seconds.
tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)
------------------------------------


Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 12
. . .
Operation  2 : [ tf.greater(x, y) ], weight= 18
. . .
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 18
. . .
Operation  17 : [ tf.reduce_sum(input_tensor) ], weight= 24
. . .
Input 'in1':
tf.Tensor(
[[ 1.    0.3  -4.2   0.    2.1   0.4 ]
 [-0.1   0.    1.4  -1.    0.4   0.  ]
 [ 0.1   0.    0.7  -0.3   0.5  -0.1 ]
 [ 1.4   2.5   0.3   0.01  0.    1.2 ]], shape=(4, 6), dtype=float32)

Output:
tf.Tensor([4 2 3 5], shape=(4,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 6]

Description: count the number of elements greater than 0 in each row

Searching...

Found solution: tf.reduce_sum(tf.cast(tf.greater(in1, tf.cast(0, tf.float32)), tf.int32), axis=1)

Solution was found in 23.2 seconds:
tf.reduce_sum(tf.cast(tf.greater(in1, tf.cast(0, tf.float32)), tf.int32), axis=1)
tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)
------------------------------------


Reordered weights:
. . .
Operation  5 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 22
. . .
Operation  59 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 39
. . .
Operation  89 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 45
Operation  90 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 45

Input 'in1':
tf.Tensor(
[[1 3 5 7]
 [2 4 6 8]], shape=(2, 4), dtype=int32)

Output:
tf.Tensor(
[[1 3 5 7 0]
 [2 4 6 8 0]], shape=(2, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 4, 5]

Description: pad a zero column

Searching...

Found solution: tf.pad(in1, ((0, 0), (0, 1)), mode='CONSTANT')

Solution was found in 67.0 seconds:
tf.pad(in1, ((0, 0), (0, 1)), mode='CONSTANT')
tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')
------------------------------------


Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 12
Operation  1 : [ tf.where(condition, x, y) ], weight= 14
. . .
Operation  3 : [ tf.where(condition) ], weight= 18
. . .
Operation  16 : [ tf.multiply(x, y) ], weight= 24
. . .

Input 'in1':
tf.Tensor([ True False False  True False], shape=(5,), dtype=bool)

Input 'in2':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Output:
tf.Tensor([  1 -20 -30   4 -50], shape=(5,), dtype=int32)

Constants: [-10, 0, 1, -1, True, False, 5]

Description: use bool tensor as condition

Searching...

Found solution: tf.where(in1, x=in2, y=tf.multiply(in2, tf.cast(-10, tf.int32)))

Solution was found in 7.9 seconds:
tf.where(in1, x=in2, y=tf.multiply(in2, tf.cast(-10, tf.int32)))
tf.where(in1, in2, tf.multiply(in2, -10))
--------------------------------


Reordered weights:
Operation  0 : [ tf.reduce_sum(input_tensor) ], weight= 14
. . .
Operation  6 : [ tf.reduce_sum(input_tensor, axis) ], weight= 18
. . .
Operation  15 : [ tf.gather(params, indices) ], weight= 24
. . .
Operation  35 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
. . .

Input 'in1':
tf.Tensor([  5   7 -12  10  20], shape=(5,), dtype=int32)

Input 'in2':
tf.Tensor([1 2 3 1 2], shape=(5,), dtype=int32)

Output:
tf.Tensor([ 15  27 -12  15  27], shape=(5,), dtype=int32)

Constants: [0, 1, -1, True, False, 5]

Description: sum of elements in the first tensor but partitioned by the second tensor

Searching...

Found solution: tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_sum(in1)), in2)

Solution was found in 28.0 seconds:
tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_sum(in1)), in2)
tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)
----------------------------


Reordered weights:
. . .
Operation  9 : [ tf.gather(params, indices) ], weight= 24
. . .
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
. . .
Operation  88 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
. . .

Input 'in1':
tf.Tensor(
[[11 12 13]
 [30 20 10]
 [77 88 99]], shape=(3, 3), dtype=int32)

Input 'in2':
tf.Tensor(
[[2 0 1]
 [1 0 2]
 [0 2 1]], shape=(3, 3), dtype=int32)

Output:
tf.Tensor(
[[12 13 11]
 [20 30 10]
 [77 99 88]], shape=(3, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3]

Description: scatter a 2-D tensor with indices

Searching...

Found solution: tf.gather(in1, tf.argsort(in2, axis=1, stable=True), axis=1, batch_dims=1)

Solution was found in 65.8 seconds:
tf.gather(in1, tf.argsort(in2, axis=1, stable=True), axis=1, batch_dims=1)
tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)
------------------------------------


Reordered weights:
. . .
Operation  6 : [ tf.argsort(values, axis, stable=True) ], weight= 22
. . .
Operation  25 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 27
. . .

Input 'in1':
tf.Tensor([10  7  4  3  2  8], shape=(6,), dtype=int32)

Output:
tf.Tensor([5 3 2 1 0 4], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6]

Description: sort a tensor and return sorted index in original order

Searching...

Found solution: tf.argsort(tf.argsort(in1, axis=0, stable=True), axis=0, stable=True)

Solution was found in 1.1 seconds:
tf.argsort(tf.argsort(in1, axis=0, stable=True), axis=0, stable=True)
tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)
-------------------------------

