Reordered weights:
Operation  0 : [ tf.add(x, y) ], weight= 16
Operation  1 : [ tf.cast(x, dtype) ], weight= 16
Operation  2 : [ tf.constant(value) ], weight= 17
Operation  3 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.range(start) ], weight= 21
Operation  7 : [ tf.subtract(x, y) ], weight= 21
Operation  8 : [ tf.squeeze(input, axis) ], weight= 23
Operation  9 : [ tf.constant(value, dtype) ], weight= 24
Operation  10 : [ tf.equal(x, y) ], weight= 24
Operation  11 : [ tf.gather(params, indices) ], weight= 24
Operation  12 : [ tf.greater(x, y) ], weight= 24
Operation  13 : [ tf.matmul(a, b) ], weight= 24
Operation  14 : [ tf.maximum(x, y) ], weight= 24
Operation  15 : [ tf.multiply(x, y) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  21 : [ tf.transpose(a) ], weight= 24
Operation  22 : [ tf.where(condition) ], weight= 24
Operation  23 : [ tf.where(condition, x, y) ], weight= 24
Operation  24 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  25 : [ tf.divide(x, y) ], weight= 28
Operation  26 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  27 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  28 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  29 : [ tf.square(x) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.math.segment_max(data, segment_ids) ], weight= 30
Operation  32 : [ tf.math.segment_sum(data, segment_ids) ], weight= 30
Operation  33 : [ tf.argmax(input, axis) ], weight= 32
Operation  34 : [ tf.greater_equal(x, y) ], weight= 32
Operation  35 : [ tf.minimum(x, y) ], weight= 32
Operation  36 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  37 : [ tf.zeros_like(input) ], weight= 32
Operation  38 : [ IndexingAxis1Operation ], weight= 32
Operation  39 : [ IndexingOperation ], weight= 32
Operation  40 : [ tf.add_n(inputs) ], weight= 33
Operation  41 : [ tf.concat(values, axis) ], weight= 36
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.math.squared_difference(x, y) ], weight= 39
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  72 : [ tf.sqrt(x) ], weight= 42
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.math.segment_prod(data, segment_ids) ], weight= 45
Operation  87 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 45
Operation  88 : [ tf.argmin(input, axis) ], weight= 48
Operation  89 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  90 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  91 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  92 : [ tf.math.logical_not(x) ], weight= 48
Operation  93 : [ tf.math.negative(x) ], weight= 48
Operation  94 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  95 : [ tf.math.top_k(input, k) ], weight= 48
Operation  96 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  97 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  98 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  99 : [ tf.sign(x) ], weight= 48
Operation  100 : [ tf.unique_with_counts(x) ], weight= 48
Operation  101 : [ tf.exp(x) ], weight= 52
Operation  102 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  103 : [ tf.math.log(x) ], weight= 52
Operation  104 : [ tf.math.reciprocal(x) ], weight= 52
Operation  105 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  106 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  107 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  108 : [ tf.round(x) ], weight= 52
Operation  109 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  110 : [ tf.sort(values, axis) ], weight= 52
Operation  111 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  112 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  113 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  114 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  115 : [ tf.range(start, limit, delta) ], weight= 56
Operation  116 : [ tf.repeat(input, repeats) ], weight= 56
Operation  117 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  118 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  119 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  120 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([10], shape=(1,), dtype=int32)

Input 'in2':
tf.Tensor([20], shape=(1,), dtype=int32)

Output:
tf.Tensor([30], shape=(1,), dtype=int32)

Constants: [0, 1, -1, True, False]

Description: Add elementwise

Searching...

Found solution: tf.add(in1, in2)

Solution was found in 0.1 seconds:
tf.add(in1, in2)
tf.add(in1, in2)
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 12
Operation  1 : [ tf.equal(x, y) ], weight= 18
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.greater(x, y) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.range(start) ], weight= 21
Operation  7 : [ tf.constant(value) ], weight= 23
Operation  8 : [ tf.squeeze(input, axis) ], weight= 23
Operation  9 : [ tf.constant(value, dtype) ], weight= 24
Operation  10 : [ tf.gather(params, indices) ], weight= 24
Operation  11 : [ tf.greater_equal(x, y) ], weight= 24
Operation  12 : [ tf.matmul(a, b) ], weight= 24
Operation  13 : [ tf.maximum(x, y) ], weight= 24
Operation  14 : [ tf.multiply(x, y) ], weight= 24
Operation  15 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  19 : [ tf.sequence_mask(lengths) ], weight= 24
Operation  20 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  21 : [ tf.transpose(a) ], weight= 24
Operation  22 : [ tf.where(condition) ], weight= 24
Operation  23 : [ tf.where(condition, x, y) ], weight= 24
Operation  24 : [ tf.add(x, y) ], weight= 28
Operation  25 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  26 : [ tf.divide(x, y) ], weight= 28
Operation  27 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  28 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  29 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  30 : [ tf.square(x) ], weight= 28
Operation  31 : [ tf.subtract(x, y) ], weight= 28
Operation  32 : [ tf.tile(input, multiples) ], weight= 28
Operation  33 : [ tf.argsort(values, axis, stable=True) ], weight= 30
Operation  34 : [ tf.math.bincount(arr) ], weight= 30
Operation  35 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.not_equal(x, y) ], weight= 33
Operation  42 : [ tf.sequence_mask(lengths, maxlen) ], weight= 33
Operation  43 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 36
Operation  44 : [ tf.concat(values, axis) ], weight= 36
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 36
Operation  47 : [ tf.ones_like(input) ], weight= 36
Operation  48 : [ tf.reverse(tensor, axis) ], weight= 36
Operation  49 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  50 : [ tf.shape(input) ], weight= 36
Operation  51 : [ tf.stack(values, axis) ], weight= 36
Operation  52 : [ SlicingAxis0BothOperation ], weight= 36
Operation  53 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  54 : [ SlicingAxis0RightOperation ], weight= 36
Operation  55 : [ SlicingAxis1BothOperation ], weight= 36
Operation  56 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  57 : [ SlicingAxis1RightOperation ], weight= 36
Operation  58 : [ TripleCreationOperation ], weight= 36
Operation  59 : [ tf.squeeze(input) ], weight= 38
Operation  60 : [ tf.sort(values, axis) ], weight= 39
Operation  61 : [ tf.abs(x) ], weight= 40
Operation  62 : [ tf.eye(num_rows) ], weight= 40
Operation  63 : [ tf.fill(dims, value) ], weight= 40
Operation  64 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  65 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  66 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  67 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  68 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  69 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  71 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  73 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  74 : [ tf.unstack(value, axis) ], weight= 40
Operation  75 : [ tf.zeros(shape) ], weight= 40
Operation  76 : [ tf.range(start, limit, delta) ], weight= 42
Operation  77 : [ tf.add_n(inputs) ], weight= 44
Operation  78 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  79 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  80 : [ tf.math.ceil(x) ], weight= 44
Operation  81 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  82 : [ tf.math.floor(x) ], weight= 44
Operation  83 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  84 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  85 : [ tf.ones(shape) ], weight= 44
Operation  86 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  87 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  88 : [ tf.transpose(a, perm) ], weight= 44
Operation  89 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 45
Operation  90 : [ tf.argmin(input, axis) ], weight= 48
Operation  91 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  92 : [ tf.math.logical_not(x) ], weight= 48
Operation  93 : [ tf.math.negative(x) ], weight= 48
Operation  94 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  95 : [ tf.math.top_k(input, k) ], weight= 48
Operation  96 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.exp(x) ], weight= 52
Operation  100 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  101 : [ tf.math.log(x) ], weight= 52
Operation  102 : [ tf.math.reciprocal(x) ], weight= 52
Operation  103 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  104 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  105 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  106 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  107 : [ tf.round(x) ], weight= 52
Operation  108 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  120 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  121 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  123 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'in1':
tf.Tensor([1 0 1 1 0], shape=(5,), dtype=int32)

Output:
tf.Tensor([ True False  True  True False], shape=(5,), dtype=bool)

Constants: [0, 1, -1, True, False, 5]

Description: cast a tensor

Searching...

Found solution: tf.cast(in1, tf.bool)

Solution was found in 0.0 seconds:
tf.cast(in1, tf.bool)
tf.cast(in1, tf.bool)
Reordered weights:
Operation  0 : [ PairCreationOperation ], weight= 15
Operation  1 : [ tf.add(x, y) ], weight= 16
Operation  2 : [ tf.cast(x, dtype) ], weight= 16
Operation  3 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  4 : [ tf.multiply(x, y) ], weight= 18
Operation  5 : [ tf.reduce_max(input_tensor) ], weight= 18
Operation  6 : [ tf.reduce_sum(input_tensor) ], weight= 18
Operation  7 : [ tf.reduce_sum(input_tensor, axis) ], weight= 18
Operation  8 : [ tf.tensordot(a, b, axes) ], weight= 18
Operation  9 : [ tf.transpose(a) ], weight= 18
Operation  10 : [ SingletonTupleCreationOperation ], weight= 20
Operation  11 : [ tf.boolean_mask(tensor, mask) ], weight= 21
Operation  12 : [ tf.divide(x, y) ], weight= 21
Operation  13 : [ tf.range(start) ], weight= 21
Operation  14 : [ tf.subtract(x, y) ], weight= 21
Operation  15 : [ tf.constant(value) ], weight= 23
Operation  16 : [ tf.squeeze(input, axis) ], weight= 23
Operation  17 : [ tf.constant(value, dtype) ], weight= 24
Operation  18 : [ tf.equal(x, y) ], weight= 24
Operation  19 : [ tf.gather(params, indices) ], weight= 24
Operation  20 : [ tf.greater(x, y) ], weight= 24
Operation  21 : [ tf.matmul(a, b) ], weight= 24
Operation  22 : [ tf.maximum(x, y) ], weight= 24
Operation  23 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  24 : [ tf.where(condition) ], weight= 24
Operation  25 : [ tf.where(condition, x, y) ], weight= 24
Operation  26 : [ SlicingAxis0BothOperation ], weight= 27
Operation  27 : [ SlicingAxis0LeftOperation ], weight= 27
Operation  28 : [ SlicingAxis1BothOperation ], weight= 27
Operation  29 : [ SlicingAxis1LeftOperation ], weight= 27
Operation  30 : [ SlicingAxis1RightOperation ], weight= 27
Operation  31 : [ TripleCreationOperation ], weight= 27
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.squeeze(input) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.argsort(values, axis, stable=True) ], weight= 30
Operation  39 : [ tf.reduce_mean(input_tensor, axis) ], weight= 30
Operation  40 : [ tf.argmax(input, axis) ], weight= 32
Operation  41 : [ tf.greater_equal(x, y) ], weight= 32
Operation  42 : [ tf.minimum(x, y) ], weight= 32
Operation  43 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  44 : [ tf.zeros_like(input) ], weight= 32
Operation  45 : [ IndexingAxis1Operation ], weight= 32
Operation  46 : [ IndexingOperation ], weight= 32
Operation  47 : [ tf.add_n(inputs) ], weight= 33
Operation  48 : [ tf.math.cumsum(x, axis) ], weight= 33
Operation  49 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 36
Operation  50 : [ tf.concat(values, axis) ], weight= 36
Operation  51 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  52 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 36
Operation  53 : [ tf.ones_like(input) ], weight= 36
Operation  54 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  55 : [ tf.shape(input) ], weight= 36
Operation  56 : [ tf.stack(values, axis) ], weight= 36
Operation  57 : [ tf.unique_with_counts(x) ], weight= 36
Operation  58 : [ SlicingAxis0RightOperation ], weight= 36
Operation  59 : [ tf.math.reciprocal(x) ], weight= 39
Operation  60 : [ tf.sort(values, axis) ], weight= 39
Operation  61 : [ tf.abs(x) ], weight= 40
Operation  62 : [ tf.eye(num_rows) ], weight= 40
Operation  63 : [ tf.fill(dims, value) ], weight= 40
Operation  64 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  65 : [ tf.math.bincount(arr) ], weight= 40
Operation  66 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  67 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  68 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  69 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  70 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  71 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  73 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  74 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  75 : [ tf.unstack(value, axis) ], weight= 40
Operation  76 : [ tf.zeros(shape) ], weight= 40
Operation  77 : [ tf.range(start, limit, delta) ], weight= 42
Operation  78 : [ tf.sqrt(x) ], weight= 42
Operation  79 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  80 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  81 : [ tf.math.ceil(x) ], weight= 44
Operation  82 : [ tf.math.floor(x) ], weight= 44
Operation  83 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  84 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  85 : [ tf.not_equal(x, y) ], weight= 44
Operation  86 : [ tf.ones(shape) ], weight= 44
Operation  87 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  88 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  89 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  90 : [ tf.transpose(a, perm) ], weight= 44
Operation  91 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 45
Operation  92 : [ tf.argmin(input, axis) ], weight= 48
Operation  93 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  94 : [ tf.math.logical_not(x) ], weight= 48
Operation  95 : [ tf.math.negative(x) ], weight= 48
Operation  96 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  97 : [ tf.math.top_k(input, k) ], weight= 48
Operation  98 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  99 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  100 : [ tf.sign(x) ], weight= 48
Operation  101 : [ tf.exp(x) ], weight= 52
Operation  102 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  103 : [ tf.math.log(x) ], weight= 52
Operation  104 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  105 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  106 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  107 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  108 : [ tf.round(x) ], weight= 52
Operation  109 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  110 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  111 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  112 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  113 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  114 : [ tf.repeat(input, repeats) ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  116 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  120 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  121 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  123 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'in1':
tf.Tensor(
[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71
 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95
 96 97 98 99], shape=(100,), dtype=int32)

Input 'in2':
tf.Tensor([1000 2000 3000 4000 5000], shape=(5,), dtype=int32)

Output:
tf.Tensor(
[[1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013
  1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027
  1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041
  1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055
  1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069
  1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083
  1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097
  1098 1099]
 [2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013
  2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027
  2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041
  2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055
  2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069
  2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083
  2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097
  2098 2099]
 [3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013
  3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027
  3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041
  3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055
  3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069
  3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083
  3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097
  3098 3099]
 [4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013
  4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027
  4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 4041
  4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055
  4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069
  4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083
  4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097
  4098 4099]
 [5000 5001 5002 5003 5004 5005 5006 5007 5008 5009 5010 5011 5012 5013
  5014 5015 5016 5017 5018 5019 5020 5021 5022 5023 5024 5025 5026 5027
  5028 5029 5030 5031 5032 5033 5034 5035 5036 5037 5038 5039 5040 5041
  5042 5043 5044 5045 5046 5047 5048 5049 5050 5051 5052 5053 5054 5055
  5056 5057 5058 5059 5060 5061 5062 5063 5064 5065 5066 5067 5068 5069
  5070 5071 5072 5073 5074 5075 5076 5077 5078 5079 5080 5081 5082 5083
  5084 5085 5086 5087 5088 5089 5090 5091 5092 5093 5094 5095 5096 5097
  5098 5099]], shape=(5, 100), dtype=int32)

Constants: [0, 1, -1, True, False, 5, 100]

Description: Add two tensors

Searching...

Found solution: tf.add(in1, tf.expand_dims(in2, 1))

Solution was found in 0.5 seconds:
tf.add(in1, tf.expand_dims(in2, 1))
tf.add(in1, tf.expand_dims(in2, 1))
Reordered weights:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 14
Operation  1 : [ PairCreationOperation ], weight= 15
Operation  2 : [ tf.add(x, y) ], weight= 16
Operation  3 : [ tf.cast(x, dtype) ], weight= 16
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 18
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.subtract(x, y) ], weight= 21
Operation  7 : [ tf.constant(value) ], weight= 23
Operation  8 : [ tf.squeeze(input, axis) ], weight= 23
Operation  9 : [ tf.constant(value, dtype) ], weight= 24
Operation  10 : [ tf.equal(x, y) ], weight= 24
Operation  11 : [ tf.gather(params, indices) ], weight= 24
Operation  12 : [ tf.greater(x, y) ], weight= 24
Operation  13 : [ tf.matmul(a, b) ], weight= 24
Operation  14 : [ tf.maximum(x, y) ], weight= 24
Operation  15 : [ tf.multiply(x, y) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.transpose(a) ], weight= 24
Operation  21 : [ tf.where(condition) ], weight= 24
Operation  22 : [ tf.where(condition, x, y) ], weight= 24
Operation  23 : [ TripleCreationOperation ], weight= 27
Operation  24 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  25 : [ tf.divide(x, y) ], weight= 28
Operation  26 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  27 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  28 : [ tf.range(start) ], weight= 28
Operation  29 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  30 : [ tf.square(x) ], weight= 28
Operation  31 : [ tf.tile(input, multiples) ], weight= 28
Operation  32 : [ tf.argmax(input, axis) ], weight= 32
Operation  33 : [ tf.greater_equal(x, y) ], weight= 32
Operation  34 : [ tf.minimum(x, y) ], weight= 32
Operation  35 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  36 : [ tf.zeros_like(input) ], weight= 32
Operation  37 : [ IndexingAxis1Operation ], weight= 32
Operation  38 : [ IndexingOperation ], weight= 32
Operation  39 : [ tf.add_n(inputs) ], weight= 33
Operation  40 : [ tf.concat(values, axis) ], weight= 36
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  71 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.exp(x) ], weight= 52
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.log(x) ], weight= 52
Operation  101 : [ tf.math.reciprocal(x) ], weight= 52
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.sort(values, axis) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.range(start, limit, delta) ], weight= 56
Operation  114 : [ tf.repeat(input, repeats) ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([3 4 5], shape=(3,), dtype=int32)

Input 'in2':
tf.Tensor([10 20 30], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[13 14 15]
 [23 24 25]
 [33 34 35]], shape=(3, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3]

Description: Add two tensors with broadcasting

Searching...

Found solution: tf.add(in1, tf.expand_dims(in2, 1))

Solution was found in 0.2 seconds:
tf.add(in1, tf.expand_dims(in2, 1))
tf.add(in1, tf.expand_dims(in2, 1))
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 9
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ tf.reduce_max(input_tensor) ], weight= 18
Operation  3 : [ tf.reduce_max(input_tensor, axis) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.range(start) ], weight= 21
Operation  7 : [ tf.constant(value) ], weight= 23
Operation  8 : [ tf.squeeze(input, axis) ], weight= 23
Operation  9 : [ tf.constant(value, dtype) ], weight= 24
Operation  10 : [ tf.equal(x, y) ], weight= 24
Operation  11 : [ tf.gather(params, indices) ], weight= 24
Operation  12 : [ tf.greater(x, y) ], weight= 24
Operation  13 : [ tf.matmul(a, b) ], weight= 24
Operation  14 : [ tf.maximum(x, y) ], weight= 24
Operation  15 : [ tf.multiply(x, y) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  19 : [ tf.transpose(a) ], weight= 24
Operation  20 : [ tf.where(condition) ], weight= 24
Operation  21 : [ tf.where(condition, x, y) ], weight= 24
Operation  22 : [ tf.add(x, y) ], weight= 28
Operation  23 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  24 : [ tf.divide(x, y) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  26 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.concat(values, axis) ], weight= 36
Operation  39 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  40 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.sort(values, axis) ], weight= 39
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.exp(x) ], weight= 52
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.log(x) ], weight= 52
Operation  101 : [ tf.math.reciprocal(x) ], weight= 52
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([12 34 56], shape=(3,), dtype=int32)

Output:
tf.Tensor([12. 34. 56.], shape=(3,), dtype=float32)

Constants: [0, 1, -1, True, False, 3]

Description: Cast an int tensor into a float tensor

Searching...

Found solution: tf.cast(in1, tf.float32)

Solution was found in 0.0 seconds:
tf.cast(in1, tf.float32)
tf.cast(in1, tf.float32)
Reordered weights:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 14
Operation  1 : [ tf.cast(x, dtype) ], weight= 16
Operation  2 : [ tf.constant(value) ], weight= 17
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 18
Operation  4 : [ tf.reduce_sum(input_tensor) ], weight= 18
Operation  5 : [ IndexingOperation ], weight= 18
Operation  6 : [ PairCreationOperation ], weight= 20
Operation  7 : [ SingletonTupleCreationOperation ], weight= 20
Operation  8 : [ tf.squeeze(input, axis) ], weight= 23
Operation  9 : [ tf.constant(value, dtype) ], weight= 24
Operation  10 : [ tf.equal(x, y) ], weight= 24
Operation  11 : [ tf.gather(params, indices) ], weight= 24
Operation  12 : [ tf.greater(x, y) ], weight= 24
Operation  13 : [ tf.matmul(a, b) ], weight= 24
Operation  14 : [ tf.maximum(x, y) ], weight= 24
Operation  15 : [ tf.multiply(x, y) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  19 : [ tf.transpose(a) ], weight= 24
Operation  20 : [ tf.where(condition) ], weight= 24
Operation  21 : [ tf.where(condition, x, y) ], weight= 24
Operation  22 : [ IndexingAxis1Operation ], weight= 24
Operation  23 : [ tf.add(x, y) ], weight= 28
Operation  24 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  25 : [ tf.divide(x, y) ], weight= 28
Operation  26 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  27 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  28 : [ tf.range(start) ], weight= 28
Operation  29 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  30 : [ tf.square(x) ], weight= 28
Operation  31 : [ tf.subtract(x, y) ], weight= 28
Operation  32 : [ tf.tile(input, multiples) ], weight= 28
Operation  33 : [ tf.reduce_mean(input_tensor) ], weight= 30
Operation  34 : [ tf.reduce_min(input_tensor) ], weight= 30
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.greater_equal(x, y) ], weight= 32
Operation  37 : [ tf.minimum(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 33
Operation  41 : [ tf.concat(values, axis) ], weight= 36
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([12 34 56 78], shape=(4,), dtype=int32)

Input 'in2':
-2

Output:
tf.Tensor(56, shape=(), dtype=int32)

Constants: [0, 1, -1, True, False, 4]

Description: Index into a tensor

Searching...

Found solution: in1[in2]

Solution was found in 0.1 seconds:
in1[in2]
in1[in2]
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.constant(value) ], weight= 17
Operation  2 : [ tf.constant(value, dtype) ], weight= 18
Operation  3 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  4 : [ tf.gather(params, indices) ], weight= 18
Operation  5 : [ tf.maximum(x, y) ], weight= 18
Operation  6 : [ tf.reduce_max(input_tensor) ], weight= 18
Operation  7 : [ tf.reduce_max(input_tensor, axis) ], weight= 18
Operation  8 : [ tf.reduce_sum(input_tensor) ], weight= 18
Operation  9 : [ tf.tensordot(a, b, axes) ], weight= 18
Operation  10 : [ PairCreationOperation ], weight= 20
Operation  11 : [ SingletonTupleCreationOperation ], weight= 20
Operation  12 : [ tf.gather_nd(params, indices) ], weight= 21
Operation  13 : [ tf.tile(input, multiples) ], weight= 21
Operation  14 : [ tf.squeeze(input, axis) ], weight= 23
Operation  15 : [ tf.equal(x, y) ], weight= 24
Operation  16 : [ tf.greater(x, y) ], weight= 24
Operation  17 : [ tf.matmul(a, b) ], weight= 24
Operation  18 : [ tf.multiply(x, y) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.transpose(a) ], weight= 24
Operation  21 : [ tf.where(condition) ], weight= 24
Operation  22 : [ tf.where(condition, x, y) ], weight= 24
Operation  23 : [ IndexingOperation ], weight= 24
Operation  24 : [ SlicingAxis0BothOperation ], weight= 27
Operation  25 : [ SlicingAxis0LeftOperation ], weight= 27
Operation  26 : [ SlicingAxis0RightOperation ], weight= 27
Operation  27 : [ tf.add(x, y) ], weight= 28
Operation  28 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  29 : [ tf.divide(x, y) ], weight= 28
Operation  30 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  31 : [ tf.range(start) ], weight= 28
Operation  32 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.subtract(x, y) ], weight= 28
Operation  35 : [ tf.math.segment_max(data, segment_ids) ], weight= 30
Operation  36 : [ tf.math.segment_sum(data, segment_ids) ], weight= 30
Operation  37 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  38 : [ tf.reduce_mean(input_tensor) ], weight= 30
Operation  39 : [ tf.reduce_min(input_tensor) ], weight= 30
Operation  40 : [ tf.argmax(input, axis) ], weight= 32
Operation  41 : [ tf.greater_equal(x, y) ], weight= 32
Operation  42 : [ tf.minimum(x, y) ], weight= 32
Operation  43 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 32
Operation  44 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 32
Operation  45 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  46 : [ tf.zeros_like(input) ], weight= 32
Operation  47 : [ IndexingAxis1Operation ], weight= 32
Operation  48 : [ tf.concat(values, axis) ], weight= 36
Operation  49 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  50 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  51 : [ tf.ones_like(input) ], weight= 36
Operation  52 : [ tf.shape(input) ], weight= 36
Operation  53 : [ tf.stack(values, axis) ], weight= 36
Operation  54 : [ SlicingAxis1BothOperation ], weight= 36
Operation  55 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  56 : [ SlicingAxis1RightOperation ], weight= 36
Operation  57 : [ TripleCreationOperation ], weight= 36
Operation  58 : [ tf.squeeze(input) ], weight= 38
Operation  59 : [ tf.abs(x) ], weight= 40
Operation  60 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  61 : [ tf.eye(num_rows) ], weight= 40
Operation  62 : [ tf.fill(dims, value) ], weight= 40
Operation  63 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  64 : [ tf.math.bincount(arr) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.math.segment_mean(data, segment_ids) ], weight= 42
Operation  73 : [ tf.add_n(inputs) ], weight= 44
Operation  74 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  80 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  81 : [ tf.not_equal(x, y) ], weight= 44
Operation  82 : [ tf.ones(shape) ], weight= 44
Operation  83 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  84 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  85 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  86 : [ tf.transpose(a, perm) ], weight= 44
Operation  87 : [ tf.argmin(input, axis) ], weight= 48
Operation  88 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  89 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  90 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  91 : [ tf.math.logical_not(x) ], weight= 48
Operation  92 : [ tf.math.negative(x) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.exp(x) ], weight= 52
Operation  100 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  101 : [ tf.math.log(x) ], weight= 52
Operation  102 : [ tf.math.reciprocal(x) ], weight= 52
Operation  103 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  104 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  105 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  106 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  107 : [ tf.round(x) ], weight= 52
Operation  108 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  109 : [ tf.sort(values, axis) ], weight= 52
Operation  110 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  111 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.range(start, limit, delta) ], weight= 56
Operation  114 : [ tf.repeat(input, repeats) ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'ones':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Input 'hundreds':
tf.Tensor([100 200 300], shape=(3,), dtype=int32)

Output:
tf.Tensor(10, shape=(), dtype=int32)

Constants: [1, 10, 100, 0, -1, True, False, 3, 5]

Description: find the right constant

Searching...

Found solution: tf.cast(tf.reduce_sum(tf.divide(tf.tensordot(ones, tens, 1), hundreds)), tf.int32)

Solution was found in 21.1 seconds:
tf.cast(tf.reduce_sum(tf.divide(tf.tensordot(ones, tens, 1), hundreds)), tf.int32)
tf.constant(10)
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ tf.maximum(x, y) ], weight= 18
Operation  3 : [ tf.multiply(x, y) ], weight= 18
Operation  4 : [ tf.reduce_max(input_tensor) ], weight= 18
Operation  5 : [ PairCreationOperation ], weight= 20
Operation  6 : [ SingletonTupleCreationOperation ], weight= 20
Operation  7 : [ tf.add(x, y) ], weight= 21
Operation  8 : [ tf.gather_nd(params, indices) ], weight= 21
Operation  9 : [ tf.constant(value) ], weight= 23
Operation  10 : [ tf.squeeze(input, axis) ], weight= 23
Operation  11 : [ tf.constant(value, dtype) ], weight= 24
Operation  12 : [ tf.equal(x, y) ], weight= 24
Operation  13 : [ tf.gather(params, indices) ], weight= 24
Operation  14 : [ tf.greater(x, y) ], weight= 24
Operation  15 : [ tf.matmul(a, b) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  19 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  20 : [ tf.transpose(a) ], weight= 24
Operation  21 : [ tf.where(condition) ], weight= 24
Operation  22 : [ tf.where(condition, x, y) ], weight= 24
Operation  23 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  24 : [ tf.divide(x, y) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  32 : [ tf.argmax(input, axis) ], weight= 32
Operation  33 : [ tf.greater_equal(x, y) ], weight= 32
Operation  34 : [ tf.minimum(x, y) ], weight= 32
Operation  35 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 32
Operation  36 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  37 : [ tf.zeros_like(input) ], weight= 32
Operation  38 : [ IndexingAxis1Operation ], weight= 32
Operation  39 : [ IndexingOperation ], weight= 32
Operation  40 : [ tf.concat(values, axis) ], weight= 36
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.abs(x) ], weight= 40
Operation  54 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  55 : [ tf.eye(num_rows) ], weight= 40
Operation  56 : [ tf.fill(dims, value) ], weight= 40
Operation  57 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  58 : [ tf.math.bincount(arr) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.exp(x) ], weight= 52
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.log(x) ], weight= 52
Operation  101 : [ tf.math.reciprocal(x) ], weight= 52
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.sort(values, axis) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.range(start, limit, delta) ], weight= 56
Operation  114 : [ tf.repeat(input, repeats) ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'ones':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Input 'hundreds':
tf.Tensor([100 200 300], shape=(3,), dtype=int32)

Output:
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Constants: [999, 0, 1, -1, True, False, 3, 5]

Description: find the right input variable

Searching...

WARNING: The output is the same as the input or constant `tens`. Check that your input-output example is correct.

Could not find solution within 300 seconds.
tens
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.constant(value) ], weight= 17
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.maximum(x, y) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.range(start) ], weight= 21
Operation  7 : [ tf.squeeze(input, axis) ], weight= 23
Operation  8 : [ tf.constant(value, dtype) ], weight= 24
Operation  9 : [ tf.equal(x, y) ], weight= 24
Operation  10 : [ tf.gather(params, indices) ], weight= 24
Operation  11 : [ tf.greater(x, y) ], weight= 24
Operation  12 : [ tf.matmul(a, b) ], weight= 24
Operation  13 : [ tf.multiply(x, y) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  15 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  19 : [ tf.transpose(a) ], weight= 24
Operation  20 : [ tf.where(condition) ], weight= 24
Operation  21 : [ tf.where(condition, x, y) ], weight= 24
Operation  22 : [ tf.add(x, y) ], weight= 28
Operation  23 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  24 : [ tf.divide(x, y) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  26 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.math.bincount(arr) ], weight= 30
Operation  32 : [ tf.argmax(input, axis) ], weight= 32
Operation  33 : [ tf.greater_equal(x, y) ], weight= 32
Operation  34 : [ tf.minimum(x, y) ], weight= 32
Operation  35 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 32
Operation  36 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  37 : [ tf.zeros_like(input) ], weight= 32
Operation  38 : [ IndexingAxis1Operation ], weight= 32
Operation  39 : [ IndexingOperation ], weight= 32
Operation  40 : [ tf.concat(values, axis) ], weight= 36
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.reverse(tensor, axis) ], weight= 36
Operation  45 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.sort(values, axis) ], weight= 39
Operation  57 : [ tf.abs(x) ], weight= 40
Operation  58 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  59 : [ tf.eye(num_rows) ], weight= 40
Operation  60 : [ tf.fill(dims, value) ], weight= 40
Operation  61 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  62 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.unstack(value, axis) ], weight= 40
Operation  73 : [ tf.zeros(shape) ], weight= 40
Operation  74 : [ tf.range(start, limit, delta) ], weight= 42
Operation  75 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  76 : [ tf.add_n(inputs) ], weight= 44
Operation  77 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  78 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  79 : [ tf.math.ceil(x) ], weight= 44
Operation  80 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  81 : [ tf.math.floor(x) ], weight= 44
Operation  82 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  83 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  84 : [ tf.not_equal(x, y) ], weight= 44
Operation  85 : [ tf.ones(shape) ], weight= 44
Operation  86 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  87 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  88 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  89 : [ tf.transpose(a, perm) ], weight= 44
Operation  90 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 45
Operation  91 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 45
Operation  92 : [ tf.argmin(input, axis) ], weight= 48
Operation  93 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  94 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  95 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  96 : [ tf.math.logical_not(x) ], weight= 48
Operation  97 : [ tf.math.negative(x) ], weight= 48
Operation  98 : [ tf.math.top_k(input, k) ], weight= 48
Operation  99 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  100 : [ tf.sign(x) ], weight= 48
Operation  101 : [ tf.unique_with_counts(x) ], weight= 48
Operation  102 : [ tf.exp(x) ], weight= 52
Operation  103 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  104 : [ tf.math.log(x) ], weight= 52
Operation  105 : [ tf.math.reciprocal(x) ], weight= 52
Operation  106 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  107 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  108 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  109 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  110 : [ tf.round(x) ], weight= 52
Operation  111 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  112 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  113 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  114 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  115 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  116 : [ tf.repeat(input, repeats) ], weight= 56
Operation  117 : [ tf.sqrt(x) ], weight= 56
Operation  118 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  119 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  120 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  121 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  123 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'tens':
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Output:
tf.Tensor([10 20 30 40 50], shape=(5,), dtype=int32)

Constants: [999, 0, 1, -1, True, False, 5]

Description: find the right input variable

Searching...

WARNING: The output is the same as the input or constant `tens`. Check that your input-output example is correct.

Found solution: tens

Solution was found in 0.0 seconds:
tens
tens
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.constant(value) ], weight= 17
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.reduce_max(input_tensor, axis) ], weight= 18
Operation  4 : [ IndexingAxis1Operation ], weight= 18
Operation  5 : [ PairCreationOperation ], weight= 20
Operation  6 : [ SingletonTupleCreationOperation ], weight= 20
Operation  7 : [ tf.squeeze(input, axis) ], weight= 23
Operation  8 : [ tf.constant(value, dtype) ], weight= 24
Operation  9 : [ tf.equal(x, y) ], weight= 24
Operation  10 : [ tf.gather(params, indices) ], weight= 24
Operation  11 : [ tf.greater(x, y) ], weight= 24
Operation  12 : [ tf.matmul(a, b) ], weight= 24
Operation  13 : [ tf.maximum(x, y) ], weight= 24
Operation  14 : [ tf.multiply(x, y) ], weight= 24
Operation  15 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  19 : [ tf.transpose(a) ], weight= 24
Operation  20 : [ tf.where(condition) ], weight= 24
Operation  21 : [ tf.where(condition, x, y) ], weight= 24
Operation  22 : [ SlicingAxis1BothOperation ], weight= 27
Operation  23 : [ SlicingAxis1LeftOperation ], weight= 27
Operation  24 : [ SlicingAxis1RightOperation ], weight= 27
Operation  25 : [ tf.add(x, y) ], weight= 28
Operation  26 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  27 : [ tf.divide(x, y) ], weight= 28
Operation  28 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  29 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  30 : [ tf.range(start) ], weight= 28
Operation  31 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  32 : [ tf.square(x) ], weight= 28
Operation  33 : [ tf.subtract(x, y) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 30
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[12 34 56 78]
 [-1 -2 -3 -4]], shape=(2, 4), dtype=int32)

Input 'in2':
-1

Output:
tf.Tensor(
[[34 56]
 [-2 -3]], shape=(2, 2), dtype=int32)

Constants: [0, 1, True, False, 2, 4]

Description: Slice a tensor

Searching...

Found solution: in1[:, 1:in2]

Solution was found in 0.2 seconds:
in1[:, 1:in2]
in1[:, 1:in2]
Reordered weights:
Operation  0 : [ tf.sparse.from_dense(tensor) ], weight= 11
Operation  1 : [ tf.sparse.to_dense(sp_input) ], weight= 11
Operation  2 : [ tf.cast(x, dtype) ], weight= 16
Operation  3 : [ tf.constant(value) ], weight= 17
Operation  4 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  5 : [ tf.matmul(a, b) ], weight= 18
Operation  6 : [ tf.multiply(x, y) ], weight= 18
Operation  7 : [ tf.reduce_max(input_tensor) ], weight= 18
Operation  8 : [ tf.sparse.add(a, b) ], weight= 18
Operation  9 : [ tf.sparse.expand_dims(sp_input, axis) ], weight= 18
Operation  10 : [ tf.SparseTensor(indices, values, dense_shape) ], weight= 20
Operation  11 : [ tf.sparse.to_dense(sp_input, default_value) ], weight= 20
Operation  12 : [ PairCreationOperation ], weight= 20
Operation  13 : [ SingletonTupleCreationOperation ], weight= 20
Operation  14 : [ tf.add(x, y) ], weight= 21
Operation  15 : [ tf.subtract(x, y) ], weight= 21
Operation  16 : [ tf.sparse.reduce_max(sp_input, axis, output_is_sparse) ], weight= 21
Operation  17 : [ tf.sparse.reduce_sum(sp_input, axis, output_is_sparse) ], weight= 21
Operation  18 : [ tf.squeeze(input, axis) ], weight= 23
Operation  19 : [ tf.constant(value, dtype) ], weight= 24
Operation  20 : [ tf.equal(x, y) ], weight= 24
Operation  21 : [ tf.gather(params, indices) ], weight= 24
Operation  22 : [ tf.greater(x, y) ], weight= 24
Operation  23 : [ tf.maximum(x, y) ], weight= 24
Operation  24 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  25 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  26 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  27 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  28 : [ tf.transpose(a) ], weight= 24
Operation  29 : [ tf.where(condition) ], weight= 24
Operation  30 : [ tf.where(condition, x, y) ], weight= 24
Operation  31 : [ tf.sparse.maximum(sp_a, sp_b) ], weight= 24
Operation  32 : [ tf.sparse.slice(sp_input, start, size) ], weight= 24
Operation  33 : [ tf.sparse.retain(sp_input, to_retain) ], weight= 27
Operation  34 : [ tf.sparse.transpose(sp_input) ], weight= 27
Operation  35 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  36 : [ tf.divide(x, y) ], weight= 28
Operation  37 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  38 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  39 : [ tf.range(start) ], weight= 28
Operation  40 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  41 : [ tf.square(x) ], weight= 28
Operation  42 : [ tf.tile(input, multiples) ], weight= 28
Operation  43 : [ tf.reduce_min(input_tensor) ], weight= 30
Operation  44 : [ tf.sparse.minimum(sp_a, sp_b) ], weight= 30
Operation  45 : [ tf.argmax(input, axis) ], weight= 32
Operation  46 : [ tf.greater_equal(x, y) ], weight= 32
Operation  47 : [ tf.minimum(x, y) ], weight= 32
Operation  48 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  49 : [ tf.zeros_like(input) ], weight= 32
Operation  50 : [ tf.sparse.split(sp_input, num_split, axis) ], weight= 32
Operation  51 : [ IndexingAxis1Operation ], weight= 32
Operation  52 : [ IndexingOperation ], weight= 32
Operation  53 : [ tf.math.cumsum(x, axis) ], weight= 33
Operation  54 : [ tf.concat(values, axis) ], weight= 36
Operation  55 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  56 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  57 : [ tf.ones_like(input) ], weight= 36
Operation  58 : [ tf.shape(input) ], weight= 36
Operation  59 : [ tf.stack(values, axis) ], weight= 36
Operation  60 : [ SlicingAxis0BothOperation ], weight= 36
Operation  61 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  62 : [ SlicingAxis0RightOperation ], weight= 36
Operation  63 : [ SlicingAxis1BothOperation ], weight= 36
Operation  64 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  65 : [ SlicingAxis1RightOperation ], weight= 36
Operation  66 : [ TripleCreationOperation ], weight= 36
Operation  67 : [ tf.squeeze(input) ], weight= 38
Operation  68 : [ tf.abs(x) ], weight= 40
Operation  69 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  70 : [ tf.eye(num_rows) ], weight= 40
Operation  71 : [ tf.fill(dims, value) ], weight= 40
Operation  72 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  73 : [ tf.math.bincount(arr) ], weight= 40
Operation  74 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  75 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  76 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  77 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  78 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  79 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  80 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  81 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  82 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  83 : [ tf.unstack(value, axis) ], weight= 40
Operation  84 : [ tf.zeros(shape) ], weight= 40
Operation  85 : [ tf.sparse.concat(axis, sp_inputs) ], weight= 40
Operation  86 : [ tf.sparse.reset_shape(sp_input) ], weight= 40
Operation  87 : [ tf.sparse.reshape(sp_input, shape) ], weight= 40
Operation  88 : [ tf.math.segment_mean(data, segment_ids) ], weight= 42
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  90 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  91 : [ tf.sparse.transpose(sp_input, perm) ], weight= 42
Operation  92 : [ tf.add_n(inputs) ], weight= 44
Operation  93 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  94 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  95 : [ tf.math.ceil(x) ], weight= 44
Operation  96 : [ tf.math.floor(x) ], weight= 44
Operation  97 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  98 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  99 : [ tf.not_equal(x, y) ], weight= 44
Operation  100 : [ tf.ones(shape) ], weight= 44
Operation  101 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  102 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  103 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  104 : [ tf.transpose(a, perm) ], weight= 44
Operation  105 : [ tf.sparse.to_indicator(sp_input, vocab_size) ], weight= 44
Operation  106 : [ tf.argmin(input, axis) ], weight= 48
Operation  107 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  108 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  109 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  110 : [ tf.math.logical_not(x) ], weight= 48
Operation  111 : [ tf.math.negative(x) ], weight= 48
Operation  112 : [ tf.math.top_k(input, k) ], weight= 48
Operation  113 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  114 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  115 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  116 : [ tf.sign(x) ], weight= 48
Operation  117 : [ tf.unique_with_counts(x) ], weight= 48
Operation  118 : [ tf.exp(x) ], weight= 52
Operation  119 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  120 : [ tf.math.log(x) ], weight= 52
Operation  121 : [ tf.math.reciprocal(x) ], weight= 52
Operation  122 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  123 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  124 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  125 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  126 : [ tf.round(x) ], weight= 52
Operation  127 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  128 : [ tf.sort(values, axis) ], weight= 52
Operation  129 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  130 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  131 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  132 : [ tf.range(start, limit, delta) ], weight= 56
Operation  133 : [ tf.repeat(input, repeats) ], weight= 56
Operation  134 : [ tf.sqrt(x) ], weight= 56
Operation  135 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  136 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  137 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  138 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  139 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  140 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  141 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  142 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]], shape=(2, 2), dtype=int64), values=tf.Tensor([12 34], shape=(2,), dtype=int32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Input 'in2':
tf.Tensor(
[[-3  0]
 [-5  0]], shape=(2, 2), dtype=int32)

Output:
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]
 [1 0]], shape=(3, 2), dtype=int64), values=tf.Tensor([ 9 34 -5], shape=(3,), dtype=int32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Constants: [0, 1, -1, True, False, 2]

Description: Add sparse tensor with dense tensor

Searching...

Found solution: tf.sparse.add(in1, tf.sparse.from_dense(in2))

Solution was found in 0.2 seconds:
tf.sparse.add(in1, tf.sparse.from_dense(in2))
tf.sparse.add(in1, tf.sparse.from_dense(in2))
Reordered weights:
Operation  0 : [ tf.sparse.from_dense(tensor) ], weight= 11
Operation  1 : [ tf.reduce_sum(input_tensor, axis) ], weight= 14
Operation  2 : [ tf.SparseTensor(indices, values, dense_shape) ], weight= 15
Operation  3 : [ tf.sparse.to_dense(sp_input) ], weight= 15
Operation  4 : [ tf.cast(x, dtype) ], weight= 16
Operation  5 : [ tf.sparse.reduce_max(sp_input, axis, output_is_sparse) ], weight= 16
Operation  6 : [ tf.sparse.reduce_sum(sp_input, axis, output_is_sparse) ], weight= 16
Operation  7 : [ tf.constant(value) ], weight= 17
Operation  8 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  9 : [ tf.reduce_max(input_tensor, axis) ], weight= 18
Operation  10 : [ tf.reduce_sum(input_tensor) ], weight= 18
Operation  11 : [ tf.sparse.expand_dims(sp_input, axis) ], weight= 18
Operation  12 : [ PairCreationOperation ], weight= 20
Operation  13 : [ SingletonTupleCreationOperation ], weight= 20
Operation  14 : [ tf.squeeze(input, axis) ], weight= 23
Operation  15 : [ tf.constant(value, dtype) ], weight= 24
Operation  16 : [ tf.equal(x, y) ], weight= 24
Operation  17 : [ tf.gather(params, indices) ], weight= 24
Operation  18 : [ tf.greater(x, y) ], weight= 24
Operation  19 : [ tf.matmul(a, b) ], weight= 24
Operation  20 : [ tf.maximum(x, y) ], weight= 24
Operation  21 : [ tf.multiply(x, y) ], weight= 24
Operation  22 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  23 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  24 : [ tf.transpose(a) ], weight= 24
Operation  25 : [ tf.where(condition) ], weight= 24
Operation  26 : [ tf.where(condition, x, y) ], weight= 24
Operation  27 : [ tf.sparse.add(a, b) ], weight= 24
Operation  28 : [ tf.sparse.maximum(sp_a, sp_b) ], weight= 24
Operation  29 : [ tf.sparse.slice(sp_input, start, size) ], weight= 24
Operation  30 : [ IndexingAxis1Operation ], weight= 24
Operation  31 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 27
Operation  32 : [ tf.shape(input) ], weight= 27
Operation  33 : [ tf.sparse.retain(sp_input, to_retain) ], weight= 27
Operation  34 : [ tf.sparse.to_dense(sp_input, default_value) ], weight= 27
Operation  35 : [ tf.add(x, y) ], weight= 28
Operation  36 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  37 : [ tf.divide(x, y) ], weight= 28
Operation  38 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  39 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  40 : [ tf.range(start) ], weight= 28
Operation  41 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  42 : [ tf.square(x) ], weight= 28
Operation  43 : [ tf.subtract(x, y) ], weight= 28
Operation  44 : [ tf.tile(input, multiples) ], weight= 28
Operation  45 : [ tf.math.bincount(arr) ], weight= 30
Operation  46 : [ tf.reduce_mean(input_tensor, axis) ], weight= 30
Operation  47 : [ tf.reduce_min(input_tensor, axis) ], weight= 30
Operation  48 : [ tf.sparse.concat(axis, sp_inputs) ], weight= 30
Operation  49 : [ tf.sparse.minimum(sp_a, sp_b) ], weight= 30
Operation  50 : [ tf.sparse.reset_shape(sp_input) ], weight= 30
Operation  51 : [ tf.argmax(input, axis) ], weight= 32
Operation  52 : [ tf.greater_equal(x, y) ], weight= 32
Operation  53 : [ tf.minimum(x, y) ], weight= 32
Operation  54 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  55 : [ tf.zeros_like(input) ], weight= 32
Operation  56 : [ tf.sparse.split(sp_input, num_split, axis) ], weight= 32
Operation  57 : [ IndexingOperation ], weight= 32
Operation  58 : [ tf.math.cumsum(x, axis) ], weight= 33
Operation  59 : [ tf.sparse.to_indicator(sp_input, vocab_size) ], weight= 33
Operation  60 : [ tf.concat(values, axis) ], weight= 36
Operation  61 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 36
Operation  62 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  63 : [ tf.ones_like(input) ], weight= 36
Operation  64 : [ tf.stack(values, axis) ], weight= 36
Operation  65 : [ tf.sparse.transpose(sp_input) ], weight= 36
Operation  66 : [ SlicingAxis0BothOperation ], weight= 36
Operation  67 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  68 : [ SlicingAxis0RightOperation ], weight= 36
Operation  69 : [ SlicingAxis1BothOperation ], weight= 36
Operation  70 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  71 : [ SlicingAxis1RightOperation ], weight= 36
Operation  72 : [ TripleCreationOperation ], weight= 36
Operation  73 : [ tf.squeeze(input) ], weight= 38
Operation  74 : [ tf.reduce_prod(input_tensor, axis) ], weight= 39
Operation  75 : [ tf.abs(x) ], weight= 40
Operation  76 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  77 : [ tf.eye(num_rows) ], weight= 40
Operation  78 : [ tf.fill(dims, value) ], weight= 40
Operation  79 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  80 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  81 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  82 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  83 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  84 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  85 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  86 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  87 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  88 : [ tf.unstack(value, axis) ], weight= 40
Operation  89 : [ tf.zeros(shape) ], weight= 40
Operation  90 : [ tf.sparse.reshape(sp_input, shape) ], weight= 40
Operation  91 : [ tf.math.segment_mean(data, segment_ids) ], weight= 42
Operation  92 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  93 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  94 : [ tf.sparse.transpose(sp_input, perm) ], weight= 42
Operation  95 : [ tf.add_n(inputs) ], weight= 44
Operation  96 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  97 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  98 : [ tf.math.ceil(x) ], weight= 44
Operation  99 : [ tf.math.floor(x) ], weight= 44
Operation  100 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  101 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  102 : [ tf.not_equal(x, y) ], weight= 44
Operation  103 : [ tf.ones(shape) ], weight= 44
Operation  104 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  105 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  106 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  107 : [ tf.transpose(a, perm) ], weight= 44
Operation  108 : [ tf.argmin(input, axis) ], weight= 48
Operation  109 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  110 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  111 : [ tf.math.logical_not(x) ], weight= 48
Operation  112 : [ tf.math.negative(x) ], weight= 48
Operation  113 : [ tf.math.top_k(input, k) ], weight= 48
Operation  114 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  115 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  116 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  117 : [ tf.sign(x) ], weight= 48
Operation  118 : [ tf.unique_with_counts(x) ], weight= 48
Operation  119 : [ tf.exp(x) ], weight= 52
Operation  120 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  121 : [ tf.math.log(x) ], weight= 52
Operation  122 : [ tf.math.reciprocal(x) ], weight= 52
Operation  123 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  124 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  125 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  126 : [ tf.round(x) ], weight= 52
Operation  127 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  128 : [ tf.sort(values, axis) ], weight= 52
Operation  129 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  130 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  131 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  132 : [ tf.range(start, limit, delta) ], weight= 56
Operation  133 : [ tf.repeat(input, repeats) ], weight= 56
Operation  134 : [ tf.sqrt(x) ], weight= 56
Operation  135 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  136 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  137 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  138 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  139 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  140 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  141 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  142 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0]
 [0 1]
 [1 1]], shape=(3, 2), dtype=int64), values=tf.Tensor([12 34 56], shape=(3,), dtype=int32), dense_shape=tf.Tensor([2 2], shape=(2,), dtype=int64))

Output:
SparseTensor(indices=tf.Tensor(
[[0]
 [1]], shape=(2, 1), dtype=int64), values=tf.Tensor([46 56], shape=(2,), dtype=int32), dense_shape=tf.Tensor([2], shape=(1,), dtype=int64))

Constants: [0, 1, -1, True, False, 2]

Description: Reduce sum on a sparse tensor

Searching...

Found solution: tf.sparse.reduce_sum(in1, axis=1, output_is_sparse=True)

Solution was found in 0.1 seconds:
tf.sparse.reduce_sum(in1, axis=1, output_is_sparse=True)
tf.sparse.reduce_sum(in1, axis=1, output_is_sparse=True)
Reordered weights:
Operation  0 : [ tf.add(x, y) ], weight= 16
Operation  1 : [ tf.cast(x, dtype) ], weight= 16
Operation  2 : [ tf.constant(value) ], weight= 17
Operation  3 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  4 : [ tf.multiply(x, y) ], weight= 18
Operation  5 : [ tf.reduce_sum(input_tensor) ], weight= 18
Operation  6 : [ tf.tensordot(a, b, axes) ], weight= 18
Operation  7 : [ tf.where(condition) ], weight= 18
Operation  8 : [ tf.where(condition, x, y) ], weight= 18
Operation  9 : [ PairCreationOperation ], weight= 20
Operation  10 : [ SingletonTupleCreationOperation ], weight= 20
Operation  11 : [ tf.range(start) ], weight= 21
Operation  12 : [ tf.square(x) ], weight= 21
Operation  13 : [ tf.subtract(x, y) ], weight= 21
Operation  14 : [ tf.squeeze(input, axis) ], weight= 23
Operation  15 : [ tf.constant(value, dtype) ], weight= 24
Operation  16 : [ tf.equal(x, y) ], weight= 24
Operation  17 : [ tf.gather(params, indices) ], weight= 24
Operation  18 : [ tf.greater(x, y) ], weight= 24
Operation  19 : [ tf.matmul(a, b) ], weight= 24
Operation  20 : [ tf.maximum(x, y) ], weight= 24
Operation  21 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  22 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  23 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  24 : [ tf.transpose(a) ], weight= 24
Operation  25 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  26 : [ tf.divide(x, y) ], weight= 28
Operation  27 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  28 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  29 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.add_n(inputs) ], weight= 33
Operation  39 : [ tf.math.cumsum(x, axis) ], weight= 33
Operation  40 : [ tf.concat(values, axis) ], weight= 36
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ TripleCreationOperation ], weight= 36
Operation  52 : [ tf.squeeze(input) ], weight= 38
Operation  53 : [ tf.math.squared_difference(x, y) ], weight= 39
Operation  54 : [ tf.reduce_prod(input_tensor, axis) ], weight= 39
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.zeros(shape) ], weight= 40
Operation  73 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  74 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.exp(x) ], weight= 52
Operation  100 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  101 : [ tf.math.log(x) ], weight= 52
Operation  102 : [ tf.math.reciprocal(x) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([1 2 3], shape=(3,), dtype=int32)

Output:
tf.Tensor([101 102 103], shape=(3,), dtype=int32)

Constants: [100, 0, 1, -1, True, False, 3]

Description: Add 100 to every element

Searching...

Found solution: tf.add(in1, tf.constant(100))

Solution was found in 0.1 seconds:
tf.add(in1, tf.constant(100))
tf.add(in1, tf.constant(100))
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.constant(value) ], weight= 17
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.reduce_max(input_tensor) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.range(start) ], weight= 21
Operation  7 : [ tf.subtract(x, y) ], weight= 21
Operation  8 : [ tf.argsort(values, axis, stable=True) ], weight= 22
Operation  9 : [ tf.squeeze(input, axis) ], weight= 23
Operation  10 : [ tf.constant(value, dtype) ], weight= 24
Operation  11 : [ tf.equal(x, y) ], weight= 24
Operation  12 : [ tf.gather(params, indices) ], weight= 24
Operation  13 : [ tf.greater(x, y) ], weight= 24
Operation  14 : [ tf.matmul(a, b) ], weight= 24
Operation  15 : [ tf.maximum(x, y) ], weight= 24
Operation  16 : [ tf.multiply(x, y) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  21 : [ tf.transpose(a) ], weight= 24
Operation  22 : [ tf.where(condition) ], weight= 24
Operation  23 : [ tf.where(condition, x, y) ], weight= 24
Operation  24 : [ IndexingOperation ], weight= 24
Operation  25 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 27
Operation  26 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 27
Operation  27 : [ tf.reverse(tensor, axis) ], weight= 27
Operation  28 : [ tf.add(x, y) ], weight= 28
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.divide(x, y) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.reduce_min(input_tensor) ], weight= 30
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.minimum(x, y) ], weight= 32
Operation  40 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  41 : [ tf.zeros_like(input) ], weight= 32
Operation  42 : [ IndexingAxis1Operation ], weight= 32
Operation  43 : [ tf.math.cumsum(x, axis) ], weight= 33
Operation  44 : [ tf.concat(values, axis) ], weight= 36
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  48 : [ tf.shape(input) ], weight= 36
Operation  49 : [ tf.stack(values, axis) ], weight= 36
Operation  50 : [ SlicingAxis0BothOperation ], weight= 36
Operation  51 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis0RightOperation ], weight= 36
Operation  53 : [ SlicingAxis1BothOperation ], weight= 36
Operation  54 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  55 : [ SlicingAxis1RightOperation ], weight= 36
Operation  56 : [ TripleCreationOperation ], weight= 36
Operation  57 : [ tf.squeeze(input) ], weight= 38
Operation  58 : [ tf.abs(x) ], weight= 40
Operation  59 : [ tf.eye(num_rows) ], weight= 40
Operation  60 : [ tf.fill(dims, value) ], weight= 40
Operation  61 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  62 : [ tf.math.bincount(arr) ], weight= 40
Operation  63 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  67 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  68 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.unstack(value, axis) ], weight= 40
Operation  73 : [ tf.zeros(shape) ], weight= 40
Operation  74 : [ tf.range(start, limit, delta) ], weight= 42
Operation  75 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  76 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  77 : [ tf.sqrt(x) ], weight= 42
Operation  78 : [ tf.add_n(inputs) ], weight= 44
Operation  79 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  80 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  81 : [ tf.math.ceil(x) ], weight= 44
Operation  82 : [ tf.math.floor(x) ], weight= 44
Operation  83 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  84 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  85 : [ tf.not_equal(x, y) ], weight= 44
Operation  86 : [ tf.ones(shape) ], weight= 44
Operation  87 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  88 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  89 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  90 : [ tf.transpose(a, perm) ], weight= 44
Operation  91 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 45
Operation  92 : [ tf.argmin(input, axis) ], weight= 48
Operation  93 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  94 : [ tf.math.logical_not(x) ], weight= 48
Operation  95 : [ tf.math.negative(x) ], weight= 48
Operation  96 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  97 : [ tf.math.top_k(input, k) ], weight= 48
Operation  98 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  99 : [ tf.sign(x) ], weight= 48
Operation  100 : [ tf.unique_with_counts(x) ], weight= 48
Operation  101 : [ tf.exp(x) ], weight= 52
Operation  102 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  103 : [ tf.math.log(x) ], weight= 52
Operation  104 : [ tf.math.reciprocal(x) ], weight= 52
Operation  105 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  106 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  107 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  108 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  109 : [ tf.round(x) ], weight= 52
Operation  110 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  111 : [ tf.sort(values, axis) ], weight= 52
Operation  112 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  113 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  114 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  115 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  116 : [ tf.repeat(input, repeats) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  120 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  121 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  123 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'in1':
tf.Tensor([40 20 60 50 10 20 50 50], shape=(8,), dtype=int32)

Output:
tf.Tensor([2 3 6 7 0 1 5 4], shape=(8,), dtype=int32)

Constants: [0, 1, -1, True, False, 8]

Description: Indices sorted in reverse order

Searching...

Found solution: tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)

Solution was found in 0.1 seconds:
tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)
tf.argsort(in1, axis=0, direction='DESCENDING', stable=True)
Reordered weights:
Operation  0 : [ tf.multiply(x, y) ], weight= 14
Operation  1 : [ tf.cast(x, dtype) ], weight= 16
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ PairCreationOperation ], weight= 20
Operation  4 : [ SingletonTupleCreationOperation ], weight= 20
Operation  5 : [ tf.one_hot(indices, depth) ], weight= 21
Operation  6 : [ tf.eye(num_rows) ], weight= 22
Operation  7 : [ tf.constant(value) ], weight= 23
Operation  8 : [ tf.squeeze(input, axis) ], weight= 23
Operation  9 : [ tf.constant(value, dtype) ], weight= 24
Operation  10 : [ tf.equal(x, y) ], weight= 24
Operation  11 : [ tf.gather(params, indices) ], weight= 24
Operation  12 : [ tf.greater(x, y) ], weight= 24
Operation  13 : [ tf.matmul(a, b) ], weight= 24
Operation  14 : [ tf.maximum(x, y) ], weight= 24
Operation  15 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  19 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  20 : [ tf.transpose(a) ], weight= 24
Operation  21 : [ tf.where(condition) ], weight= 24
Operation  22 : [ tf.where(condition, x, y) ], weight= 24
Operation  23 : [ tf.eye(num_rows, dtype) ], weight= 27
Operation  24 : [ SlicingAxis0BothOperation ], weight= 27
Operation  25 : [ tf.add(x, y) ], weight= 28
Operation  26 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  27 : [ tf.divide(x, y) ], weight= 28
Operation  28 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  29 : [ tf.range(start) ], weight= 28
Operation  30 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  31 : [ tf.square(x) ], weight= 28
Operation  32 : [ tf.subtract(x, y) ], weight= 28
Operation  33 : [ tf.tile(input, multiples) ], weight= 28
Operation  34 : [ tf.math.segment_max(data, segment_ids) ], weight= 30
Operation  35 : [ tf.math.segment_sum(data, segment_ids) ], weight= 30
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.math.floor(x) ], weight= 33
Operation  44 : [ tf.concat(values, axis) ], weight= 36
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.shape(input) ], weight= 36
Operation  48 : [ tf.stack(values, axis) ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.exp(x) ], weight= 39
Operation  57 : [ tf.math.divide_no_nan(x, y) ], weight= 39
Operation  58 : [ tf.math.log(x) ], weight= 39
Operation  59 : [ tf.abs(x) ], weight= 40
Operation  60 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  61 : [ tf.fill(dims, value) ], weight= 40
Operation  62 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  63 : [ tf.math.bincount(arr) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.unstack(value, axis) ], weight= 40
Operation  73 : [ tf.zeros(shape) ], weight= 40
Operation  74 : [ tf.sqrt(x) ], weight= 42
Operation  75 : [ tf.add_n(inputs) ], weight= 44
Operation  76 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  77 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  78 : [ tf.math.ceil(x) ], weight= 44
Operation  79 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  80 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  81 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  82 : [ tf.not_equal(x, y) ], weight= 44
Operation  83 : [ tf.ones(shape) ], weight= 44
Operation  84 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  85 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  86 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  87 : [ tf.transpose(a, perm) ], weight= 44
Operation  88 : [ tf.eye(num_rows, num_columns) ], weight= 45
Operation  89 : [ tf.argmin(input, axis) ], weight= 48
Operation  90 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  91 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  92 : [ tf.math.logical_not(x) ], weight= 48
Operation  93 : [ tf.math.negative(x) ], weight= 48
Operation  94 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  95 : [ tf.math.top_k(input, k) ], weight= 48
Operation  96 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  97 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  98 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  99 : [ tf.sign(x) ], weight= 48
Operation  100 : [ tf.unique_with_counts(x) ], weight= 48
Operation  101 : [ tf.math.reciprocal(x) ], weight= 52
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.sort(values, axis) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.range(start, limit, delta) ], weight= 56
Operation  114 : [ tf.repeat(input, repeats) ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  116 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(7.0, shape=(), dtype=float32)

Output:
tf.Tensor(
[[7. 0. 0. 0. 0.]
 [0. 7. 0. 0. 0.]
 [0. 0. 7. 0. 0.]
 [0. 0. 0. 7. 0.]
 [0. 0. 0. 0. 7.]], shape=(5, 5), dtype=float32)

Constants: [0, 1, -1, True, False, 5]

Description: Multiply with the identity matrix

Searching...

Found solution: tf.multiply(in1, tf.eye(5))

Solution was found in 0.7 seconds:
tf.multiply(in1, tf.eye(5))
tf.multiply(in1, tf.eye(5))
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.constant(value) ], weight= 17
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.multiply(x, y) ], weight= 18
Operation  4 : [ tf.zeros_like(input) ], weight= 18
Operation  5 : [ PairCreationOperation ], weight= 20
Operation  6 : [ SingletonTupleCreationOperation ], weight= 20
Operation  7 : [ tf.one_hot(indices, depth) ], weight= 21
Operation  8 : [ tf.range(start) ], weight= 21
Operation  9 : [ tf.eye(num_rows) ], weight= 22
Operation  10 : [ tf.zeros(shape) ], weight= 22
Operation  11 : [ tf.squeeze(input, axis) ], weight= 23
Operation  12 : [ tf.constant(value, dtype) ], weight= 24
Operation  13 : [ tf.equal(x, y) ], weight= 24
Operation  14 : [ tf.gather(params, indices) ], weight= 24
Operation  15 : [ tf.greater(x, y) ], weight= 24
Operation  16 : [ tf.matmul(a, b) ], weight= 24
Operation  17 : [ tf.maximum(x, y) ], weight= 24
Operation  18 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  19 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  21 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  22 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  23 : [ tf.transpose(a) ], weight= 24
Operation  24 : [ tf.where(condition) ], weight= 24
Operation  25 : [ tf.where(condition, x, y) ], weight= 24
Operation  26 : [ tf.eye(num_rows, dtype) ], weight= 27
Operation  27 : [ SlicingAxis0BothOperation ], weight= 27
Operation  28 : [ SlicingAxis0RightOperation ], weight= 27
Operation  29 : [ SlicingAxis1BothOperation ], weight= 27
Operation  30 : [ TripleCreationOperation ], weight= 27
Operation  31 : [ tf.add(x, y) ], weight= 28
Operation  32 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  33 : [ tf.divide(x, y) ], weight= 28
Operation  34 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  35 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  36 : [ tf.square(x) ], weight= 28
Operation  37 : [ tf.squeeze(input) ], weight= 28
Operation  38 : [ tf.subtract(x, y) ], weight= 28
Operation  39 : [ tf.tile(input, multiples) ], weight= 28
Operation  40 : [ tf.fill(dims, value) ], weight= 30
Operation  41 : [ tf.math.segment_max(data, segment_ids) ], weight= 30
Operation  42 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  43 : [ tf.argmax(input, axis) ], weight= 32
Operation  44 : [ tf.greater_equal(x, y) ], weight= 32
Operation  45 : [ tf.minimum(x, y) ], weight= 32
Operation  46 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  47 : [ IndexingAxis1Operation ], weight= 32
Operation  48 : [ IndexingOperation ], weight= 32
Operation  49 : [ tf.sequence_mask(lengths, maxlen) ], weight= 33
Operation  50 : [ tf.concat(values, axis) ], weight= 36
Operation  51 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  52 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 36
Operation  53 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  54 : [ tf.ones_like(input) ], weight= 36
Operation  55 : [ tf.shape(input) ], weight= 36
Operation  56 : [ tf.stack(values, axis) ], weight= 36
Operation  57 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  58 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  59 : [ SlicingAxis1RightOperation ], weight= 36
Operation  60 : [ tf.sort(values, axis) ], weight= 39
Operation  61 : [ tf.abs(x) ], weight= 40
Operation  62 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  63 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  64 : [ tf.math.bincount(arr) ], weight= 40
Operation  65 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  66 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  67 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  68 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  72 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  73 : [ tf.unstack(value, axis) ], weight= 40
Operation  74 : [ tf.math.segment_mean(data, segment_ids) ], weight= 42
Operation  75 : [ tf.range(start, limit, delta) ], weight= 42
Operation  76 : [ tf.add_n(inputs) ], weight= 44
Operation  77 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  78 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  79 : [ tf.math.ceil(x) ], weight= 44
Operation  80 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  81 : [ tf.math.floor(x) ], weight= 44
Operation  82 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  83 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  84 : [ tf.not_equal(x, y) ], weight= 44
Operation  85 : [ tf.ones(shape) ], weight= 44
Operation  86 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  87 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  88 : [ tf.transpose(a, perm) ], weight= 44
Operation  89 : [ tf.eye(num_rows, num_columns) ], weight= 45
Operation  90 : [ tf.argmin(input, axis) ], weight= 48
Operation  91 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  92 : [ tf.math.logical_not(x) ], weight= 48
Operation  93 : [ tf.math.negative(x) ], weight= 48
Operation  94 : [ tf.math.top_k(input, k) ], weight= 48
Operation  95 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  96 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  97 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  98 : [ tf.sign(x) ], weight= 48
Operation  99 : [ tf.unique_with_counts(x) ], weight= 48
Operation  100 : [ tf.exp(x) ], weight= 52
Operation  101 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  102 : [ tf.math.log(x) ], weight= 52
Operation  103 : [ tf.math.reciprocal(x) ], weight= 52
Operation  104 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  105 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  106 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  107 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  108 : [ tf.round(x) ], weight= 52
Operation  109 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  110 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  111 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Output:
tf.Tensor(
[[[[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]]


 [[[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]

  [[0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]
   [0. 0. 0. 0. 0.]]]], shape=(2, 3, 4, 5), dtype=float32)

Constants: [0, 1, -1, True, False, 2, 3, 4, 5]

Description: Construct a 4D zeros tensor

Searching...

Found solution: tf.zeros((2, 3, 4, 5))

Solution was found in 0.2 seconds:
tf.zeros((2, 3, 4, 5))
tf.zeros((2, 3, 4, 5))
Reordered weights:
Operation  0 : [ tf.add(x, y) ], weight= 16
Operation  1 : [ tf.cast(x, dtype) ], weight= 16
Operation  2 : [ tf.constant(value) ], weight= 17
Operation  3 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.range(start) ], weight= 21
Operation  7 : [ tf.subtract(x, y) ], weight= 21
Operation  8 : [ tf.squeeze(input, axis) ], weight= 23
Operation  9 : [ tf.constant(value, dtype) ], weight= 24
Operation  10 : [ tf.equal(x, y) ], weight= 24
Operation  11 : [ tf.gather(params, indices) ], weight= 24
Operation  12 : [ tf.greater(x, y) ], weight= 24
Operation  13 : [ tf.matmul(a, b) ], weight= 24
Operation  14 : [ tf.maximum(x, y) ], weight= 24
Operation  15 : [ tf.multiply(x, y) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  21 : [ tf.transpose(a) ], weight= 24
Operation  22 : [ tf.where(condition) ], weight= 24
Operation  23 : [ tf.where(condition, x, y) ], weight= 24
Operation  24 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  25 : [ tf.divide(x, y) ], weight= 28
Operation  26 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  27 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  28 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  29 : [ tf.square(x) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argmax(input, axis) ], weight= 32
Operation  32 : [ tf.greater_equal(x, y) ], weight= 32
Operation  33 : [ tf.minimum(x, y) ], weight= 32
Operation  34 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  35 : [ tf.zeros_like(input) ], weight= 32
Operation  36 : [ IndexingAxis1Operation ], weight= 32
Operation  37 : [ IndexingOperation ], weight= 32
Operation  38 : [ tf.add_n(inputs) ], weight= 33
Operation  39 : [ tf.concat(values, axis) ], weight= 36
Operation  40 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.sqrt(x) ], weight= 42
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  87 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  88 : [ tf.math.logical_not(x) ], weight= 48
Operation  89 : [ tf.math.negative(x) ], weight= 48
Operation  90 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
123

Input 'in2':
tf.Tensor(45, shape=(), dtype=int32)

Output:
tf.Tensor(168, shape=(), dtype=int32)

Constants: [0, 1, -1, True, False]

Description: Add primitive int and scalar int tensor

Searching...

Found solution: tf.add(in2, tf.constant(in1))

Solution was found in 0.1 seconds:
tf.add(in2, tf.constant(in1))
tf.add(in2, tf.constant(in1))
Reordered weights:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 14
Operation  1 : [ PairCreationOperation ], weight= 15
Operation  2 : [ tf.add(x, y) ], weight= 16
Operation  3 : [ tf.cast(x, dtype) ], weight= 16
Operation  4 : [ tf.tensordot(a, b, axes) ], weight= 18
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.subtract(x, y) ], weight= 21
Operation  7 : [ tf.constant(value) ], weight= 23
Operation  8 : [ tf.squeeze(input, axis) ], weight= 23
Operation  9 : [ tf.constant(value, dtype) ], weight= 24
Operation  10 : [ tf.equal(x, y) ], weight= 24
Operation  11 : [ tf.gather(params, indices) ], weight= 24
Operation  12 : [ tf.greater(x, y) ], weight= 24
Operation  13 : [ tf.matmul(a, b) ], weight= 24
Operation  14 : [ tf.maximum(x, y) ], weight= 24
Operation  15 : [ tf.multiply(x, y) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.transpose(a) ], weight= 24
Operation  21 : [ tf.where(condition) ], weight= 24
Operation  22 : [ tf.where(condition, x, y) ], weight= 24
Operation  23 : [ TripleCreationOperation ], weight= 27
Operation  24 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  25 : [ tf.divide(x, y) ], weight= 28
Operation  26 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  27 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  28 : [ tf.range(start) ], weight= 28
Operation  29 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  30 : [ tf.square(x) ], weight= 28
Operation  31 : [ tf.tile(input, multiples) ], weight= 28
Operation  32 : [ tf.argmax(input, axis) ], weight= 32
Operation  33 : [ tf.greater_equal(x, y) ], weight= 32
Operation  34 : [ tf.minimum(x, y) ], weight= 32
Operation  35 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  36 : [ tf.zeros_like(input) ], weight= 32
Operation  37 : [ IndexingAxis1Operation ], weight= 32
Operation  38 : [ IndexingOperation ], weight= 32
Operation  39 : [ tf.add_n(inputs) ], weight= 33
Operation  40 : [ tf.concat(values, axis) ], weight= 36
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.shape(input) ], weight= 36
Operation  44 : [ tf.stack(values, axis) ], weight= 36
Operation  45 : [ SlicingAxis0BothOperation ], weight= 36
Operation  46 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  47 : [ SlicingAxis0RightOperation ], weight= 36
Operation  48 : [ SlicingAxis1BothOperation ], weight= 36
Operation  49 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis1RightOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  71 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.exp(x) ], weight= 52
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.log(x) ], weight= 52
Operation  101 : [ tf.math.reciprocal(x) ], weight= 52
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.sort(values, axis) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.range(start, limit, delta) ], weight= 56
Operation  114 : [ tf.repeat(input, repeats) ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'tensor_x':
tf.Tensor([3 4 5], shape=(3,), dtype=int32)

Input 'tensor_y':
tf.Tensor([10 20 30], shape=(3,), dtype=int32)

Output:
tf.Tensor(
[[13 14 15]
 [23 24 25]
 [33 34 35]], shape=(3, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3]

Description: Add two tensors with broadcasting

Searching...

Found solution: tf.add(tensor_x, tf.expand_dims(tensor_y, 1))

Solution was found in 0.3 seconds:
tf.add(tensor_x, tf.expand_dims(tensor_y, 1))
tf.add(tensor_x, tf.expand_dims(tensor_y, 1))
Reordered weights:
Operation  0 : [ tf.gather(params, indices) ], weight= 14
Operation  1 : [ tf.cast(x, dtype) ], weight= 16
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.maximum(x, y) ], weight= 18
Operation  4 : [ tf.multiply(x, y) ], weight= 18
Operation  5 : [ PairCreationOperation ], weight= 20
Operation  6 : [ SingletonTupleCreationOperation ], weight= 20
Operation  7 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 22
Operation  8 : [ tf.constant(value) ], weight= 23
Operation  9 : [ tf.squeeze(input, axis) ], weight= 23
Operation  10 : [ tf.constant(value, dtype) ], weight= 24
Operation  11 : [ tf.equal(x, y) ], weight= 24
Operation  12 : [ tf.greater(x, y) ], weight= 24
Operation  13 : [ tf.matmul(a, b) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  15 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  19 : [ tf.transpose(a) ], weight= 24
Operation  20 : [ tf.where(condition) ], weight= 24
Operation  21 : [ tf.where(condition, x, y) ], weight= 24
Operation  22 : [ tf.add(x, y) ], weight= 28
Operation  23 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  24 : [ tf.divide(x, y) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  26 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  27 : [ tf.range(start) ], weight= 28
Operation  28 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  29 : [ tf.square(x) ], weight= 28
Operation  30 : [ tf.subtract(x, y) ], weight= 28
Operation  31 : [ tf.tile(input, multiples) ], weight= 28
Operation  32 : [ tf.argmax(input, axis) ], weight= 32
Operation  33 : [ tf.greater_equal(x, y) ], weight= 32
Operation  34 : [ tf.minimum(x, y) ], weight= 32
Operation  35 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  36 : [ tf.zeros_like(input) ], weight= 32
Operation  37 : [ IndexingAxis1Operation ], weight= 32
Operation  38 : [ IndexingOperation ], weight= 32
Operation  39 : [ tf.concat(values, axis) ], weight= 36
Operation  40 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  41 : [ tf.ones_like(input) ], weight= 36
Operation  42 : [ tf.shape(input) ], weight= 36
Operation  43 : [ tf.stack(values, axis) ], weight= 36
Operation  44 : [ SlicingAxis0BothOperation ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.math.bincount(arr) ], weight= 40
Operation  57 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  58 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  62 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  63 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.unstack(value, axis) ], weight= 40
Operation  68 : [ tf.zeros(shape) ], weight= 40
Operation  69 : [ tf.add_n(inputs) ], weight= 44
Operation  70 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  71 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  72 : [ tf.math.ceil(x) ], weight= 44
Operation  73 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  74 : [ tf.math.floor(x) ], weight= 44
Operation  75 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  76 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  77 : [ tf.not_equal(x, y) ], weight= 44
Operation  78 : [ tf.ones(shape) ], weight= 44
Operation  79 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  80 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  81 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  82 : [ tf.transpose(a, perm) ], weight= 44
Operation  83 : [ tf.argmin(input, axis) ], weight= 48
Operation  84 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  85 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'params':
tf.Tensor(
[[[11 22 33]
  [44 55 66]]], shape=(1, 2, 3), dtype=int32)

Input 'indices':
tf.Tensor([[2 1]], shape=(1, 2), dtype=int32)

Input 'axis':
2

Input 'batch_dims':
1

Output:
tf.Tensor(
[[[33 22]
  [66 55]]], shape=(1, 2, 2), dtype=int32)

Constants: [0, -1, True, False, 3]

Description: Use tf.gather

Searching...

Found solution: tf.gather(params, indices, axis=axis, batch_dims=batch_dims)

Solution was found in 0.4 seconds:
tf.gather(params, indices, axis=axis, batch_dims=batch_dims)
tf.gather(params, indices, axis=axis, batch_dims=batch_dims)
Reordered weights:
Operation  0 : [ tf.SparseTensor(indices, values, dense_shape) ], weight= 15
Operation  1 : [ tf.cast(x, dtype) ], weight= 16
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.tensordot(a, b, axes) ], weight= 18
Operation  4 : [ tf.sparse.from_dense(tensor) ], weight= 20
Operation  5 : [ tf.sparse.to_dense(sp_input) ], weight= 20
Operation  6 : [ PairCreationOperation ], weight= 20
Operation  7 : [ SingletonTupleCreationOperation ], weight= 20
Operation  8 : [ tf.constant(value) ], weight= 23
Operation  9 : [ tf.squeeze(input, axis) ], weight= 23
Operation  10 : [ tf.constant(value, dtype) ], weight= 24
Operation  11 : [ tf.equal(x, y) ], weight= 24
Operation  12 : [ tf.gather(params, indices) ], weight= 24
Operation  13 : [ tf.greater(x, y) ], weight= 24
Operation  14 : [ tf.matmul(a, b) ], weight= 24
Operation  15 : [ tf.maximum(x, y) ], weight= 24
Operation  16 : [ tf.multiply(x, y) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  18 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  20 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  21 : [ tf.sequence_mask(lengths) ], weight= 24
Operation  22 : [ tf.transpose(a) ], weight= 24
Operation  23 : [ tf.where(condition) ], weight= 24
Operation  24 : [ tf.where(condition, x, y) ], weight= 24
Operation  25 : [ tf.sparse.add(a, b) ], weight= 24
Operation  26 : [ tf.sparse.expand_dims(sp_input, axis) ], weight= 24
Operation  27 : [ tf.stack(values, axis) ], weight= 27
Operation  28 : [ tf.add(x, y) ], weight= 28
Operation  29 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  30 : [ tf.divide(x, y) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  33 : [ tf.range(start) ], weight= 28
Operation  34 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.subtract(x, y) ], weight= 28
Operation  37 : [ tf.tile(input, multiples) ], weight= 28
Operation  38 : [ tf.sparse.reduce_max(sp_input, axis, output_is_sparse) ], weight= 28
Operation  39 : [ tf.sparse.reduce_sum(sp_input, axis, output_is_sparse) ], weight= 28
Operation  40 : [ tf.argsort(values, axis, stable=True) ], weight= 30
Operation  41 : [ tf.math.bincount(arr) ], weight= 30
Operation  42 : [ tf.argmax(input, axis) ], weight= 32
Operation  43 : [ tf.greater_equal(x, y) ], weight= 32
Operation  44 : [ tf.minimum(x, y) ], weight= 32
Operation  45 : [ tf.zeros_like(input) ], weight= 32
Operation  46 : [ tf.sparse.maximum(sp_a, sp_b) ], weight= 32
Operation  47 : [ tf.sparse.slice(sp_input, start, size) ], weight= 32
Operation  48 : [ tf.sparse.split(sp_input, num_split, axis) ], weight= 32
Operation  49 : [ IndexingAxis1Operation ], weight= 32
Operation  50 : [ IndexingOperation ], weight= 32
Operation  51 : [ tf.sequence_mask(lengths, maxlen) ], weight= 33
Operation  52 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 36
Operation  53 : [ tf.concat(values, axis) ], weight= 36
Operation  54 : [ tf.eye(num_rows, dtype) ], weight= 36
Operation  55 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  56 : [ tf.ones_like(input) ], weight= 36
Operation  57 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  58 : [ tf.shape(input) ], weight= 36
Operation  59 : [ tf.sparse.retain(sp_input, to_retain) ], weight= 36
Operation  60 : [ tf.sparse.to_dense(sp_input, default_value) ], weight= 36
Operation  61 : [ tf.sparse.transpose(sp_input) ], weight= 36
Operation  62 : [ SlicingAxis0BothOperation ], weight= 36
Operation  63 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  64 : [ SlicingAxis0RightOperation ], weight= 36
Operation  65 : [ SlicingAxis1BothOperation ], weight= 36
Operation  66 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  67 : [ SlicingAxis1RightOperation ], weight= 36
Operation  68 : [ TripleCreationOperation ], weight= 36
Operation  69 : [ tf.squeeze(input) ], weight= 38
Operation  70 : [ tf.abs(x) ], weight= 40
Operation  71 : [ tf.eye(num_rows) ], weight= 40
Operation  72 : [ tf.fill(dims, value) ], weight= 40
Operation  73 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  74 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  75 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  76 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  77 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  78 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  79 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  80 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  81 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  82 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  83 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  84 : [ tf.unstack(value, axis) ], weight= 40
Operation  85 : [ tf.zeros(shape) ], weight= 40
Operation  86 : [ tf.sparse.concat(axis, sp_inputs) ], weight= 40
Operation  87 : [ tf.sparse.minimum(sp_a, sp_b) ], weight= 40
Operation  88 : [ tf.sparse.reset_shape(sp_input) ], weight= 40
Operation  89 : [ tf.sparse.reshape(sp_input, shape) ], weight= 40
Operation  90 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  91 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  92 : [ tf.add_n(inputs) ], weight= 44
Operation  93 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  94 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  95 : [ tf.math.ceil(x) ], weight= 44
Operation  96 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  97 : [ tf.math.floor(x) ], weight= 44
Operation  98 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  99 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  100 : [ tf.not_equal(x, y) ], weight= 44
Operation  101 : [ tf.ones(shape) ], weight= 44
Operation  102 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  103 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  104 : [ tf.transpose(a, perm) ], weight= 44
Operation  105 : [ tf.sparse.to_indicator(sp_input, vocab_size) ], weight= 44
Operation  106 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 45
Operation  107 : [ tf.argmin(input, axis) ], weight= 48
Operation  108 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  109 : [ tf.math.logical_not(x) ], weight= 48
Operation  110 : [ tf.math.negative(x) ], weight= 48
Operation  111 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  112 : [ tf.math.top_k(input, k) ], weight= 48
Operation  113 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  114 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  115 : [ tf.sign(x) ], weight= 48
Operation  116 : [ tf.unique_with_counts(x) ], weight= 48
Operation  117 : [ tf.exp(x) ], weight= 52
Operation  118 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  119 : [ tf.math.log(x) ], weight= 52
Operation  120 : [ tf.math.reciprocal(x) ], weight= 52
Operation  121 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  122 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  123 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  124 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  125 : [ tf.round(x) ], weight= 52
Operation  126 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  127 : [ tf.sort(values, axis) ], weight= 52
Operation  128 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  129 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  130 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  131 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  132 : [ tf.range(start, limit, delta) ], weight= 56
Operation  133 : [ tf.repeat(input, repeats) ], weight= 56
Operation  134 : [ tf.sqrt(x) ], weight= 56
Operation  135 : [ tf.sparse.transpose(sp_input, perm) ], weight= 56
Operation  136 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  137 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  138 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  139 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  140 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  141 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  142 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'in1':
tf.Tensor([0 0 0 1 3 3], shape=(6,), dtype=int32)

Output:
tf.Tensor(
[[0 0]
 [0 1]
 [0 2]
 [1 0]
 [3 0]
 [3 1]], shape=(6, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 6]

Description: Convert index tensor into pairs for SparseTensor indexing

Searching...

Found solution: tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)

Solution was found in 4.1 seconds:
tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)
tf.cast(tf.where(tf.sequence_mask(tf.math.bincount(in1))), tf.int32)
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.divide(x, y) ], weight= 16
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.reduce_sum(input_tensor) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.constant(value) ], weight= 23
Operation  7 : [ tf.squeeze(input, axis) ], weight= 23
Operation  8 : [ tf.constant(value, dtype) ], weight= 24
Operation  9 : [ tf.equal(x, y) ], weight= 24
Operation  10 : [ tf.gather(params, indices) ], weight= 24
Operation  11 : [ tf.greater(x, y) ], weight= 24
Operation  12 : [ tf.matmul(a, b) ], weight= 24
Operation  13 : [ tf.maximum(x, y) ], weight= 24
Operation  14 : [ tf.multiply(x, y) ], weight= 24
Operation  15 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  19 : [ tf.transpose(a) ], weight= 24
Operation  20 : [ tf.where(condition) ], weight= 24
Operation  21 : [ tf.where(condition, x, y) ], weight= 24
Operation  22 : [ tf.add(x, y) ], weight= 28
Operation  23 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.math.divide_no_nan(x, y) ], weight= 29
Operation  32 : [ tf.reduce_mean(input_tensor) ], weight= 30
Operation  33 : [ tf.reduce_mean(input_tensor, axis) ], weight= 30
Operation  34 : [ tf.argmax(input, axis) ], weight= 32
Operation  35 : [ tf.greater_equal(x, y) ], weight= 32
Operation  36 : [ tf.minimum(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.math.cumsum(x, axis) ], weight= 33
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.reverse(tensor, axis) ], weight= 36
Operation  47 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  48 : [ tf.shape(input) ], weight= 36
Operation  49 : [ tf.stack(values, axis) ], weight= 36
Operation  50 : [ SlicingAxis0BothOperation ], weight= 36
Operation  51 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis0RightOperation ], weight= 36
Operation  53 : [ SlicingAxis1BothOperation ], weight= 36
Operation  54 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  55 : [ SlicingAxis1RightOperation ], weight= 36
Operation  56 : [ TripleCreationOperation ], weight= 36
Operation  57 : [ tf.squeeze(input) ], weight= 38
Operation  58 : [ tf.sort(values, axis) ], weight= 39
Operation  59 : [ tf.abs(x) ], weight= 40
Operation  60 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  61 : [ tf.eye(num_rows) ], weight= 40
Operation  62 : [ tf.fill(dims, value) ], weight= 40
Operation  63 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  64 : [ tf.math.bincount(arr) ], weight= 40
Operation  65 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  66 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  67 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  68 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  69 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  70 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  72 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  73 : [ tf.unstack(value, axis) ], weight= 40
Operation  74 : [ tf.zeros(shape) ], weight= 40
Operation  75 : [ tf.sqrt(x) ], weight= 42
Operation  76 : [ tf.add_n(inputs) ], weight= 44
Operation  77 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  78 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  79 : [ tf.math.ceil(x) ], weight= 44
Operation  80 : [ tf.math.floor(x) ], weight= 44
Operation  81 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  82 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  83 : [ tf.not_equal(x, y) ], weight= 44
Operation  84 : [ tf.ones(shape) ], weight= 44
Operation  85 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  86 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  87 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  88 : [ tf.transpose(a, perm) ], weight= 44
Operation  89 : [ tf.math.reciprocal_no_nan(x) ], weight= 45
Operation  90 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 45
Operation  91 : [ tf.argmin(input, axis) ], weight= 48
Operation  92 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  93 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  94 : [ tf.math.logical_not(x) ], weight= 48
Operation  95 : [ tf.math.negative(x) ], weight= 48
Operation  96 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  97 : [ tf.math.top_k(input, k) ], weight= 48
Operation  98 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  99 : [ tf.sign(x) ], weight= 48
Operation  100 : [ tf.unique_with_counts(x) ], weight= 48
Operation  101 : [ tf.exp(x) ], weight= 52
Operation  102 : [ tf.math.log(x) ], weight= 52
Operation  103 : [ tf.math.reciprocal(x) ], weight= 52
Operation  104 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  105 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  106 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  107 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  108 : [ tf.round(x) ], weight= 52
Operation  109 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  110 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  111 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  112 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  113 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  114 : [ tf.range(start, limit, delta) ], weight= 56
Operation  115 : [ tf.repeat(input, repeats) ], weight= 56
Operation  116 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  117 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  118 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  119 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  120 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  121 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  123 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'in1':
tf.Tensor(
[[0. 1. 0. 0.]
 [0. 1. 1. 0.]
 [1. 1. 1. 1.]], shape=(3, 4), dtype=float32)

Output:
tf.Tensor(
[[0.   1.   0.   0.  ]
 [0.   0.5  0.5  0.  ]
 [0.25 0.25 0.25 0.25]], shape=(3, 4), dtype=float32)

Constants: [0, 1, -1, True, False, 3, 4]

Description: Divide each row by the sum of that row

Searching...

Found solution: tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))

Solution was found in 4.6 seconds:
tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))
tf.divide(in1, tf.expand_dims(tf.reduce_sum(in1, axis=1), 1))
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 12
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 14
Operation  2 : [ tf.SparseTensor(indices, values, dense_shape) ], weight= 15
Operation  3 : [ tf.sparse.from_dense(tensor) ], weight= 15
Operation  4 : [ tf.sparse.to_dense(sp_input) ], weight= 15
Operation  5 : [ tf.sparse.expand_dims(sp_input, axis) ], weight= 18
Operation  6 : [ tf.sparse.transpose(sp_input) ], weight= 20
Operation  7 : [ PairCreationOperation ], weight= 20
Operation  8 : [ SingletonTupleCreationOperation ], weight= 20
Operation  9 : [ tf.sparse.reduce_max(sp_input, axis, output_is_sparse) ], weight= 21
Operation  10 : [ tf.sparse.reduce_sum(sp_input, axis, output_is_sparse) ], weight= 21
Operation  11 : [ tf.constant(value) ], weight= 23
Operation  12 : [ tf.squeeze(input, axis) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.equal(x, y) ], weight= 24
Operation  15 : [ tf.gather(params, indices) ], weight= 24
Operation  16 : [ tf.greater(x, y) ], weight= 24
Operation  17 : [ tf.matmul(a, b) ], weight= 24
Operation  18 : [ tf.maximum(x, y) ], weight= 24
Operation  19 : [ tf.multiply(x, y) ], weight= 24
Operation  20 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  21 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  22 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  23 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  24 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  25 : [ tf.transpose(a) ], weight= 24
Operation  26 : [ tf.where(condition) ], weight= 24
Operation  27 : [ tf.where(condition, x, y) ], weight= 24
Operation  28 : [ tf.sparse.add(a, b) ], weight= 24
Operation  29 : [ tf.sparse.maximum(sp_a, sp_b) ], weight= 24
Operation  30 : [ tf.sparse.slice(sp_input, start, size) ], weight= 24
Operation  31 : [ tf.sparse.split(sp_input, num_split, axis) ], weight= 24
Operation  32 : [ IndexingAxis1Operation ], weight= 24
Operation  33 : [ tf.sparse.retain(sp_input, to_retain) ], weight= 27
Operation  34 : [ tf.sparse.to_dense(sp_input, default_value) ], weight= 27
Operation  35 : [ tf.add(x, y) ], weight= 28
Operation  36 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  37 : [ tf.divide(x, y) ], weight= 28
Operation  38 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  39 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  40 : [ tf.range(start) ], weight= 28
Operation  41 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  42 : [ tf.square(x) ], weight= 28
Operation  43 : [ tf.subtract(x, y) ], weight= 28
Operation  44 : [ tf.tile(input, multiples) ], weight= 28
Operation  45 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 30
Operation  46 : [ tf.sparse.concat(axis, sp_inputs) ], weight= 30
Operation  47 : [ tf.sparse.minimum(sp_a, sp_b) ], weight= 30
Operation  48 : [ tf.sparse.reset_shape(sp_input) ], weight= 30
Operation  49 : [ tf.sparse.reshape(sp_input, shape) ], weight= 30
Operation  50 : [ tf.argmax(input, axis) ], weight= 32
Operation  51 : [ tf.greater_equal(x, y) ], weight= 32
Operation  52 : [ tf.minimum(x, y) ], weight= 32
Operation  53 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  54 : [ tf.zeros_like(input) ], weight= 32
Operation  55 : [ IndexingOperation ], weight= 32
Operation  56 : [ tf.sparse.to_indicator(sp_input, vocab_size) ], weight= 33
Operation  57 : [ tf.concat(values, axis) ], weight= 36
Operation  58 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  59 : [ tf.math.negative(x) ], weight= 36
Operation  60 : [ tf.ones_like(input) ], weight= 36
Operation  61 : [ tf.shape(input) ], weight= 36
Operation  62 : [ tf.stack(values, axis) ], weight= 36
Operation  63 : [ SlicingAxis0BothOperation ], weight= 36
Operation  64 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  65 : [ SlicingAxis0RightOperation ], weight= 36
Operation  66 : [ SlicingAxis1BothOperation ], weight= 36
Operation  67 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  68 : [ SlicingAxis1RightOperation ], weight= 36
Operation  69 : [ TripleCreationOperation ], weight= 36
Operation  70 : [ tf.squeeze(input) ], weight= 38
Operation  71 : [ tf.math.divide_no_nan(x, y) ], weight= 39
Operation  72 : [ tf.abs(x) ], weight= 40
Operation  73 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  74 : [ tf.eye(num_rows) ], weight= 40
Operation  75 : [ tf.fill(dims, value) ], weight= 40
Operation  76 : [ tf.math.bincount(arr) ], weight= 40
Operation  77 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  78 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  79 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  80 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  81 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  82 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  83 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  84 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  85 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  86 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  87 : [ tf.unstack(value, axis) ], weight= 40
Operation  88 : [ tf.zeros(shape) ], weight= 40
Operation  89 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  90 : [ tf.sparse.transpose(sp_input, perm) ], weight= 42
Operation  91 : [ tf.add_n(inputs) ], weight= 44
Operation  92 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  93 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  94 : [ tf.math.ceil(x) ], weight= 44
Operation  95 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  96 : [ tf.math.floor(x) ], weight= 44
Operation  97 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  98 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  99 : [ tf.not_equal(x, y) ], weight= 44
Operation  100 : [ tf.ones(shape) ], weight= 44
Operation  101 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  102 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  103 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  104 : [ tf.transpose(a, perm) ], weight= 44
Operation  105 : [ tf.math.reciprocal_no_nan(x) ], weight= 45
Operation  106 : [ tf.argmin(input, axis) ], weight= 48
Operation  107 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  108 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  109 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  110 : [ tf.math.logical_not(x) ], weight= 48
Operation  111 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  112 : [ tf.math.top_k(input, k) ], weight= 48
Operation  113 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  114 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  115 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  116 : [ tf.sign(x) ], weight= 48
Operation  117 : [ tf.unique_with_counts(x) ], weight= 48
Operation  118 : [ tf.exp(x) ], weight= 52
Operation  119 : [ tf.math.log(x) ], weight= 52
Operation  120 : [ tf.math.reciprocal(x) ], weight= 52
Operation  121 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  122 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  123 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  124 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  125 : [ tf.round(x) ], weight= 52
Operation  126 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  127 : [ tf.sort(values, axis) ], weight= 52
Operation  128 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  129 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  130 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  131 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  132 : [ tf.range(start, limit, delta) ], weight= 56
Operation  133 : [ tf.repeat(input, repeats) ], weight= 56
Operation  134 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  135 : [ tf.sqrt(x) ], weight= 56
Operation  136 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  137 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  138 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  139 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  140 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  141 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  142 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
SparseTensor(indices=tf.Tensor(
[[0 0 0]
 [0 1 1]
 [1 1 1]
 [1 1 2]], shape=(4, 3), dtype=int64), values=tf.Tensor([1. 1. 1. 1.], shape=(4,), dtype=float32), dense_shape=tf.Tensor([  2   2 800], shape=(3,), dtype=int64))

Output:
SparseTensor(indices=tf.Tensor(
[[0 0 0]
 [0 1 1]], shape=(2, 3), dtype=int64), values=tf.Tensor([1. 1.], shape=(2,), dtype=float32), dense_shape=tf.Tensor([  1   2 800], shape=(3,), dtype=int64))

Constants: [0, 1, -1, True, False, 2, 800]

Description: Slice the first dimension of a SparseTensor

Searching...

Found solution: tf.sparse.split(sp_input=in1, num_split=2, axis=0)[0]

Solution was found in 17.6 seconds:
tf.sparse.split(sp_input=in1, num_split=2, axis=0)[0]
tf.sparse.slice(in1, tf.zeros(3, dtype=tf.int64), tf.concat([[1], in1.dense_shape[1:]], 0))
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.reshape(tensor, shape) ], weight= 16
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.transpose(a) ], weight= 18
Operation  4 : [ tf.where(condition) ], weight= 18
Operation  5 : [ PairCreationOperation ], weight= 20
Operation  6 : [ SingletonTupleCreationOperation ], weight= 20
Operation  7 : [ tf.range(start) ], weight= 21
Operation  8 : [ tf.constant(value) ], weight= 23
Operation  9 : [ tf.squeeze(input, axis) ], weight= 23
Operation  10 : [ tf.constant(value, dtype) ], weight= 24
Operation  11 : [ tf.equal(x, y) ], weight= 24
Operation  12 : [ tf.gather(params, indices) ], weight= 24
Operation  13 : [ tf.greater(x, y) ], weight= 24
Operation  14 : [ tf.matmul(a, b) ], weight= 24
Operation  15 : [ tf.maximum(x, y) ], weight= 24
Operation  16 : [ tf.multiply(x, y) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  18 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  20 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  21 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  22 : [ tf.where(condition, x, y) ], weight= 24
Operation  23 : [ tf.stack(values, axis) ], weight= 27
Operation  24 : [ SlicingAxis0BothOperation ], weight= 27
Operation  25 : [ tf.add(x, y) ], weight= 28
Operation  26 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  27 : [ tf.divide(x, y) ], weight= 28
Operation  28 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  29 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  30 : [ tf.square(x) ], weight= 28
Operation  31 : [ tf.subtract(x, y) ], weight= 28
Operation  32 : [ tf.tile(input, multiples) ], weight= 28
Operation  33 : [ tf.argmax(input, axis) ], weight= 32
Operation  34 : [ tf.greater_equal(x, y) ], weight= 32
Operation  35 : [ tf.minimum(x, y) ], weight= 32
Operation  36 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  37 : [ tf.zeros_like(input) ], weight= 32
Operation  38 : [ IndexingAxis1Operation ], weight= 32
Operation  39 : [ IndexingOperation ], weight= 32
Operation  40 : [ tf.concat(values, axis) ], weight= 36
Operation  41 : [ tf.eye(num_rows, dtype) ], weight= 36
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.ones_like(input) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  46 : [ SlicingAxis0RightOperation ], weight= 36
Operation  47 : [ SlicingAxis1BothOperation ], weight= 36
Operation  48 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis1RightOperation ], weight= 36
Operation  50 : [ TripleCreationOperation ], weight= 36
Operation  51 : [ tf.squeeze(input) ], weight= 38
Operation  52 : [ tf.abs(x) ], weight= 40
Operation  53 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  54 : [ tf.eye(num_rows) ], weight= 40
Operation  55 : [ tf.fill(dims, value) ], weight= 40
Operation  56 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  57 : [ tf.math.bincount(arr) ], weight= 40
Operation  58 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  59 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.add_n(inputs) ], weight= 44
Operation  71 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  72 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  73 : [ tf.math.ceil(x) ], weight= 44
Operation  74 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  75 : [ tf.math.floor(x) ], weight= 44
Operation  76 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  77 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  78 : [ tf.not_equal(x, y) ], weight= 44
Operation  79 : [ tf.ones(shape) ], weight= 44
Operation  80 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  81 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  82 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  83 : [ tf.transpose(a, perm) ], weight= 44
Operation  84 : [ tf.argmin(input, axis) ], weight= 48
Operation  85 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  86 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  87 : [ tf.math.logical_not(x) ], weight= 48
Operation  88 : [ tf.math.negative(x) ], weight= 48
Operation  89 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  90 : [ tf.math.top_k(input, k) ], weight= 48
Operation  91 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  92 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  93 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  94 : [ tf.sign(x) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[111 112 121 122 131 132 211 212 221 222 231 232 311 312 321 322 331 332
 411 412 421 422 431 432], shape=(24,), dtype=int32)

Output:
tf.Tensor(
[[[111 112]
  [121 122]
  [131 132]]

 [[211 212]
  [221 222]
  [231 232]]

 [[311 312]
  [321 322]
  [331 332]]

 [[411 412]
  [421 422]
  [431 432]]], shape=(4, 3, 2), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 4, 24]

Description: Reshape a flat array into a rank 3 tensor

Searching...

Found solution: tf.reshape(in1, (4, 3, 2))

Solution was found in 0.2 seconds:
tf.reshape(in1, (4, 3, 2))
tf.reshape(in1, shape=(4, 3, 2))
Reordered weights:
Operation  0 : [ tf.expand_dims(input, axis) ], weight= 14
Operation  1 : [ tf.cast(x, dtype) ], weight= 16
Operation  2 : [ tf.gather(params, indices) ], weight= 18
Operation  3 : [ tf.maximum(x, y) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.range(start) ], weight= 21
Operation  7 : [ tf.tile(input, multiples) ], weight= 21
Operation  8 : [ tf.constant(value) ], weight= 23
Operation  9 : [ tf.squeeze(input, axis) ], weight= 23
Operation  10 : [ tf.constant(value, dtype) ], weight= 24
Operation  11 : [ tf.equal(x, y) ], weight= 24
Operation  12 : [ tf.greater(x, y) ], weight= 24
Operation  13 : [ tf.matmul(a, b) ], weight= 24
Operation  14 : [ tf.minimum(x, y) ], weight= 24
Operation  15 : [ tf.multiply(x, y) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  21 : [ tf.transpose(a) ], weight= 24
Operation  22 : [ tf.where(condition) ], weight= 24
Operation  23 : [ tf.where(condition, x, y) ], weight= 24
Operation  24 : [ tf.ones_like(input) ], weight= 27
Operation  25 : [ tf.stack(values, axis) ], weight= 27
Operation  26 : [ SlicingAxis1BothOperation ], weight= 27
Operation  27 : [ SlicingAxis1LeftOperation ], weight= 27
Operation  28 : [ SlicingAxis1RightOperation ], weight= 27
Operation  29 : [ tf.add(x, y) ], weight= 28
Operation  30 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  31 : [ tf.divide(x, y) ], weight= 28
Operation  32 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  33 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  34 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  35 : [ tf.square(x) ], weight= 28
Operation  36 : [ tf.subtract(x, y) ], weight= 28
Operation  37 : [ tf.fill(dims, value) ], weight= 30
Operation  38 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 30
Operation  39 : [ tf.math.bincount(arr) ], weight= 30
Operation  40 : [ tf.argmax(input, axis) ], weight= 32
Operation  41 : [ tf.greater_equal(x, y) ], weight= 32
Operation  42 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  43 : [ tf.zeros_like(input) ], weight= 32
Operation  44 : [ IndexingAxis1Operation ], weight= 32
Operation  45 : [ IndexingOperation ], weight= 32
Operation  46 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 33
Operation  47 : [ tf.concat(values, axis) ], weight= 36
Operation  48 : [ tf.eye(num_rows, dtype) ], weight= 36
Operation  49 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  50 : [ tf.shape(input) ], weight= 36
Operation  51 : [ SlicingAxis0BothOperation ], weight= 36
Operation  52 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis0RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.repeat(input, repeats, axis) ], weight= 39
Operation  57 : [ tf.sort(values, axis) ], weight= 39
Operation  58 : [ tf.abs(x) ], weight= 40
Operation  59 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  60 : [ tf.eye(num_rows) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.zeros(shape) ], weight= 40
Operation  73 : [ tf.repeat(input, repeats) ], weight= 42
Operation  74 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  75 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  76 : [ tf.add_n(inputs) ], weight= 44
Operation  77 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  78 : [ tf.math.ceil(x) ], weight= 44
Operation  79 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  80 : [ tf.math.floor(x) ], weight= 44
Operation  81 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  82 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  83 : [ tf.not_equal(x, y) ], weight= 44
Operation  84 : [ tf.ones(shape) ], weight= 44
Operation  85 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  86 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  87 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  88 : [ tf.transpose(a, perm) ], weight= 44
Operation  89 : [ tf.math.segment_prod(data, segment_ids) ], weight= 45
Operation  90 : [ tf.argmin(input, axis) ], weight= 48
Operation  91 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  92 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  93 : [ tf.math.logical_not(x) ], weight= 48
Operation  94 : [ tf.math.negative(x) ], weight= 48
Operation  95 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  96 : [ tf.math.top_k(input, k) ], weight= 48
Operation  97 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  98 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  99 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  100 : [ tf.sign(x) ], weight= 48
Operation  101 : [ tf.unique_with_counts(x) ], weight= 48
Operation  102 : [ tf.exp(x) ], weight= 52
Operation  103 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  104 : [ tf.math.log(x) ], weight= 52
Operation  105 : [ tf.math.reciprocal(x) ], weight= 52
Operation  106 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  107 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  108 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  109 : [ tf.round(x) ], weight= 52
Operation  110 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  111 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  112 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  113 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  114 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  115 : [ tf.range(start, limit, delta) ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[1 2 3 4]
 [5 6 7 8]], shape=(2, 4), dtype=int32)

Output:
tf.Tensor(
[[[1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]
  [1 2 3 4]]

 [[5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]
  [5 6 7 8]]], shape=(2, 6, 4), dtype=int32)

Constants: [6, 0, 1, -1, True, False, 2, 4]

Description: Repeat each input entry 6 times

Searching...

Found solution: tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)

Solution was found in 4.2 seconds:
tf.repeat(tf.expand_dims(in1, 1), 6, axis=1)
tf.tile(tf.expand_dims(in1, 1), (1, 6, 1))
Reordered weights:
Operation  0 : [ tf.reduce_max(input_tensor) ], weight= 14
Operation  1 : [ tf.cast(x, dtype) ], weight= 16
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.gather(params, indices) ], weight= 18
Operation  4 : [ tf.reduce_max(input_tensor, axis) ], weight= 18
Operation  5 : [ PairCreationOperation ], weight= 20
Operation  6 : [ SingletonTupleCreationOperation ], weight= 20
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 21
Operation  8 : [ tf.gather_nd(params, indices) ], weight= 21
Operation  9 : [ tf.math.segment_max(data, segment_ids) ], weight= 22
Operation  10 : [ tf.constant(value) ], weight= 23
Operation  11 : [ tf.squeeze(input, axis) ], weight= 23
Operation  12 : [ tf.constant(value, dtype) ], weight= 24
Operation  13 : [ tf.equal(x, y) ], weight= 24
Operation  14 : [ tf.greater(x, y) ], weight= 24
Operation  15 : [ tf.matmul(a, b) ], weight= 24
Operation  16 : [ tf.maximum(x, y) ], weight= 24
Operation  17 : [ tf.multiply(x, y) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  21 : [ tf.transpose(a) ], weight= 24
Operation  22 : [ tf.where(condition) ], weight= 24
Operation  23 : [ tf.where(condition, x, y) ], weight= 24
Operation  24 : [ tf.shape(input) ], weight= 27
Operation  25 : [ SlicingAxis0BothOperation ], weight= 27
Operation  26 : [ SlicingAxis0LeftOperation ], weight= 27
Operation  27 : [ SlicingAxis0RightOperation ], weight= 27
Operation  28 : [ tf.add(x, y) ], weight= 28
Operation  29 : [ tf.divide(x, y) ], weight= 28
Operation  30 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  31 : [ tf.range(start) ], weight= 28
Operation  32 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.subtract(x, y) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.math.bincount(arr) ], weight= 30
Operation  37 : [ tf.math.segment_sum(data, segment_ids) ], weight= 30
Operation  38 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 30
Operation  39 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  40 : [ tf.argmax(input, axis) ], weight= 32
Operation  41 : [ tf.greater_equal(x, y) ], weight= 32
Operation  42 : [ tf.minimum(x, y) ], weight= 32
Operation  43 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  44 : [ tf.zeros_like(input) ], weight= 32
Operation  45 : [ IndexingAxis1Operation ], weight= 32
Operation  46 : [ IndexingOperation ], weight= 32
Operation  47 : [ tf.concat(values, axis) ], weight= 36
Operation  48 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  49 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  50 : [ tf.ones_like(input) ], weight= 36
Operation  51 : [ tf.stack(values, axis) ], weight= 36
Operation  52 : [ SlicingAxis1BothOperation ], weight= 36
Operation  53 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  54 : [ SlicingAxis1RightOperation ], weight= 36
Operation  55 : [ TripleCreationOperation ], weight= 36
Operation  56 : [ tf.squeeze(input) ], weight= 38
Operation  57 : [ tf.abs(x) ], weight= 40
Operation  58 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  59 : [ tf.eye(num_rows) ], weight= 40
Operation  60 : [ tf.fill(dims, value) ], weight= 40
Operation  61 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.math.segment_mean(data, segment_ids) ], weight= 42
Operation  71 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  72 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  73 : [ tf.add_n(inputs) ], weight= 44
Operation  74 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  80 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  81 : [ tf.not_equal(x, y) ], weight= 44
Operation  82 : [ tf.ones(shape) ], weight= 44
Operation  83 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  84 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  85 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  86 : [ tf.transpose(a, perm) ], weight= 44
Operation  87 : [ tf.math.segment_prod(data, segment_ids) ], weight= 45
Operation  88 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 45
Operation  89 : [ tf.argmin(input, axis) ], weight= 48
Operation  90 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  91 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  92 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  93 : [ tf.math.logical_not(x) ], weight= 48
Operation  94 : [ tf.math.negative(x) ], weight= 48
Operation  95 : [ tf.math.top_k(input, k) ], weight= 48
Operation  96 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  97 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  98 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  99 : [ tf.sign(x) ], weight= 48
Operation  100 : [ tf.unique_with_counts(x) ], weight= 48
Operation  101 : [ tf.exp(x) ], weight= 52
Operation  102 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  103 : [ tf.math.log(x) ], weight= 52
Operation  104 : [ tf.math.reciprocal(x) ], weight= 52
Operation  105 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  106 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  107 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  108 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  109 : [ tf.round(x) ], weight= 52
Operation  110 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  111 : [ tf.sort(values, axis) ], weight= 52
Operation  112 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  113 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  114 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  115 : [ tf.range(start, limit, delta) ], weight= 56
Operation  116 : [ tf.repeat(input, repeats) ], weight= 56
Operation  117 : [ tf.sqrt(x) ], weight= 56
Operation  118 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  119 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  120 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([0 1 1 2 3 3 3 3], shape=(8,), dtype=int32)

Input 'in2':
tf.Tensor([ 1  3  4  5 10  8  9  4], shape=(8,), dtype=int32)

Output:
tf.Tensor([ 1  4  5 10], shape=(4,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 8]

Description: Take the max from each group of elements

Searching...

Found solution: tf.math.segment_max(in2, in1)

Solution was found in 0.1 seconds:
tf.math.segment_max(in2, in1)
tf.math.segment_max(in2, in1)
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.argmax(input, axis) ], weight= 18
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.gather(params, indices) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.boolean_mask(tensor, mask) ], weight= 21
Operation  7 : [ tf.gather_nd(params, indices) ], weight= 21
Operation  8 : [ tf.constant(value) ], weight= 23
Operation  9 : [ tf.squeeze(input, axis) ], weight= 23
Operation  10 : [ tf.constant(value, dtype) ], weight= 24
Operation  11 : [ tf.equal(x, y) ], weight= 24
Operation  12 : [ tf.greater(x, y) ], weight= 24
Operation  13 : [ tf.matmul(a, b) ], weight= 24
Operation  14 : [ tf.maximum(x, y) ], weight= 24
Operation  15 : [ tf.multiply(x, y) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  21 : [ tf.transpose(a) ], weight= 24
Operation  22 : [ tf.where(condition) ], weight= 24
Operation  23 : [ tf.where(condition, x, y) ], weight= 24
Operation  24 : [ IndexingOperation ], weight= 24
Operation  25 : [ SlicingAxis0BothOperation ], weight= 27
Operation  26 : [ SlicingAxis0LeftOperation ], weight= 27
Operation  27 : [ SlicingAxis0RightOperation ], weight= 27
Operation  28 : [ tf.add(x, y) ], weight= 28
Operation  29 : [ tf.divide(x, y) ], weight= 28
Operation  30 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  31 : [ tf.range(start) ], weight= 28
Operation  32 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.subtract(x, y) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.math.bincount(arr) ], weight= 30
Operation  37 : [ tf.math.segment_max(data, segment_ids) ], weight= 30
Operation  38 : [ tf.math.segment_sum(data, segment_ids) ], weight= 30
Operation  39 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  40 : [ tf.greater_equal(x, y) ], weight= 32
Operation  41 : [ tf.minimum(x, y) ], weight= 32
Operation  42 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  43 : [ tf.zeros_like(input) ], weight= 32
Operation  44 : [ IndexingAxis1Operation ], weight= 32
Operation  45 : [ tf.argmin(input, axis) ], weight= 36
Operation  46 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 36
Operation  47 : [ tf.concat(values, axis) ], weight= 36
Operation  48 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  49 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  50 : [ tf.ones_like(input) ], weight= 36
Operation  51 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  52 : [ tf.shape(input) ], weight= 36
Operation  53 : [ tf.stack(values, axis) ], weight= 36
Operation  54 : [ SlicingAxis1BothOperation ], weight= 36
Operation  55 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  56 : [ SlicingAxis1RightOperation ], weight= 36
Operation  57 : [ TripleCreationOperation ], weight= 36
Operation  58 : [ tf.squeeze(input) ], weight= 38
Operation  59 : [ tf.abs(x) ], weight= 40
Operation  60 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  61 : [ tf.eye(num_rows) ], weight= 40
Operation  62 : [ tf.fill(dims, value) ], weight= 40
Operation  63 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.zeros(shape) ], weight= 40
Operation  73 : [ tf.math.segment_mean(data, segment_ids) ], weight= 42
Operation  74 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 42
Operation  75 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  76 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  77 : [ tf.add_n(inputs) ], weight= 44
Operation  78 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  79 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  80 : [ tf.math.ceil(x) ], weight= 44
Operation  81 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  82 : [ tf.math.floor(x) ], weight= 44
Operation  83 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  84 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  85 : [ tf.not_equal(x, y) ], weight= 44
Operation  86 : [ tf.ones(shape) ], weight= 44
Operation  87 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  88 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  89 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  90 : [ tf.transpose(a, perm) ], weight= 44
Operation  91 : [ tf.math.segment_prod(data, segment_ids) ], weight= 45
Operation  92 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 45
Operation  93 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  94 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  95 : [ tf.math.logical_not(x) ], weight= 48
Operation  96 : [ tf.math.negative(x) ], weight= 48
Operation  97 : [ tf.math.top_k(input, k) ], weight= 48
Operation  98 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  99 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  100 : [ tf.sign(x) ], weight= 48
Operation  101 : [ tf.unique_with_counts(x) ], weight= 48
Operation  102 : [ tf.exp(x) ], weight= 52
Operation  103 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  104 : [ tf.math.log(x) ], weight= 52
Operation  105 : [ tf.math.reciprocal(x) ], weight= 52
Operation  106 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  107 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  108 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  109 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  110 : [ tf.round(x) ], weight= 52
Operation  111 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  112 : [ tf.sort(values, axis) ], weight= 52
Operation  113 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  114 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  115 : [ tf.range(start, limit, delta) ], weight= 56
Operation  116 : [ tf.repeat(input, repeats) ], weight= 56
Operation  117 : [ tf.sqrt(x) ], weight= 56
Operation  118 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  119 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  120 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([0 0 0 1 1 1 1 2 2 2 2 3 4 4 5 5], shape=(16,), dtype=int32)

Input 'in2':
tf.Tensor([ 4  1  8  2  5  7  9  3  7  3  1 42  1  2  4  0], shape=(16,), dtype=int32)

Output:
tf.Tensor([2 3 1 0 1 0], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6, 16]

Description: Take the argmax of each group of elements

Searching...

Could not find solution within 300 seconds.
tf.cast(tf.argmax((tf.sequence_mask(tf.cumsum(tf.math.bincount(in1)), dtype=tf.int32) - tf.sequence_mask(tf.cumsum(tf.math.bincount(in1), exclusive=True), dtype=tf.int32, maxlen=in1.shape[0])) * in2, axis=1), tf.int32) - tf.cumsum(tf.math.bincount(in1), exclusive=True)
Reordered weights:
Operation  0 : [ PairCreationOperation ], weight= 15
Operation  1 : [ SingletonTupleCreationOperation ], weight= 15
Operation  2 : [ tf.cast(x, dtype) ], weight= 16
Operation  3 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  4 : [ tf.greater(x, y) ], weight= 18
Operation  5 : [ tf.sequence_mask(lengths) ], weight= 18
Operation  6 : [ tf.tensordot(a, b, axes) ], weight= 18
Operation  7 : [ tf.boolean_mask(tensor, mask) ], weight= 21
Operation  8 : [ tf.one_hot(indices, depth) ], weight= 21
Operation  9 : [ tf.constant(value) ], weight= 23
Operation  10 : [ tf.squeeze(input, axis) ], weight= 23
Operation  11 : [ tf.constant(value, dtype) ], weight= 24
Operation  12 : [ tf.equal(x, y) ], weight= 24
Operation  13 : [ tf.gather(params, indices) ], weight= 24
Operation  14 : [ tf.greater_equal(x, y) ], weight= 24
Operation  15 : [ tf.matmul(a, b) ], weight= 24
Operation  16 : [ tf.maximum(x, y) ], weight= 24
Operation  17 : [ tf.multiply(x, y) ], weight= 24
Operation  18 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  19 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  21 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  22 : [ tf.transpose(a) ], weight= 24
Operation  23 : [ tf.where(condition) ], weight= 24
Operation  24 : [ tf.where(condition, x, y) ], weight= 24
Operation  25 : [ tf.sequence_mask(lengths, maxlen) ], weight= 25
Operation  26 : [ SlicingAxis1BothOperation ], weight= 27
Operation  27 : [ SlicingAxis1LeftOperation ], weight= 27
Operation  28 : [ SlicingAxis1RightOperation ], weight= 27
Operation  29 : [ tf.add(x, y) ], weight= 28
Operation  30 : [ tf.divide(x, y) ], weight= 28
Operation  31 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  32 : [ tf.range(start) ], weight= 28
Operation  33 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  34 : [ tf.square(x) ], weight= 28
Operation  35 : [ tf.subtract(x, y) ], weight= 28
Operation  36 : [ tf.tile(input, multiples) ], weight= 28
Operation  37 : [ tf.argsort(values, axis, stable=True) ], weight= 30
Operation  38 : [ tf.math.bincount(arr) ], weight= 30
Operation  39 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  40 : [ tf.argmax(input, axis) ], weight= 32
Operation  41 : [ tf.minimum(x, y) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingAxis1Operation ], weight= 32
Operation  44 : [ IndexingOperation ], weight= 32
Operation  45 : [ tf.not_equal(x, y) ], weight= 33
Operation  46 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 36
Operation  47 : [ tf.concat(values, axis) ], weight= 36
Operation  48 : [ tf.eye(num_rows, dtype) ], weight= 36
Operation  49 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  50 : [ tf.ones_like(input) ], weight= 36
Operation  51 : [ tf.shape(input) ], weight= 36
Operation  52 : [ tf.sign(x) ], weight= 36
Operation  53 : [ tf.stack(values, axis) ], weight= 36
Operation  54 : [ SlicingAxis0BothOperation ], weight= 36
Operation  55 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  56 : [ SlicingAxis0RightOperation ], weight= 36
Operation  57 : [ TripleCreationOperation ], weight= 36
Operation  58 : [ tf.squeeze(input) ], weight= 38
Operation  59 : [ tf.abs(x) ], weight= 40
Operation  60 : [ tf.eye(num_rows) ], weight= 40
Operation  61 : [ tf.fill(dims, value) ], weight= 40
Operation  62 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  63 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.unstack(value, axis) ], weight= 40
Operation  73 : [ tf.zeros(shape) ], weight= 40
Operation  74 : [ tf.add_n(inputs) ], weight= 44
Operation  75 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  76 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  77 : [ tf.math.ceil(x) ], weight= 44
Operation  78 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  79 : [ tf.math.floor(x) ], weight= 44
Operation  80 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  81 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  82 : [ tf.ones(shape) ], weight= 44
Operation  83 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 45
Operation  87 : [ tf.argmin(input, axis) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  120 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([3 4 2 1], shape=(4,), dtype=int32)

Output:
tf.Tensor(
[[1 1 1 0 0]
 [1 1 1 1 0]
 [1 1 0 0 0]
 [1 0 0 0 0]], shape=(4, 5), dtype=int32)

Constants: [5, 0, 1, -1, True, False, 4]

Description: create a mask for sequences of the given lengths

Searching...

Found solution: tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)

Solution was found in 0.1 seconds:
tf.cast(tf.sequence_mask(in1, maxlen=5), tf.int32)
tf.cast(tf.greater(tf.expand_dims(in1, 1), tf.range(5)), tf.int32)
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ tf.reduce_max(input_tensor) ], weight= 18
Operation  3 : [ tf.reduce_sum(input_tensor) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.add(x, y) ], weight= 21
Operation  7 : [ tf.argsort(values, axis, stable=True) ], weight= 22
Operation  8 : [ tf.constant(value) ], weight= 23
Operation  9 : [ tf.squeeze(input, axis) ], weight= 23
Operation  10 : [ tf.constant(value, dtype) ], weight= 24
Operation  11 : [ tf.equal(x, y) ], weight= 24
Operation  12 : [ tf.gather(params, indices) ], weight= 24
Operation  13 : [ tf.greater(x, y) ], weight= 24
Operation  14 : [ tf.matmul(a, b) ], weight= 24
Operation  15 : [ tf.maximum(x, y) ], weight= 24
Operation  16 : [ tf.multiply(x, y) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  19 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  20 : [ tf.transpose(a) ], weight= 24
Operation  21 : [ tf.where(condition) ], weight= 24
Operation  22 : [ tf.where(condition, x, y) ], weight= 24
Operation  23 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 27
Operation  24 : [ tf.ones_like(input) ], weight= 27
Operation  25 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  26 : [ tf.divide(x, y) ], weight= 28
Operation  27 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  28 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  29 : [ tf.range(start) ], weight= 28
Operation  30 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  31 : [ tf.square(x) ], weight= 28
Operation  32 : [ tf.subtract(x, y) ], weight= 28
Operation  33 : [ tf.tile(input, multiples) ], weight= 28
Operation  34 : [ tf.sort(values, axis) ], weight= 29
Operation  35 : [ tf.reduce_mean(input_tensor) ], weight= 30
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingAxis1Operation ], weight= 32
Operation  42 : [ IndexingOperation ], weight= 32
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 45
Operation  87 : [ tf.argmin(input, axis) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.exp(x) ], weight= 52
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.log(x) ], weight= 52
Operation  101 : [ tf.math.reciprocal(x) ], weight= 52
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  120 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  121 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  123 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'in1':
tf.Tensor([1 1 1 0 0 2], shape=(6,), dtype=int32)

Input 'in2':
tf.Tensor([10 20 30 14 15 26], shape=(6,), dtype=int32)

Output:
tf.Tensor([14 15 10 20 30 26], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6]

Description: sort the segments

Searching...

Found solution: tf.gather(in2, tf.argsort(in1, axis=0, stable=True))

Solution was found in 2.6 seconds:
tf.gather(in2, tf.argsort(in1, axis=0, stable=True))
tf.gather(in2, tf.argsort(in1, stable=True))
Reordered weights:
Operation  0 : [ tf.gather(params, indices) ], weight= 14
Operation  1 : [ tf.cast(x, dtype) ], weight= 16
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ PairCreationOperation ], weight= 20
Operation  4 : [ SingletonTupleCreationOperation ], weight= 20
Operation  5 : [ tf.boolean_mask(tensor, mask) ], weight= 21
Operation  6 : [ tf.gather_nd(params, indices) ], weight= 21
Operation  7 : [ tf.constant(value) ], weight= 23
Operation  8 : [ tf.squeeze(input, axis) ], weight= 23
Operation  9 : [ tf.constant(value, dtype) ], weight= 24
Operation  10 : [ tf.equal(x, y) ], weight= 24
Operation  11 : [ tf.greater(x, y) ], weight= 24
Operation  12 : [ tf.matmul(a, b) ], weight= 24
Operation  13 : [ tf.maximum(x, y) ], weight= 24
Operation  14 : [ tf.multiply(x, y) ], weight= 24
Operation  15 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  19 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  20 : [ tf.transpose(a) ], weight= 24
Operation  21 : [ tf.where(condition) ], weight= 24
Operation  22 : [ tf.where(condition, x, y) ], weight= 24
Operation  23 : [ tf.shape(input) ], weight= 27
Operation  24 : [ SlicingAxis0BothOperation ], weight= 27
Operation  25 : [ SlicingAxis0LeftOperation ], weight= 27
Operation  26 : [ SlicingAxis0RightOperation ], weight= 27
Operation  27 : [ tf.add(x, y) ], weight= 28
Operation  28 : [ tf.divide(x, y) ], weight= 28
Operation  29 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  30 : [ tf.range(start) ], weight= 28
Operation  31 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  32 : [ tf.square(x) ], weight= 28
Operation  33 : [ tf.subtract(x, y) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 30
Operation  36 : [ tf.math.bincount(arr) ], weight= 30
Operation  37 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.minimum(x, y) ], weight= 32
Operation  41 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingAxis1Operation ], weight= 32
Operation  44 : [ IndexingOperation ], weight= 32
Operation  45 : [ tf.concat(values, axis) ], weight= 36
Operation  46 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  47 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  48 : [ tf.ones_like(input) ], weight= 36
Operation  49 : [ tf.stack(values, axis) ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.abs(x) ], weight= 40
Operation  56 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.math.segment_mean(data, segment_ids) ], weight= 42
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 45
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  96 : [ tf.sign(x) ], weight= 48
Operation  97 : [ tf.unique_with_counts(x) ], weight= 48
Operation  98 : [ tf.exp(x) ], weight= 52
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.log(x) ], weight= 52
Operation  101 : [ tf.math.reciprocal(x) ], weight= 52
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.sort(values, axis) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  120 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([10 20  0 40  0 30], shape=(6,), dtype=int32)

Input 'in2':
tf.Tensor([1 1 0 1 0 1], shape=(6,), dtype=int32)

Output:
tf.Tensor([10 20 40 30], shape=(4,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 6]

Description: gather the marked elements

Searching...

Found solution: tf.boolean_mask(in1, tf.cast(in2, tf.bool))

Solution was found in 1.1 seconds:
tf.boolean_mask(in1, tf.cast(in2, tf.bool))
tf.boolean_mask(in1, tf.cast(in2, tf.bool))
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 12
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ tf.greater(x, y) ], weight= 18
Operation  3 : [ tf.reduce_max(input_tensor, axis) ], weight= 18
Operation  4 : [ tf.reduce_sum(input_tensor, axis) ], weight= 18
Operation  5 : [ PairCreationOperation ], weight= 20
Operation  6 : [ SingletonTupleCreationOperation ], weight= 20
Operation  7 : [ tf.constant(value) ], weight= 23
Operation  8 : [ tf.squeeze(input, axis) ], weight= 23
Operation  9 : [ tf.argmax(input, axis) ], weight= 24
Operation  10 : [ tf.constant(value, dtype) ], weight= 24
Operation  11 : [ tf.equal(x, y) ], weight= 24
Operation  12 : [ tf.gather(params, indices) ], weight= 24
Operation  13 : [ tf.matmul(a, b) ], weight= 24
Operation  14 : [ tf.maximum(x, y) ], weight= 24
Operation  15 : [ tf.multiply(x, y) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  18 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  19 : [ tf.transpose(a) ], weight= 24
Operation  20 : [ tf.where(condition) ], weight= 24
Operation  21 : [ tf.where(condition, x, y) ], weight= 24
Operation  22 : [ IndexingAxis1Operation ], weight= 24
Operation  23 : [ tf.shape(input) ], weight= 27
Operation  24 : [ tf.add(x, y) ], weight= 28
Operation  25 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  26 : [ tf.divide(x, y) ], weight= 28
Operation  27 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  28 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  29 : [ tf.range(start) ], weight= 28
Operation  30 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  31 : [ tf.square(x) ], weight= 28
Operation  32 : [ tf.subtract(x, y) ], weight= 28
Operation  33 : [ tf.tile(input, multiples) ], weight= 28
Operation  34 : [ tf.abs(x) ], weight= 30
Operation  35 : [ tf.argsort(values, axis, stable=True) ], weight= 30
Operation  36 : [ tf.reduce_mean(input_tensor, axis) ], weight= 30
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.minimum(x, y) ], weight= 32
Operation  39 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  40 : [ tf.zeros_like(input) ], weight= 32
Operation  41 : [ IndexingOperation ], weight= 32
Operation  42 : [ tf.argmin(input, axis) ], weight= 36
Operation  43 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 36
Operation  44 : [ tf.concat(values, axis) ], weight= 36
Operation  45 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ tf.unique_with_counts(x) ], weight= 36
Operation  49 : [ SlicingAxis0BothOperation ], weight= 36
Operation  50 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis0RightOperation ], weight= 36
Operation  52 : [ SlicingAxis1BothOperation ], weight= 36
Operation  53 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  54 : [ SlicingAxis1RightOperation ], weight= 36
Operation  55 : [ TripleCreationOperation ], weight= 36
Operation  56 : [ tf.squeeze(input) ], weight= 38
Operation  57 : [ tf.eye(num_rows) ], weight= 40
Operation  58 : [ tf.fill(dims, value) ], weight= 40
Operation  59 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  73 : [ tf.add_n(inputs) ], weight= 44
Operation  74 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  80 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  81 : [ tf.not_equal(x, y) ], weight= 44
Operation  82 : [ tf.ones(shape) ], weight= 44
Operation  83 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  84 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  85 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  86 : [ tf.transpose(a, perm) ], weight= 44
Operation  87 : [ tf.math.reciprocal_no_nan(x) ], weight= 45
Operation  88 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  89 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  90 : [ tf.math.logical_not(x) ], weight= 48
Operation  91 : [ tf.math.negative(x) ], weight= 48
Operation  92 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.exp(x) ], weight= 52
Operation  99 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  100 : [ tf.math.log(x) ], weight= 52
Operation  101 : [ tf.math.reciprocal(x) ], weight= 52
Operation  102 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  103 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  104 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  105 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  106 : [ tf.round(x) ], weight= 52
Operation  107 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  108 : [ tf.sort(values, axis) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.range(start, limit, delta) ], weight= 56
Operation  114 : [ tf.repeat(input, repeats) ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 1.    0.3  -4.2   0.    2.1   0.4 ]
 [-0.1   0.    1.4  -1.    0.4   0.  ]
 [ 0.1   0.    0.7  -0.3   0.5  -0.1 ]
 [ 1.4   2.5   0.3   0.01  0.    1.2 ]], shape=(4, 6), dtype=float32)

Output:
tf.Tensor([4 2 3 5], shape=(4,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 6]

Description: count the number of elements greater than 0 in each row

Searching...

Found solution: tf.reduce_sum(tf.cast(tf.greater(in1, tf.cast(0, tf.float32)), tf.int32), axis=1)

Solution was found in 23.2 seconds:
tf.reduce_sum(tf.cast(tf.greater(in1, tf.cast(0, tf.float32)), tf.int32), axis=1)
tf.reduce_sum(tf.cast(tf.greater(in1, 0), tf.int32), axis=1)
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 12
Operation  1 : [ tf.equal(x, y) ], weight= 18
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.greater(x, y) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.constant(value) ], weight= 23
Operation  7 : [ tf.squeeze(input, axis) ], weight= 23
Operation  8 : [ tf.constant(value, dtype) ], weight= 24
Operation  9 : [ tf.gather(params, indices) ], weight= 24
Operation  10 : [ tf.greater_equal(x, y) ], weight= 24
Operation  11 : [ tf.matmul(a, b) ], weight= 24
Operation  12 : [ tf.maximum(x, y) ], weight= 24
Operation  13 : [ tf.multiply(x, y) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  15 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  19 : [ tf.transpose(a) ], weight= 24
Operation  20 : [ tf.where(condition) ], weight= 24
Operation  21 : [ tf.where(condition, x, y) ], weight= 24
Operation  22 : [ IndexingOperation ], weight= 24
Operation  23 : [ tf.add(x, y) ], weight= 28
Operation  24 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  25 : [ tf.divide(x, y) ], weight= 28
Operation  26 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  27 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  28 : [ tf.range(start) ], weight= 28
Operation  29 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  30 : [ tf.square(x) ], weight= 28
Operation  31 : [ tf.subtract(x, y) ], weight= 28
Operation  32 : [ tf.tile(input, multiples) ], weight= 28
Operation  33 : [ tf.argsort(values, axis, stable=True) ], weight= 30
Operation  34 : [ tf.zeros(shape) ], weight= 30
Operation  35 : [ tf.argmax(input, axis) ], weight= 32
Operation  36 : [ tf.minimum(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 33
Operation  41 : [ tf.math.ceil(x) ], weight= 33
Operation  42 : [ tf.not_equal(x, y) ], weight= 33
Operation  43 : [ tf.ones(shape) ], weight= 33
Operation  44 : [ tf.argmin(input, axis) ], weight= 36
Operation  45 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 36
Operation  46 : [ tf.concat(values, axis) ], weight= 36
Operation  47 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  48 : [ tf.ones_like(input) ], weight= 36
Operation  49 : [ tf.reverse(tensor, axis) ], weight= 36
Operation  50 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  51 : [ tf.shape(input) ], weight= 36
Operation  52 : [ tf.sign(x) ], weight= 36
Operation  53 : [ tf.stack(values, axis) ], weight= 36
Operation  54 : [ SlicingAxis0BothOperation ], weight= 36
Operation  55 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  56 : [ SlicingAxis0RightOperation ], weight= 36
Operation  57 : [ SlicingAxis1BothOperation ], weight= 36
Operation  58 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  59 : [ SlicingAxis1RightOperation ], weight= 36
Operation  60 : [ TripleCreationOperation ], weight= 36
Operation  61 : [ tf.squeeze(input) ], weight= 38
Operation  62 : [ tf.round(x) ], weight= 39
Operation  63 : [ tf.sort(values, axis) ], weight= 39
Operation  64 : [ tf.abs(x) ], weight= 40
Operation  65 : [ tf.eye(num_rows) ], weight= 40
Operation  66 : [ tf.fill(dims, value) ], weight= 40
Operation  67 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  68 : [ tf.math.bincount(arr) ], weight= 40
Operation  69 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  70 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  71 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  72 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  73 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  74 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  75 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  76 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  77 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  78 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  79 : [ tf.unstack(value, axis) ], weight= 40
Operation  80 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  81 : [ tf.add_n(inputs) ], weight= 44
Operation  82 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  83 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  84 : [ tf.math.floor(x) ], weight= 44
Operation  85 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  86 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  87 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  88 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  89 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  90 : [ tf.transpose(a, perm) ], weight= 44
Operation  91 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 45
Operation  92 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  93 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  94 : [ tf.math.logical_not(x) ], weight= 48
Operation  95 : [ tf.math.negative(x) ], weight= 48
Operation  96 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  97 : [ tf.math.top_k(input, k) ], weight= 48
Operation  98 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  99 : [ tf.unique_with_counts(x) ], weight= 48
Operation  100 : [ tf.exp(x) ], weight= 52
Operation  101 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  102 : [ tf.math.log(x) ], weight= 52
Operation  103 : [ tf.math.reciprocal(x) ], weight= 52
Operation  104 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  105 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  106 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  107 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  108 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  112 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  113 : [ tf.range(start, limit, delta) ], weight= 56
Operation  114 : [ tf.repeat(input, repeats) ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  120 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  121 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  123 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 1.   0.3 -4.2  0.   2.1]
 [-0.1  0.   1.4 -1.   0.4]
 [ 0.1  0.   0.7 -0.3  0.5]
 [ 1.4  2.5  0.3 -0.1  0. ]], shape=(4, 5), dtype=float32)

Output:
tf.Tensor(
[[1 1 0 1 0]
 [0 1 0 0 1]
 [1 1 1 0 1]
 [0 0 1 0 1]], shape=(4, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 5]

Description: identify elements between 0 and 1

Searching...

Found solution: tf.cast(tf.greater_equal(in1, tf.square(in1)), tf.int32)

Solution was found in 1.8 seconds:
tf.cast(tf.greater_equal(in1, tf.square(in1)), tf.int32)
tf.cast(tf.logical_and(0 <= in1, in1 <= 1), tf.int32)
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ tf.matmul(a, b) ], weight= 18
Operation  3 : [ tf.reduce_max(input_tensor, axis) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.range(start) ], weight= 21
Operation  7 : [ tf.constant(value) ], weight= 23
Operation  8 : [ tf.squeeze(input, axis) ], weight= 23
Operation  9 : [ tf.constant(value, dtype) ], weight= 24
Operation  10 : [ tf.equal(x, y) ], weight= 24
Operation  11 : [ tf.gather(params, indices) ], weight= 24
Operation  12 : [ tf.greater(x, y) ], weight= 24
Operation  13 : [ tf.maximum(x, y) ], weight= 24
Operation  14 : [ tf.multiply(x, y) ], weight= 24
Operation  15 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  19 : [ tf.transpose(a) ], weight= 24
Operation  20 : [ tf.where(condition) ], weight= 24
Operation  21 : [ tf.where(condition, x, y) ], weight= 24
Operation  22 : [ IndexingAxis1Operation ], weight= 24
Operation  23 : [ tf.concat(values, axis) ], weight= 27
Operation  24 : [ tf.shape(input) ], weight= 27
Operation  25 : [ SlicingAxis1LeftOperation ], weight= 27
Operation  26 : [ SlicingAxis1RightOperation ], weight= 27
Operation  27 : [ tf.add(x, y) ], weight= 28
Operation  28 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  29 : [ tf.divide(x, y) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.subtract(x, y) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.math.bincount(arr) ], weight= 30
Operation  37 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 30
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.minimum(x, y) ], weight= 32
Operation  41 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  42 : [ tf.zeros_like(input) ], weight= 32
Operation  43 : [ IndexingOperation ], weight= 32
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.abs(x) ], weight= 40
Operation  55 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  56 : [ tf.eye(num_rows) ], weight= 40
Operation  57 : [ tf.fill(dims, value) ], weight= 40
Operation  58 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  59 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  60 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  61 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  62 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  63 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  64 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.unstack(value, axis) ], weight= 40
Operation  69 : [ tf.zeros(shape) ], weight= 40
Operation  70 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 45
Operation  86 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 45
Operation  87 : [ tf.argmin(input, axis) ], weight= 48
Operation  88 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  89 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  90 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  91 : [ tf.math.logical_not(x) ], weight= 48
Operation  92 : [ tf.math.negative(x) ], weight= 48
Operation  93 : [ tf.math.top_k(input, k) ], weight= 48
Operation  94 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  95 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  96 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.exp(x) ], weight= 52
Operation  100 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  101 : [ tf.math.log(x) ], weight= 52
Operation  102 : [ tf.math.reciprocal(x) ], weight= 52
Operation  103 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  104 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  105 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  106 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  107 : [ tf.round(x) ], weight= 52
Operation  108 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  109 : [ tf.sort(values, axis) ], weight= 52
Operation  110 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  111 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  112 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  113 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  114 : [ tf.range(start, limit, delta) ], weight= 56
Operation  115 : [ tf.repeat(input, repeats) ], weight= 56
Operation  116 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  117 : [ tf.sqrt(x) ], weight= 56
Operation  118 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  119 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  120 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  121 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  122 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[ 1  2]
 [10 20]], shape=(2, 2), dtype=int32)

Input 'in2':
tf.Tensor(
[[ 3  4  5]
 [30 40 50]], shape=(2, 3), dtype=int32)

Output:
tf.Tensor(
[[ 1  2  3  4  5]
 [10 20 30 40 50]], shape=(2, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 5]

Description: Concatenate batches of sequences

Searching...

Found solution: tf.concat((in1, in2), 1)

Solution was found in 1.6 seconds:
tf.concat((in1, in2), 1)
tf.concat([in1, in2], axis=1)
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.constant(value) ], weight= 17
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ PairCreationOperation ], weight= 20
Operation  4 : [ SingletonTupleCreationOperation ], weight= 20
Operation  5 : [ tf.range(start) ], weight= 21
Operation  6 : [ tf.squeeze(input, axis) ], weight= 23
Operation  7 : [ tf.constant(value, dtype) ], weight= 24
Operation  8 : [ tf.equal(x, y) ], weight= 24
Operation  9 : [ tf.gather(params, indices) ], weight= 24
Operation  10 : [ tf.greater(x, y) ], weight= 24
Operation  11 : [ tf.matmul(a, b) ], weight= 24
Operation  12 : [ tf.maximum(x, y) ], weight= 24
Operation  13 : [ tf.multiply(x, y) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  15 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  19 : [ tf.transpose(a) ], weight= 24
Operation  20 : [ tf.where(condition) ], weight= 24
Operation  21 : [ tf.where(condition, x, y) ], weight= 24
Operation  22 : [ tf.add(x, y) ], weight= 28
Operation  23 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  24 : [ tf.divide(x, y) ], weight= 28
Operation  25 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  26 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.argsort(values, axis, stable=True) ], weight= 30
Operation  32 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 30
Operation  33 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  34 : [ tf.argmax(input, axis) ], weight= 32
Operation  35 : [ tf.greater_equal(x, y) ], weight= 32
Operation  36 : [ tf.minimum(x, y) ], weight= 32
Operation  37 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  38 : [ tf.zeros_like(input) ], weight= 32
Operation  39 : [ IndexingAxis1Operation ], weight= 32
Operation  40 : [ IndexingOperation ], weight= 32
Operation  41 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 36
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 36
Operation  45 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.reverse(tensor, axis) ], weight= 36
Operation  48 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  49 : [ tf.shape(input) ], weight= 36
Operation  50 : [ tf.stack(values, axis) ], weight= 36
Operation  51 : [ SlicingAxis0BothOperation ], weight= 36
Operation  52 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis0RightOperation ], weight= 36
Operation  54 : [ SlicingAxis1BothOperation ], weight= 36
Operation  55 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  56 : [ SlicingAxis1RightOperation ], weight= 36
Operation  57 : [ TripleCreationOperation ], weight= 36
Operation  58 : [ tf.squeeze(input) ], weight= 38
Operation  59 : [ tf.sort(values, axis) ], weight= 39
Operation  60 : [ tf.abs(x) ], weight= 40
Operation  61 : [ tf.eye(num_rows) ], weight= 40
Operation  62 : [ tf.fill(dims, value) ], weight= 40
Operation  63 : [ tf.math.bincount(arr) ], weight= 40
Operation  64 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  65 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  66 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  67 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  68 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  72 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  73 : [ tf.unstack(value, axis) ], weight= 40
Operation  74 : [ tf.zeros(shape) ], weight= 40
Operation  75 : [ tf.math.segment_mean(data, segment_ids) ], weight= 42
Operation  76 : [ tf.add_n(inputs) ], weight= 44
Operation  77 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  78 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  79 : [ tf.math.ceil(x) ], weight= 44
Operation  80 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  81 : [ tf.math.floor(x) ], weight= 44
Operation  82 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  83 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  84 : [ tf.not_equal(x, y) ], weight= 44
Operation  85 : [ tf.ones(shape) ], weight= 44
Operation  86 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  87 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  88 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  89 : [ tf.transpose(a, perm) ], weight= 44
Operation  90 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 45
Operation  91 : [ tf.argmin(input, axis) ], weight= 48
Operation  92 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  93 : [ tf.math.logical_not(x) ], weight= 48
Operation  94 : [ tf.math.negative(x) ], weight= 48
Operation  95 : [ tf.math.top_k(input, k) ], weight= 48
Operation  96 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.exp(x) ], weight= 52
Operation  100 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  101 : [ tf.math.log(x) ], weight= 52
Operation  102 : [ tf.math.reciprocal(x) ], weight= 52
Operation  103 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  104 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  105 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  106 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  107 : [ tf.round(x) ], weight= 52
Operation  108 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  109 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  110 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  120 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  121 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  123 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'in1':
tf.Tensor(
[[1 3 2 0 0]
 [4 6 5 0 0]
 [8 7 9 0 0]], shape=(3, 5), dtype=int32)

Output:
tf.Tensor(
[[0 1 3 2 0]
 [0 4 6 5 0]
 [0 8 7 9 0]], shape=(3, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 3, 5]

Description: circular buffer

Searching...

Found solution: tf.roll(in1, 1, 1)

Solution was found in 0.6 seconds:
tf.roll(in1, 1, 1)
tf.roll(in1, 1, 1)
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ PairCreationOperation ], weight= 20
Operation  3 : [ SingletonTupleCreationOperation ], weight= 20
Operation  4 : [ tf.range(start) ], weight= 21
Operation  5 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 22
Operation  6 : [ tf.constant(value) ], weight= 23
Operation  7 : [ tf.squeeze(input, axis) ], weight= 23
Operation  8 : [ tf.constant(value, dtype) ], weight= 24
Operation  9 : [ tf.equal(x, y) ], weight= 24
Operation  10 : [ tf.gather(params, indices) ], weight= 24
Operation  11 : [ tf.greater(x, y) ], weight= 24
Operation  12 : [ tf.matmul(a, b) ], weight= 24
Operation  13 : [ tf.maximum(x, y) ], weight= 24
Operation  14 : [ tf.multiply(x, y) ], weight= 24
Operation  15 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  19 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  20 : [ tf.transpose(a) ], weight= 24
Operation  21 : [ tf.where(condition) ], weight= 24
Operation  22 : [ tf.where(condition, x, y) ], weight= 24
Operation  23 : [ tf.concat(values, axis) ], weight= 27
Operation  24 : [ SlicingAxis1BothOperation ], weight= 27
Operation  25 : [ SlicingAxis1LeftOperation ], weight= 27
Operation  26 : [ SlicingAxis1RightOperation ], weight= 27
Operation  27 : [ tf.add(x, y) ], weight= 28
Operation  28 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  29 : [ tf.divide(x, y) ], weight= 28
Operation  30 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  31 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  32 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  33 : [ tf.square(x) ], weight= 28
Operation  34 : [ tf.subtract(x, y) ], weight= 28
Operation  35 : [ tf.tile(input, multiples) ], weight= 28
Operation  36 : [ tf.argsort(values, axis, stable=True) ], weight= 30
Operation  37 : [ tf.math.bincount(arr) ], weight= 30
Operation  38 : [ tf.math.segment_max(data, segment_ids) ], weight= 30
Operation  39 : [ tf.math.segment_sum(data, segment_ids) ], weight= 30
Operation  40 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  41 : [ tf.argmax(input, axis) ], weight= 32
Operation  42 : [ tf.greater_equal(x, y) ], weight= 32
Operation  43 : [ tf.minimum(x, y) ], weight= 32
Operation  44 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  45 : [ tf.zeros_like(input) ], weight= 32
Operation  46 : [ IndexingAxis1Operation ], weight= 32
Operation  47 : [ IndexingOperation ], weight= 32
Operation  48 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 36
Operation  49 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  50 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  51 : [ tf.ones_like(input) ], weight= 36
Operation  52 : [ tf.shape(input) ], weight= 36
Operation  53 : [ tf.stack(values, axis) ], weight= 36
Operation  54 : [ SlicingAxis0BothOperation ], weight= 36
Operation  55 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  56 : [ SlicingAxis0RightOperation ], weight= 36
Operation  57 : [ TripleCreationOperation ], weight= 36
Operation  58 : [ tf.squeeze(input) ], weight= 38
Operation  59 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 39
Operation  60 : [ tf.abs(x) ], weight= 40
Operation  61 : [ tf.eye(num_rows) ], weight= 40
Operation  62 : [ tf.fill(dims, value) ], weight= 40
Operation  63 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.math.segment_mean(data, segment_ids) ], weight= 42
Operation  73 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 42
Operation  74 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 42
Operation  75 : [ tf.add_n(inputs) ], weight= 44
Operation  76 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  77 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  78 : [ tf.math.ceil(x) ], weight= 44
Operation  79 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  80 : [ tf.math.floor(x) ], weight= 44
Operation  81 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  82 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  83 : [ tf.not_equal(x, y) ], weight= 44
Operation  84 : [ tf.ones(shape) ], weight= 44
Operation  85 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  86 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  87 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  88 : [ tf.transpose(a, perm) ], weight= 44
Operation  89 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 45
Operation  90 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 45
Operation  91 : [ tf.argmin(input, axis) ], weight= 48
Operation  92 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  93 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  94 : [ tf.math.logical_not(x) ], weight= 48
Operation  95 : [ tf.math.negative(x) ], weight= 48
Operation  96 : [ tf.math.top_k(input, k) ], weight= 48
Operation  97 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  98 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  99 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  100 : [ tf.sign(x) ], weight= 48
Operation  101 : [ tf.unique_with_counts(x) ], weight= 48
Operation  102 : [ tf.exp(x) ], weight= 52
Operation  103 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  104 : [ tf.math.log(x) ], weight= 52
Operation  105 : [ tf.math.reciprocal(x) ], weight= 52
Operation  106 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  107 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  108 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  109 : [ tf.round(x) ], weight= 52
Operation  110 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  111 : [ tf.sort(values, axis) ], weight= 52
Operation  112 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  113 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  114 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  115 : [ tf.range(start, limit, delta) ], weight= 56
Operation  116 : [ tf.repeat(input, repeats) ], weight= 56
Operation  117 : [ tf.sqrt(x) ], weight= 56
Operation  118 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  119 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  120 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  121 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  122 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor(
[[1 3 5 7]
 [2 4 6 8]], shape=(2, 4), dtype=int32)

Output:
tf.Tensor(
[[1 3 5 7 0]
 [2 4 6 8 0]], shape=(2, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 4, 5]

Description: pad a zero column

Searching...

Found solution: tf.pad(in1, ((0, 0), (0, 1)), mode='CONSTANT')

Solution was found in 67.0 seconds:
tf.pad(in1, ((0, 0), (0, 1)), mode='CONSTANT')
tf.pad(in1, [[0, 0], [0, 1]], 'CONSTANT')
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ tf.gather(params, indices) ], weight= 18
Operation  3 : [ PairCreationOperation ], weight= 20
Operation  4 : [ SingletonTupleCreationOperation ], weight= 20
Operation  5 : [ tf.tile(input, multiples) ], weight= 21
Operation  6 : [ tf.constant(value) ], weight= 23
Operation  7 : [ tf.squeeze(input, axis) ], weight= 23
Operation  8 : [ tf.constant(value, dtype) ], weight= 24
Operation  9 : [ tf.equal(x, y) ], weight= 24
Operation  10 : [ tf.greater(x, y) ], weight= 24
Operation  11 : [ tf.matmul(a, b) ], weight= 24
Operation  12 : [ tf.maximum(x, y) ], weight= 24
Operation  13 : [ tf.multiply(x, y) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  15 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  19 : [ tf.transpose(a) ], weight= 24
Operation  20 : [ tf.where(condition) ], weight= 24
Operation  21 : [ tf.where(condition, x, y) ], weight= 24
Operation  22 : [ tf.concat(values, axis) ], weight= 27
Operation  23 : [ tf.add(x, y) ], weight= 28
Operation  24 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  25 : [ tf.divide(x, y) ], weight= 28
Operation  26 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  27 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  28 : [ tf.range(start) ], weight= 28
Operation  29 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  30 : [ tf.square(x) ], weight= 28
Operation  31 : [ tf.subtract(x, y) ], weight= 28
Operation  32 : [ tf.math.bincount(arr) ], weight= 30
Operation  33 : [ tf.math.segment_max(data, segment_ids) ], weight= 30
Operation  34 : [ tf.math.segment_sum(data, segment_ids) ], weight= 30
Operation  35 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  36 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 30
Operation  37 : [ tf.argmax(input, axis) ], weight= 32
Operation  38 : [ tf.greater_equal(x, y) ], weight= 32
Operation  39 : [ tf.minimum(x, y) ], weight= 32
Operation  40 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  41 : [ tf.zeros_like(input) ], weight= 32
Operation  42 : [ IndexingAxis1Operation ], weight= 32
Operation  43 : [ IndexingOperation ], weight= 32
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.shape(input) ], weight= 36
Operation  48 : [ tf.stack(values, axis) ], weight= 36
Operation  49 : [ SlicingAxis0BothOperation ], weight= 36
Operation  50 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis0RightOperation ], weight= 36
Operation  52 : [ SlicingAxis1BothOperation ], weight= 36
Operation  53 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  54 : [ SlicingAxis1RightOperation ], weight= 36
Operation  55 : [ TripleCreationOperation ], weight= 36
Operation  56 : [ tf.squeeze(input) ], weight= 38
Operation  57 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 39
Operation  58 : [ tf.abs(x) ], weight= 40
Operation  59 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  60 : [ tf.eye(num_rows) ], weight= 40
Operation  61 : [ tf.fill(dims, value) ], weight= 40
Operation  62 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  65 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.math.segment_prod(data, segment_ids) ], weight= 45
Operation  86 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 45
Operation  87 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 45
Operation  88 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 45
Operation  89 : [ tf.argmin(input, axis) ], weight= 48
Operation  90 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  91 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  92 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  93 : [ tf.math.logical_not(x) ], weight= 48
Operation  94 : [ tf.math.negative(x) ], weight= 48
Operation  95 : [ tf.math.top_k(input, k) ], weight= 48
Operation  96 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  97 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  98 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  99 : [ tf.sign(x) ], weight= 48
Operation  100 : [ tf.unique_with_counts(x) ], weight= 48
Operation  101 : [ tf.exp(x) ], weight= 52
Operation  102 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  103 : [ tf.math.log(x) ], weight= 52
Operation  104 : [ tf.math.reciprocal(x) ], weight= 52
Operation  105 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  106 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  107 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  108 : [ tf.round(x) ], weight= 52
Operation  109 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  110 : [ tf.sort(values, axis) ], weight= 52
Operation  111 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  112 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  113 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  114 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  115 : [ tf.range(start, limit, delta) ], weight= 56
Operation  116 : [ tf.repeat(input, repeats) ], weight= 56
Operation  117 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  118 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  119 : [ tf.sqrt(x) ], weight= 56
Operation  120 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  121 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  122 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([1 2 0 3], shape=(4,), dtype=int32)

Input 'in2':
tf.Tensor([2 1 2 3], shape=(4,), dtype=int32)

Output:
tf.Tensor([1 1 2 0 0 3 3 3], shape=(8,), dtype=int32)

Constants: [0, 1, -1, True, False, 4, 8]

Description: replicate elements a given number of times

Searching...

Found solution: tf.repeat(in1, in2)

Solution was found in 1.4 seconds:
tf.repeat(in1, in2)
tf.gather(in1, tf.where(tf.sequence_mask(in2))[:, 0])
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 12
Operation  1 : [ tf.where(condition, x, y) ], weight= 14
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.where(condition) ], weight= 18
Operation  4 : [ PairCreationOperation ], weight= 20
Operation  5 : [ SingletonTupleCreationOperation ], weight= 20
Operation  6 : [ tf.add(x, y) ], weight= 21
Operation  7 : [ tf.subtract(x, y) ], weight= 21
Operation  8 : [ tf.constant(value) ], weight= 23
Operation  9 : [ tf.squeeze(input, axis) ], weight= 23
Operation  10 : [ tf.constant(value, dtype) ], weight= 24
Operation  11 : [ tf.equal(x, y) ], weight= 24
Operation  12 : [ tf.gather(params, indices) ], weight= 24
Operation  13 : [ tf.greater(x, y) ], weight= 24
Operation  14 : [ tf.matmul(a, b) ], weight= 24
Operation  15 : [ tf.maximum(x, y) ], weight= 24
Operation  16 : [ tf.multiply(x, y) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  18 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  20 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  21 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  22 : [ tf.transpose(a) ], weight= 24
Operation  23 : [ tf.shape(input) ], weight= 27
Operation  24 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  25 : [ tf.divide(x, y) ], weight= 28
Operation  26 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  27 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  28 : [ tf.range(start) ], weight= 28
Operation  29 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  30 : [ tf.square(x) ], weight= 28
Operation  31 : [ tf.tile(input, multiples) ], weight= 28
Operation  32 : [ tf.argmax(input, axis) ], weight= 32
Operation  33 : [ tf.greater_equal(x, y) ], weight= 32
Operation  34 : [ tf.minimum(x, y) ], weight= 32
Operation  35 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  36 : [ tf.zeros_like(input) ], weight= 32
Operation  37 : [ IndexingAxis1Operation ], weight= 32
Operation  38 : [ IndexingOperation ], weight= 32
Operation  39 : [ tf.math.cumsum(x, axis) ], weight= 33
Operation  40 : [ tf.math.logical_and(x, y) ], weight= 33
Operation  41 : [ tf.math.logical_or(x, y) ], weight= 33
Operation  42 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 36
Operation  43 : [ tf.concat(values, axis) ], weight= 36
Operation  44 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  47 : [ tf.stack(values, axis) ], weight= 36
Operation  48 : [ SlicingAxis0BothOperation ], weight= 36
Operation  49 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  50 : [ SlicingAxis0RightOperation ], weight= 36
Operation  51 : [ SlicingAxis1BothOperation ], weight= 36
Operation  52 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis1RightOperation ], weight= 36
Operation  54 : [ TripleCreationOperation ], weight= 36
Operation  55 : [ tf.squeeze(input) ], weight= 38
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.fill(dims, value) ], weight= 40
Operation  60 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  61 : [ tf.math.bincount(arr) ], weight= 40
Operation  62 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  66 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  67 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  71 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.unstack(value, axis) ], weight= 40
Operation  73 : [ tf.zeros(shape) ], weight= 40
Operation  74 : [ tf.add_n(inputs) ], weight= 44
Operation  75 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  76 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  77 : [ tf.math.ceil(x) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.math.logical_xor(x, y) ], weight= 45
Operation  86 : [ tf.argmin(input, axis) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  92 : [ tf.math.top_k(input, k) ], weight= 48
Operation  93 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  94 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  107 : [ tf.sort(values, axis) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([ True False False  True False], shape=(5,), dtype=bool)

Input 'in2':
tf.Tensor([1 2 3 4 5], shape=(5,), dtype=int32)

Output:
tf.Tensor([  1 -20 -30   4 -50], shape=(5,), dtype=int32)

Constants: [-10, 0, 1, -1, True, False, 5]

Description: use bool tensor as condition

Searching...

Found solution: tf.where(in1, x=in2, y=tf.multiply(in2, tf.cast(-10, tf.int32)))

Solution was found in 7.9 seconds:
tf.where(in1, x=in2, y=tf.multiply(in2, tf.cast(-10, tf.int32)))
tf.where(in1, in2, tf.multiply(in2, -10))
Reordered weights:
Operation  0 : [ tf.reduce_sum(input_tensor) ], weight= 14
Operation  1 : [ tf.cast(x, dtype) ], weight= 16
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ tf.maximum(x, y) ], weight= 18
Operation  4 : [ tf.multiply(x, y) ], weight= 18
Operation  5 : [ tf.reduce_max(input_tensor) ], weight= 18
Operation  6 : [ tf.reduce_sum(input_tensor, axis) ], weight= 18
Operation  7 : [ PairCreationOperation ], weight= 20
Operation  8 : [ SingletonTupleCreationOperation ], weight= 20
Operation  9 : [ tf.add(x, y) ], weight= 21
Operation  10 : [ tf.subtract(x, y) ], weight= 21
Operation  11 : [ tf.constant(value) ], weight= 23
Operation  12 : [ tf.squeeze(input, axis) ], weight= 23
Operation  13 : [ tf.constant(value, dtype) ], weight= 24
Operation  14 : [ tf.equal(x, y) ], weight= 24
Operation  15 : [ tf.gather(params, indices) ], weight= 24
Operation  16 : [ tf.greater(x, y) ], weight= 24
Operation  17 : [ tf.matmul(a, b) ], weight= 24
Operation  18 : [ tf.minimum(x, y) ], weight= 24
Operation  19 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  21 : [ tf.transpose(a) ], weight= 24
Operation  22 : [ tf.where(condition) ], weight= 24
Operation  23 : [ tf.where(condition, x, y) ], weight= 24
Operation  24 : [ IndexingAxis1Operation ], weight= 24
Operation  25 : [ IndexingOperation ], weight= 24
Operation  26 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  27 : [ tf.divide(x, y) ], weight= 28
Operation  28 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  29 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  30 : [ tf.range(start) ], weight= 28
Operation  31 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  32 : [ tf.square(x) ], weight= 28
Operation  33 : [ tf.tile(input, multiples) ], weight= 28
Operation  34 : [ tf.math.segment_sum(data, segment_ids) ], weight= 30
Operation  35 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  36 : [ tf.reduce_mean(input_tensor) ], weight= 30
Operation  37 : [ tf.reduce_min(input_tensor) ], weight= 30
Operation  38 : [ tf.argmax(input, axis) ], weight= 32
Operation  39 : [ tf.greater_equal(x, y) ], weight= 32
Operation  40 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  41 : [ tf.zeros_like(input) ], weight= 32
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  45 : [ tf.ones_like(input) ], weight= 36
Operation  46 : [ tf.shape(input) ], weight= 36
Operation  47 : [ tf.sign(x) ], weight= 36
Operation  48 : [ tf.stack(values, axis) ], weight= 36
Operation  49 : [ SlicingAxis0BothOperation ], weight= 36
Operation  50 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis0RightOperation ], weight= 36
Operation  52 : [ SlicingAxis1BothOperation ], weight= 36
Operation  53 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  54 : [ SlicingAxis1RightOperation ], weight= 36
Operation  55 : [ TripleCreationOperation ], weight= 36
Operation  56 : [ tf.squeeze(input) ], weight= 38
Operation  57 : [ tf.abs(x) ], weight= 40
Operation  58 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  59 : [ tf.eye(num_rows) ], weight= 40
Operation  60 : [ tf.fill(dims, value) ], weight= 40
Operation  61 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  62 : [ tf.math.bincount(arr) ], weight= 40
Operation  63 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.unstack(value, axis) ], weight= 40
Operation  70 : [ tf.zeros(shape) ], weight= 40
Operation  71 : [ tf.add_n(inputs) ], weight= 44
Operation  72 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  73 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  74 : [ tf.math.ceil(x) ], weight= 44
Operation  75 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  76 : [ tf.math.floor(x) ], weight= 44
Operation  77 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  78 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  79 : [ tf.not_equal(x, y) ], weight= 44
Operation  80 : [ tf.ones(shape) ], weight= 44
Operation  81 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  82 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  83 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.unique_with_counts(x) ], weight= 48
Operation  96 : [ tf.exp(x) ], weight= 52
Operation  97 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  98 : [ tf.math.log(x) ], weight= 52
Operation  99 : [ tf.math.reciprocal(x) ], weight= 52
Operation  100 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  101 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  102 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  103 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  104 : [ tf.round(x) ], weight= 52
Operation  105 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'in1':
tf.Tensor([  5   7 -12  10  20], shape=(5,), dtype=int32)

Input 'in2':
tf.Tensor([1 2 3 1 2], shape=(5,), dtype=int32)

Output:
tf.Tensor([ 15  27 -12  15  27], shape=(5,), dtype=int32)

Constants: [0, 1, -1, True, False, 5]

Description: sum of elements in the first tensor but partitioned by the second tensor

Searching...

Found solution: tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_sum(in1)), in2)

Solution was found in 28.0 seconds:
tf.gather(tf.math.unsorted_segment_sum(in1, in2, tf.reduce_sum(in1)), in2)
tf.linalg.matvec(tf.cast(tf.equal(in2[:, None], in2), tf.int32), in1)
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ tf.matmul(a, b) ], weight= 18
Operation  3 : [ PairCreationOperation ], weight= 20
Operation  4 : [ SingletonTupleCreationOperation ], weight= 20
Operation  5 : [ tf.constant(value) ], weight= 23
Operation  6 : [ tf.squeeze(input, axis) ], weight= 23
Operation  7 : [ tf.constant(value, dtype) ], weight= 24
Operation  8 : [ tf.equal(x, y) ], weight= 24
Operation  9 : [ tf.gather(params, indices) ], weight= 24
Operation  10 : [ tf.greater(x, y) ], weight= 24
Operation  11 : [ tf.maximum(x, y) ], weight= 24
Operation  12 : [ tf.multiply(x, y) ], weight= 24
Operation  13 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  14 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  15 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  16 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  17 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  18 : [ tf.transpose(a) ], weight= 24
Operation  19 : [ tf.where(condition) ], weight= 24
Operation  20 : [ tf.where(condition, x, y) ], weight= 24
Operation  21 : [ tf.add(x, y) ], weight= 28
Operation  22 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  23 : [ tf.divide(x, y) ], weight= 28
Operation  24 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  25 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  26 : [ tf.range(start) ], weight= 28
Operation  27 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  28 : [ tf.square(x) ], weight= 28
Operation  29 : [ tf.subtract(x, y) ], weight= 28
Operation  30 : [ tf.tile(input, multiples) ], weight= 28
Operation  31 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 30
Operation  32 : [ tf.argmax(input, axis) ], weight= 32
Operation  33 : [ tf.greater_equal(x, y) ], weight= 32
Operation  34 : [ tf.minimum(x, y) ], weight= 32
Operation  35 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  36 : [ tf.zeros_like(input) ], weight= 32
Operation  37 : [ IndexingAxis1Operation ], weight= 32
Operation  38 : [ IndexingOperation ], weight= 32
Operation  39 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 33
Operation  40 : [ tf.concat(values, axis) ], weight= 36
Operation  41 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  42 : [ tf.ones_like(input) ], weight= 36
Operation  43 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  44 : [ tf.shape(input) ], weight= 36
Operation  45 : [ tf.stack(values, axis) ], weight= 36
Operation  46 : [ SlicingAxis0BothOperation ], weight= 36
Operation  47 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  48 : [ SlicingAxis0RightOperation ], weight= 36
Operation  49 : [ SlicingAxis1BothOperation ], weight= 36
Operation  50 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  51 : [ SlicingAxis1RightOperation ], weight= 36
Operation  52 : [ TripleCreationOperation ], weight= 36
Operation  53 : [ tf.squeeze(input) ], weight= 38
Operation  54 : [ tf.scatter_nd(indices, updates, shape) ], weight= 39
Operation  55 : [ tf.sort(values, axis) ], weight= 39
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.fill(dims, value) ], weight= 40
Operation  60 : [ tf.math.bincount(arr) ], weight= 40
Operation  61 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  65 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  66 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  68 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  70 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  71 : [ tf.unstack(value, axis) ], weight= 40
Operation  72 : [ tf.zeros(shape) ], weight= 40
Operation  73 : [ tf.add_n(inputs) ], weight= 44
Operation  74 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  75 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  76 : [ tf.math.ceil(x) ], weight= 44
Operation  77 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  78 : [ tf.math.floor(x) ], weight= 44
Operation  79 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  80 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  81 : [ tf.not_equal(x, y) ], weight= 44
Operation  82 : [ tf.ones(shape) ], weight= 44
Operation  83 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  84 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  85 : [ tf.transpose(a, perm) ], weight= 44
Operation  86 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 45
Operation  87 : [ tf.argmin(input, axis) ], weight= 48
Operation  88 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  89 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  90 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  91 : [ tf.math.logical_not(x) ], weight= 48
Operation  92 : [ tf.math.negative(x) ], weight= 48
Operation  93 : [ tf.math.segment_min(data, segment_ids) ], weight= 48
Operation  94 : [ tf.math.top_k(input, k) ], weight= 48
Operation  95 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  96 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  97 : [ tf.sign(x) ], weight= 48
Operation  98 : [ tf.unique_with_counts(x) ], weight= 48
Operation  99 : [ tf.exp(x) ], weight= 52
Operation  100 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  101 : [ tf.math.log(x) ], weight= 52
Operation  102 : [ tf.math.reciprocal(x) ], weight= 52
Operation  103 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  104 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  105 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  106 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  107 : [ tf.round(x) ], weight= 52
Operation  108 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  109 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  110 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  111 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  112 : [ tf.range(start, limit, delta) ], weight= 56
Operation  113 : [ tf.repeat(input, repeats) ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  116 : [ tf.sqrt(x) ], weight= 56
Operation  117 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  118 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  119 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  120 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  121 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  123 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'in1':
tf.Tensor(
[[11 12 13]
 [30 20 10]
 [77 88 99]], shape=(3, 3), dtype=int32)

Input 'in2':
tf.Tensor(
[[2 0 1]
 [1 0 2]
 [0 2 1]], shape=(3, 3), dtype=int32)

Output:
tf.Tensor(
[[12 13 11]
 [20 30 10]
 [77 99 88]], shape=(3, 3), dtype=int32)

Constants: [0, 1, -1, True, False, 3]

Description: scatter a 2-D tensor with indices

Searching...

Found solution: tf.gather(in1, tf.argsort(in2, axis=1, stable=True), axis=1, batch_dims=1)

Solution was found in 65.8 seconds:
tf.gather(in1, tf.argsort(in2, axis=1, stable=True), axis=1, batch_dims=1)
tf.gather(in1, tf.argsort(in2, axis=1), batch_dims=1)
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.constant(value) ], weight= 17
Operation  2 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  3 : [ PairCreationOperation ], weight= 20
Operation  4 : [ SingletonTupleCreationOperation ], weight= 20
Operation  5 : [ tf.range(start) ], weight= 21
Operation  6 : [ tf.argsort(values, axis, stable=True) ], weight= 22
Operation  7 : [ tf.squeeze(input, axis) ], weight= 23
Operation  8 : [ tf.constant(value, dtype) ], weight= 24
Operation  9 : [ tf.equal(x, y) ], weight= 24
Operation  10 : [ tf.gather(params, indices) ], weight= 24
Operation  11 : [ tf.greater(x, y) ], weight= 24
Operation  12 : [ tf.matmul(a, b) ], weight= 24
Operation  13 : [ tf.maximum(x, y) ], weight= 24
Operation  14 : [ tf.minimum(x, y) ], weight= 24
Operation  15 : [ tf.multiply(x, y) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  21 : [ tf.transpose(a) ], weight= 24
Operation  22 : [ tf.where(condition) ], weight= 24
Operation  23 : [ tf.where(condition, x, y) ], weight= 24
Operation  24 : [ IndexingOperation ], weight= 24
Operation  25 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 27
Operation  26 : [ tf.add(x, y) ], weight= 28
Operation  27 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  28 : [ tf.divide(x, y) ], weight= 28
Operation  29 : [ tf.gather_nd(params, indices) ], weight= 28
Operation  30 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  31 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  32 : [ tf.square(x) ], weight= 28
Operation  33 : [ tf.subtract(x, y) ], weight= 28
Operation  34 : [ tf.tile(input, multiples) ], weight= 28
Operation  35 : [ tf.math.bincount(arr) ], weight= 30
Operation  36 : [ tf.argmax(input, axis) ], weight= 32
Operation  37 : [ tf.greater_equal(x, y) ], weight= 32
Operation  38 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  39 : [ tf.zeros_like(input) ], weight= 32
Operation  40 : [ IndexingAxis1Operation ], weight= 32
Operation  41 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 34
Operation  42 : [ tf.concat(values, axis) ], weight= 36
Operation  43 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  44 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 36
Operation  45 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  46 : [ tf.ones_like(input) ], weight= 36
Operation  47 : [ tf.reverse(tensor, axis) ], weight= 36
Operation  48 : [ tf.roll(input, shift, axis) ], weight= 36
Operation  49 : [ tf.shape(input) ], weight= 36
Operation  50 : [ tf.stack(values, axis) ], weight= 36
Operation  51 : [ SlicingAxis0BothOperation ], weight= 36
Operation  52 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  53 : [ SlicingAxis0RightOperation ], weight= 36
Operation  54 : [ SlicingAxis1BothOperation ], weight= 36
Operation  55 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  56 : [ SlicingAxis1RightOperation ], weight= 36
Operation  57 : [ TripleCreationOperation ], weight= 36
Operation  58 : [ tf.squeeze(input) ], weight= 38
Operation  59 : [ tf.sort(values, axis) ], weight= 39
Operation  60 : [ tf.abs(x) ], weight= 40
Operation  61 : [ tf.eye(num_rows) ], weight= 40
Operation  62 : [ tf.fill(dims, value) ], weight= 40
Operation  63 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  64 : [ tf.math.segment_max(data, segment_ids) ], weight= 40
Operation  65 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  66 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  67 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 40
Operation  68 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  69 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  71 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  72 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  73 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  74 : [ tf.unstack(value, axis) ], weight= 40
Operation  75 : [ tf.zeros(shape) ], weight= 40
Operation  76 : [ tf.range(start, limit, delta) ], weight= 42
Operation  77 : [ tf.add_n(inputs) ], weight= 44
Operation  78 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  79 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  80 : [ tf.math.ceil(x) ], weight= 44
Operation  81 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  82 : [ tf.math.floor(x) ], weight= 44
Operation  83 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  84 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  85 : [ tf.not_equal(x, y) ], weight= 44
Operation  86 : [ tf.ones(shape) ], weight= 44
Operation  87 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  88 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  89 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 44
Operation  90 : [ tf.transpose(a, perm) ], weight= 44
Operation  91 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 45
Operation  92 : [ tf.argmin(input, axis) ], weight= 48
Operation  93 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  94 : [ tf.math.logical_not(x) ], weight= 48
Operation  95 : [ tf.math.negative(x) ], weight= 48
Operation  96 : [ tf.math.top_k(input, k) ], weight= 48
Operation  97 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  98 : [ tf.sign(x) ], weight= 48
Operation  99 : [ tf.unique_with_counts(x) ], weight= 48
Operation  100 : [ tf.exp(x) ], weight= 52
Operation  101 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  102 : [ tf.math.log(x) ], weight= 52
Operation  103 : [ tf.math.reciprocal(x) ], weight= 52
Operation  104 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  105 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  106 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  107 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  108 : [ tf.round(x) ], weight= 52
Operation  109 : [ tf.scatter_nd(indices, updates, shape) ], weight= 52
Operation  110 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  111 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  112 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  113 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  114 : [ tf.repeat(input, repeats) ], weight= 56
Operation  115 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  116 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  117 : [ tf.sqrt(x) ], weight= 56
Operation  118 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  119 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  120 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  121 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  123 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Input 'in1':
tf.Tensor([10  7  4  3  2  8], shape=(6,), dtype=int32)

Output:
tf.Tensor([5 3 2 1 0 4], shape=(6,), dtype=int32)

Constants: [0, 1, -1, True, False, 6]

Description: sort a tensor and return sorted index in original order

Searching...

Found solution: tf.argsort(tf.argsort(in1, axis=0, stable=True), axis=0, stable=True)

Solution was found in 1.1 seconds:
tf.argsort(tf.argsort(in1, axis=0, stable=True), axis=0, stable=True)
tf.cast(tf.argsort(tf.argsort(in1)), tf.int32)
Reordered weights:
Operation  0 : [ tf.cast(x, dtype) ], weight= 16
Operation  1 : [ tf.expand_dims(input, axis) ], weight= 18
Operation  2 : [ tf.gather(params, indices) ], weight= 18
Operation  3 : [ tf.matmul(a, b) ], weight= 18
Operation  4 : [ tf.maximum(x, y) ], weight= 18
Operation  5 : [ tf.multiply(x, y) ], weight= 18
Operation  6 : [ PairCreationOperation ], weight= 20
Operation  7 : [ SingletonTupleCreationOperation ], weight= 20
Operation  8 : [ tf.gather_nd(params, indices) ], weight= 21
Operation  9 : [ tf.subtract(x, y) ], weight= 21
Operation  10 : [ tf.constant(value) ], weight= 23
Operation  11 : [ tf.squeeze(input, axis) ], weight= 23
Operation  12 : [ tf.constant(value, dtype) ], weight= 24
Operation  13 : [ tf.equal(x, y) ], weight= 24
Operation  14 : [ tf.greater(x, y) ], weight= 24
Operation  15 : [ tf.minimum(x, y) ], weight= 24
Operation  16 : [ tf.reduce_max(input_tensor) ], weight= 24
Operation  17 : [ tf.reduce_max(input_tensor, axis) ], weight= 24
Operation  18 : [ tf.reduce_sum(input_tensor) ], weight= 24
Operation  19 : [ tf.reduce_sum(input_tensor, axis) ], weight= 24
Operation  20 : [ tf.tensordot(a, b, axes) ], weight= 24
Operation  21 : [ tf.transpose(a) ], weight= 24
Operation  22 : [ tf.where(condition) ], weight= 24
Operation  23 : [ tf.where(condition, x, y) ], weight= 24
Operation  24 : [ tf.add(x, y) ], weight= 28
Operation  25 : [ tf.boolean_mask(tensor, mask) ], weight= 28
Operation  26 : [ tf.divide(x, y) ], weight= 28
Operation  27 : [ tf.one_hot(indices, depth) ], weight= 28
Operation  28 : [ tf.range(start) ], weight= 28
Operation  29 : [ tf.reshape(tensor, shape) ], weight= 28
Operation  30 : [ tf.square(x) ], weight= 28
Operation  31 : [ tf.tile(input, multiples) ], weight= 28
Operation  32 : [ tf.math.segment_max(data, segment_ids) ], weight= 30
Operation  33 : [ tf.math.unsorted_segment_sum(data, segment_ids, num_segments) ], weight= 30
Operation  34 : [ tf.argmax(input, axis) ], weight= 32
Operation  35 : [ tf.greater_equal(x, y) ], weight= 32
Operation  36 : [ tf.sequence_mask(lengths) ], weight= 32
Operation  37 : [ tf.zeros_like(input) ], weight= 32
Operation  38 : [ IndexingAxis1Operation ], weight= 32
Operation  39 : [ IndexingOperation ], weight= 32
Operation  40 : [ tf.tensor_scatter_nd_update(tensor, indices, updates) ], weight= 33
Operation  41 : [ tf.concat(values, axis) ], weight= 36
Operation  42 : [ tf.gather_nd(params, indices, batch_dims) ], weight= 36
Operation  43 : [ tf.math.segment_min(data, segment_ids) ], weight= 36
Operation  44 : [ tf.ones_like(input) ], weight= 36
Operation  45 : [ tf.shape(input) ], weight= 36
Operation  46 : [ tf.stack(values, axis) ], weight= 36
Operation  47 : [ SlicingAxis0BothOperation ], weight= 36
Operation  48 : [ SlicingAxis0LeftOperation ], weight= 36
Operation  49 : [ SlicingAxis0RightOperation ], weight= 36
Operation  50 : [ SlicingAxis1BothOperation ], weight= 36
Operation  51 : [ SlicingAxis1LeftOperation ], weight= 36
Operation  52 : [ SlicingAxis1RightOperation ], weight= 36
Operation  53 : [ TripleCreationOperation ], weight= 36
Operation  54 : [ tf.squeeze(input) ], weight= 38
Operation  55 : [ tf.scatter_nd(indices, updates, shape) ], weight= 39
Operation  56 : [ tf.abs(x) ], weight= 40
Operation  57 : [ tf.argsort(values, axis, stable=True) ], weight= 40
Operation  58 : [ tf.eye(num_rows) ], weight= 40
Operation  59 : [ tf.fill(dims, value) ], weight= 40
Operation  60 : [ tf.gather(params, indices, axis, batch_dims) ], weight= 40
Operation  61 : [ tf.math.bincount(arr) ], weight= 40
Operation  62 : [ tf.math.segment_sum(data, segment_ids) ], weight= 40
Operation  63 : [ tf.math.unsorted_segment_max(data, segment_ids, num_segments) ], weight= 40
Operation  64 : [ tf.pad(tensor, paddings, mode='CONSTANT') ], weight= 40
Operation  65 : [ tf.reduce_any(input_tensor, axis) ], weight= 40
Operation  66 : [ tf.reduce_mean(input_tensor) ], weight= 40
Operation  67 : [ tf.reduce_mean(input_tensor, axis) ], weight= 40
Operation  68 : [ tf.reduce_min(input_tensor) ], weight= 40
Operation  69 : [ tf.reduce_min(input_tensor, axis) ], weight= 40
Operation  70 : [ tf.unstack(value, axis) ], weight= 40
Operation  71 : [ tf.zeros(shape) ], weight= 40
Operation  72 : [ tf.add_n(inputs) ], weight= 44
Operation  73 : [ tf.broadcast_to(input, shape) ], weight= 44
Operation  74 : [ tf.clip_by_value(t, clip_value_min, clip_value_max) ], weight= 44
Operation  75 : [ tf.math.ceil(x) ], weight= 44
Operation  76 : [ tf.math.cumsum(x, axis) ], weight= 44
Operation  77 : [ tf.math.floor(x) ], weight= 44
Operation  78 : [ tf.math.logical_and(x, y) ], weight= 44
Operation  79 : [ tf.math.logical_or(x, y) ], weight= 44
Operation  80 : [ tf.not_equal(x, y) ], weight= 44
Operation  81 : [ tf.ones(shape) ], weight= 44
Operation  82 : [ tf.reduce_all(input_tensor, axis) ], weight= 44
Operation  83 : [ tf.sequence_mask(lengths, maxlen) ], weight= 44
Operation  84 : [ tf.transpose(a, perm) ], weight= 44
Operation  85 : [ tf.argmin(input, axis) ], weight= 48
Operation  86 : [ tf.argsort(values, axis, direction='DESCENDING', stable=True) ], weight= 48
Operation  87 : [ tf.eye(num_rows, dtype) ], weight= 48
Operation  88 : [ tf.math.cumsum(x, axis, exclusive=True) ], weight= 48
Operation  89 : [ tf.math.logical_not(x) ], weight= 48
Operation  90 : [ tf.math.negative(x) ], weight= 48
Operation  91 : [ tf.math.top_k(input, k) ], weight= 48
Operation  92 : [ tf.math.unsorted_segment_min(data, segment_ids, num_segments) ], weight= 48
Operation  93 : [ tf.reverse(tensor, axis) ], weight= 48
Operation  94 : [ tf.roll(input, shift, axis) ], weight= 48
Operation  95 : [ tf.sign(x) ], weight= 48
Operation  96 : [ tf.unique_with_counts(x) ], weight= 48
Operation  97 : [ tf.exp(x) ], weight= 52
Operation  98 : [ tf.math.divide_no_nan(x, y) ], weight= 52
Operation  99 : [ tf.math.log(x) ], weight= 52
Operation  100 : [ tf.math.reciprocal(x) ], weight= 52
Operation  101 : [ tf.math.squared_difference(x, y) ], weight= 52
Operation  102 : [ tf.pad(tensor, paddings, mode='CONSTANT', constant_values) ], weight= 52
Operation  103 : [ tf.reduce_prod(input_tensor, axis) ], weight= 52
Operation  104 : [ tf.repeat(input, repeats, axis) ], weight= 52
Operation  105 : [ tf.round(x) ], weight= 52
Operation  106 : [ tf.sort(values, axis) ], weight= 52
Operation  107 : [ tf.math.count_nonzero(input) ], weight= 56
Operation  108 : [ tf.math.count_nonzero(input, axis) ], weight= 56
Operation  109 : [ tf.math.segment_mean(data, segment_ids) ], weight= 56
Operation  110 : [ tf.math.unsorted_segment_mean(data, segment_ids, num_segments) ], weight= 56
Operation  111 : [ tf.range(start, limit, delta) ], weight= 56
Operation  112 : [ tf.repeat(input, repeats) ], weight= 56
Operation  113 : [ tf.searchsorted(sorted_sequence, values, side='left') ], weight= 56
Operation  114 : [ tf.searchsorted(sorted_sequence, values, side='right') ], weight= 56
Operation  115 : [ tf.sqrt(x) ], weight= 56
Operation  116 : [ tf.eye(num_rows, num_columns) ], weight= 60
Operation  117 : [ tf.math.logical_xor(x, y) ], weight= 60
Operation  118 : [ tf.math.reciprocal_no_nan(x) ], weight= 60
Operation  119 : [ tf.math.segment_prod(data, segment_ids) ], weight= 60
Operation  120 : [ tf.math.unsorted_segment_prod(data, segment_ids, num_segments) ], weight= 60
Operation  121 : [ tf.pad(tensor, paddings, mode='REFLECT') ], weight= 60
Operation  122 : [ tf.pad(tensor, paddings, mode='SYMMETRIC') ], weight= 60
Operation  123 : [ tf.sort(values, axis, direction='DESCENDING') ], weight= 60
Input 'tensor':
tf.Tensor(
[[ 1  2  3  4  5]
 [ 4  5  6  7  8]
 [ 7  8  9 10 11]], shape=(3, 5), dtype=int32)

Input 'indices':
tf.Tensor(
[[0 0]
 [0 2]
 [1 1]
 [1 3]
 [2 2]
 [2 4]], shape=(6, 2), dtype=int32)

Input 'updates':
tf.Tensor(
[[ 0 -2]
 [-1 -3]
 [-2 -4]], shape=(3, 2), dtype=int32)

Output:
tf.Tensor(
[[ 0  2 -2  4  5]
 [ 4 -1  6 -3  8]
 [ 7  8 -2 10 -4]], shape=(3, 5), dtype=int32)

Constants: [0, 1, -1, True, False, 2, 3, 5, 6]

Description: update a tensor at the given indices

Searching...

